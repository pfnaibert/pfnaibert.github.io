[
  {
    "path": "posts/2020-09-09-gdp-season/",
    "title": "Brazilian Seasonally Adjusted GDP",
    "description": "In this post, I will replicate the IBGE Seasonally Adjusted GDP from the GDP Chained Quarterly Index with the seasonal package",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-09-09",
    "categories": [
      "R",
      "ggplot2",
      "PIB",
      "GDP",
      "seasonal"
    ],
    "contents": "\nLast Updated 2020-09-09\nOn the IBGE publication of the Brazilian GDP data, they release, among others, 3 series:\nGDP Chained Quarterly Index: Table 1620\nGDP Chained Quarterly Index with Seasonal Adjustment: Table 1621\nGDP Growth T/T-1 with Seasonal Adjustment: Table 5932\nOn this post, I will try to match the IBGE model of Seasonally Adjusted using the X13-ARIMA software. A note of caution is in order here, I am not actually trying to model the series, what we are trying to do is to match the IBGE model.\nTo replicate the IBGE model, we use the GDP Chained Quarterly Index (with NO seasonal adjustment) and use the X13-ARIMA software through the seasonal package.\nInstallation\nThe seasonal package depends on the x13binary package. It should automatically download and compile the x13 program. But, alas, it didn’t work on my machine, so I manually downloaded the program from the census bureau website and indicated to R where the program was located.\nLet’s load the seasonal package and use the checkX13() function to check if it is working:\n\n\nlibrary(seasonal)\n\nThe system variable 'X13_PATH' has been manually set to: \n  ~/X13\nSince version 1.2, 'seasonal' relies on the 'x13binary' \npackage and does not require 'X13_PATH' to be set anymore. \nOnly set 'X13_PATH' manually if you intend to use your own\nbinaries. See ?seasonal for details.\n\ncheckX13()\n\nX-13 installation test:\n\n  - X13_PATH correctly specified\n\n  - binary executable file found\n\n  - command line test run successful\n\n  - command line test produced HTML output\n\n  - seasonal test run successful\n\nCongratulations! 'seasonal' should work fine!\n\nOK. It works.\nLet’s get to Work\nFirst, let’s load up our functions and other libraries.\n\n\n# source functions\nsource(\"../../R/funs-gdp.R\")\n\n# load libraries\nlibrary(reshape2)\nlibrary(ggplot2)\n\nNow, we load the data and make some transformations.\n\n\n# LOAD DATA\ngdp.index.NSA <-  readRDS(\"../../data/gdp-index-NSA.rds\")\ngdp.index.SA  <-  readRDS(\"../../data/gdp-index-SA.rds\")\n\ngdp.nsa <- df2ts( gdp.index.NSA )[, \"GDP\"]\ngdp.sa1 <- df2ts( gdp.index.SA )[, \"GDP\"]\n\ngdp.index <- cbind(gdp.index.NSA[, c(1,2,3)], \"NSA\"=gdp.index.NSA$GDP, \"SA\"=gdp.index.SA$GDP)\n\nNow that the data is loaded, let’s make a plot.\n\n\n\nX13 Arima\nIBGE Model\nOn the IBGE release we can find the model used by IBGE on the Table on Page 24. There it says:\nVariável\nsazonalidade\ndecomposição\nmodelo arima\nefeitos de intervenção\nPIB\nSim\nmultiplicativo\n(2 1 2)(0 1 1)\nTD, Easter[1], LS2008.4, AO2020.2\nSo let’s try to replicate it using the seasonal package. The X13-ARIMA should do everything automatically.\nTrying (and Failing) to replicate\nAutomatic Model\nFirst, we try a vanilla call, just seas(gdp.nsa), let’s see what it outputs:\n\n\n# Vanilla Model\nm0 <- seas(gdp.nsa)\nsummary(m0)\n\nCall:\nseas(x = gdp.nsa)\n\nCoefficients:\n                 Estimate Std. Error z value Pr(>|z|)    \nWeekday         0.0012918  0.0005785   2.233   0.0255 *  \nLS2008.4       -0.0512843  0.0116034  -4.420 9.88e-06 ***\nAO2020.2       -0.1072112  0.0128372  -8.352  < 2e-16 ***\nMA-Seasonal-04  0.6342704  0.0755385   8.397  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nSEATS adj.  ARIMA: (0 1 0)(0 1 1)  Obs.: 98  Transform: log\nAICc: 387.1, BIC: 399.1  QS (no seasonality in final):    0  \nBox-Ljung (no autocorr.): 10.28   Shapiro (normality): 0.977 .\n\nAlso, we can check the call used by the function:\n\n\nstatic(m0)\n\nseas(x = gdp.nsa, regression.variables = c(\"td1coef\", \"ls2008.4\", \n\"ao2020.2\"), arima.model = \"(0 1 0)(0 1 1)\", regression.aictest = NULL, \n    outlier = NULL, transform.function = \"log\")\n\nOK, so it is a SARIMA model \\((0, 1, 0)(0, 1, 1)\\) with level shift on 2008:Q4 and an outlier on 2020:Q2. Also, there is a weekday effect. Comparing with the IBGE model, it is NOT the same. The IBGE model has SARIMA of order \\((2, 1, 2)(0, 1, 1)\\) and easter effect. About the Trading Days (TD), the IBGE release is a little mysterious, what kind of TD did they use? There is not a unique specification for that effect.\nNow, let’s check the difference between IBGE’s seasonal ajustment and ours.\n\n\nmean( abs( gdp.sa1 - final(m0) ) )\n\n[1] 0.1729848\n\nall.equal(gdp.sa1, final(m0))\n\n[1] \"Mean relative difference: 0.001224425\"\n\nSo it is really not the model we want.\nManual SARIMA (2 1 2)(0 1 1) Model\nLet’s try some more specifications:\n\n\nm1 <- seas(\nx = gdp.nsa,\ntransform.function = \"log\",\narima.model = \"(2 1 2)(0 1 1)\",\n)\nsummary(m1)\n\nCall:\nseas(x = gdp.nsa, transform.function = \"log\", arima.model = \"(2 1 2)(0 1 1)\")\n\nCoefficients:\n                    Estimate Std. Error z value Pr(>|z|)    \nWeekday            0.0012377  0.0005456   2.269  0.02330 *  \nEaster[1]         -0.0029428  0.0018472  -1.593  0.11114    \nLS2008.4          -0.0509225  0.0112885  -4.511 6.45e-06 ***\nAO2020.2          -0.1028350  0.0126628  -8.121 4.62e-16 ***\nAR-Nonseasonal-01 -0.1208207  0.1792415  -0.674  0.50027    \nAR-Nonseasonal-02  0.5719158  0.1910685   2.993  0.00276 ** \nMA-Nonseasonal-01 -0.2223337  0.1995344  -1.114  0.26517    \nMA-Nonseasonal-02  0.5275199  0.2057442   2.564  0.01035 *  \nMA-Seasonal-04     0.6271997  0.0927007   6.766 1.33e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nSEATS adj.  ARIMA: (2 1 2)(0 1 1)  Obs.: 98  Transform: log\nAICc: 395.4, BIC:   418  QS (no seasonality in final):    0  \nBox-Ljung (no autocorr.): 6.437   Shapiro (normality): 0.9745 .\n\nmean( abs( gdp.sa1 - final(m1) ) )\n\n[1] 0.1389248\n\nall.equal(gdp.sa1, final(m1))\n\n[1] \"Mean relative difference: 0.0009833405\"\n\nOK, there’s something wrong. Checking the IBGE CNT website under Ajuste_Sazonal there is a pdf that explains how the function call is made by the IBGE researcher. We can use the view(m1) function to get direct access to the X13 program by means of a shiny app. On the X13 program we have to use the options listed below (the IBGE pdf has a typo, it says tipes when it should be types):\n\ntransform{\n  function = auto\n}\n\nregression{\n  aictest = (td easter)\n}\n\npickmdl{\n  method = best\n  identify = all\n}\n\noutlier{\n  types = all\n}\n\nforecast{\n  maxlead = 6\n  maxback = 0\n}\n\nx11{\n  savelog = q\n}\nSending the output to the console, we get the static() call, which can be summarised as:\n\n\nm1 <- seas(x = gdp.nsa,\n     automdl = NULL,\n     pickmdl.method = \"best\",\n     pickmdl.identify = \"all\",\n     outlier.types = \"all\",\n     forecast.maxlead = 6,\n     forecast.maxback = 0,\n     x11.savelog = \"q\")\n\nThe IBGE specification\n\n\nsummary(m1)\n\nCall:\nseas(x = gdp.nsa, automdl = NULL, pickmdl.method = \"best\", pickmdl.identify = \"all\", \n    outlier.types = \"all\", forecast.maxlead = 6, forecast.maxback = 0, \n    x11.savelog = \"q\")\n\nCoefficients:\n                    Estimate Std. Error z value Pr(>|z|)    \nWeekday            0.0012377  0.0005456   2.269  0.02330 *  \nEaster[1]         -0.0029428  0.0018472  -1.593  0.11114    \nLS2008.4          -0.0509225  0.0112885  -4.511 6.45e-06 ***\nAO2020.2          -0.1028350  0.0126628  -8.121 4.62e-16 ***\nAR-Nonseasonal-01 -0.1207980  0.1792272  -0.674  0.50032    \nAR-Nonseasonal-02  0.5719139  0.1910600   2.993  0.00276 ** \nMA-Nonseasonal-01 -0.2223111  0.1995181  -1.114  0.26518    \nMA-Nonseasonal-02  0.5275208  0.2057344   2.564  0.01034 *  \nMA-Seasonal-04     0.6272008  0.0927001   6.766 1.32e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nX11 adj.  ARIMA: (2 1 2)(0 1 1)  Obs.: 98  Transform: log\nAICc: 395.4, BIC:   418  QS (no seasonality in final):    0  \nBox-Ljung (no autocorr.): 6.438   Shapiro (normality): 0.9745 .\n\nmean(abs( gdp.sa1 - final(m1) ))\n\n[1] 3.774537e-05\n\nall.equal(gdp.sa1, final(m1))\n\n[1] \"Mean relative difference: 2.671702e-07\"\n\nstatic(m1)\n\nseas(x = gdp.nsa, forecast.maxlead = 6, forecast.maxback = 0, \n    x11.savelog = \"q\", regression.variables = c(\"td1coef\", \"easter[1]\", \n    \"ls2008.4\", \"ao2020.2\"), arima.model = \"(2 1 2)(0 1 1)\", \n    regression.aictest = NULL, outlier = NULL, transform.function = \"log\")\n\nNow, not only the function returned the specification described on the IBGE release, but also the differences are after the 4th decimal place (which suggests rounding errors only).\nSeasonally Adjusted Series Plot\nLet’s plot the Seasonally Adjusted Index and the differences of the IBGE original series from Table 1621 and our X13 adjustment:\n\n\nplot(final(m1), col = \"blue\", lwd=2)\nlines(gdp.sa1, col=\"red\", lwd=2)\n\n\nplot(final(m1)-gdp.sa1)\nabline(h=0)\n\n\nYeah, it is pretty close.\nT/T-1 Growth\nAlso, let’s check if the T/T-1 returns match:\n\n\ngdp.ret1.full <-  readRDS(\"../../data/gdp-ret1.rds\")\ngdp.ret <- df2ts( gdp.ret1.full )[, \"GDP\"]\n\nmyret1 <- ts(round(ret1(gdp.sa1),1), start=c(1996,1), freq=4)\nmyret2 <- ts(round(ret1(final(m1)),1), start=c(1996,1), freq=4)\nall.equal(gdp.ret, myret1)\n\n[1] TRUE\n\nall.equal(gdp.ret, myret2)\n\n[1] TRUE\n\nIt does! We did it!\nMore Plots\nFinally, let’s replicate the Figures I.4 and I.5 of the IBGE release with ggplot:\n\n\n\n\n\n\nAnd it looks a lot like they are the same plots.\nFinal Thoughts\nSo, thanks to the IBGE documentation we could replicate the Seasonally Adjusted series. I think I only wished it was a little easier to find it; also in the release, there could be calls made to the X13 program. But well, at least they did publish the calls, it was just a bit out of the way for us to find it.\nTHANK YOU FOR READING!\n\n\n",
    "preview": "posts/2020-09-09-gdp-season/post_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2020-09-09T18:57:05-03:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 960
  },
  {
    "path": "posts/2020-09-01-gdp-2020Q2/",
    "title": "Brazilian GDP 2020:Q2",
    "description": "Data from the 2020:Q2 Brazilian GDP",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-09-01",
    "categories": [
      "R",
      "ggplot2",
      "dygraphs",
      "scraping",
      "webscraping",
      "reproducible-report",
      "reproducible-research",
      "PIB",
      "GDP"
    ],
    "contents": "\nIn this post, we will do a not so deep dive in the IBGE release of the 2020:Q2 GDP results. As usual, my source code for the functions can be found here.\nFirst, let’s load up our functions and other libraries.\n\n\n# source functions\nsource(\"../../R/funs-macro.R\")\n\n# load libraries\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(dygraphs)\n\nI already downloaded the data from the SIDRA website using the functions, from the funs-macro.R file.\n\n\ngdp.dl()\ngdp.save.rets()\ngdp.save.levels()\n\nNow, we load the data and make some transformations.\n\n\n# LOAD DATA\n\n# levels\ngdp.nominal <- readRDS(\"../../data/gdp-nominal.rds\")\ngdp.index   <- readRDS(\"../../data/gdp-index-NSA.rds\")\ngdp.real    <- readRDS(\"../../data/gdp-real-NSA.rds\")\n\n# rets\ngdp.ret4    <- readRDS(\"../../data/gdp-ret4.rds\")\ngdp.ret1    <- readRDS(\"../../data/gdp-ret1.rds\")\ngdp.retsum4 <- readRDS(\"../../data/gdp-retsum4.rds\")\ngdp.retyear <- readRDS(\"../../data/gdp-retyear.rds\")\n\n\n\n# data as ts (for dygraphs)\ngdp.nominal.ts <- df2ts(gdp.nominal)\ngdp.index.ts   <- df2ts(gdp.index)\ngdp.real.ts    <- df2ts(gdp.real)\ngdp.ret4.ts    <- df2ts(gdp.ret4)\ngdp.ret1.ts    <- df2ts(gdp.ret1)\ngdp.retsum4.ts <- df2ts(gdp.retsum4)\ngdp.retyear.ts <- df2ts(gdp.retyear)\n\n\n\n# only GDPs\ngdps <- data.frame( gdp.nominal[, c(1,2,3)],  \"nominal\"=gdp.nominal[, \"GDP\"]/1000, \"index\"=gdp.index[, \"GDP\"], \"real\"=gdp.real[, \"GDP\"]/1000 )\ngdps$nominal.sum4 <- sum4(gdps$nominal)\ngdps$real.sum4    <- sum4(gdps$real)\ngdps$index.sum4   <- sum4(gdps$index)/4\ngdps.ts <- df2ts(gdps)\n\nGGPLOT Functions\nBecause I will make a lot of the same plot, but using different data as input, I decided to make some ggplot wraper functions.\n\n\n# function to ggplot Growth by SECTORS\nggplot.last <- function(data, vars)\n{\n# TODO: ERROR CATCHING\n\nnewdata <- melt( sort( tail( data[, vars], 1 ), decreasing=T ) )\n\n# plot\nggplot(newdata, aes( x = variable, y = value, fill = value > 0 ) ) +\ngeom_bar( stat=\"identity\" ) +\nscale_fill_manual(values=c(\"red\", \"blue\") ) +\nguides(fill=FALSE) +\ngeom_hline(yintercept=0 ) +\ngeom_text( aes(label=value, vjust=ifelse(value > 0, \"bottom\", \"top\") ) )+\ntheme(axis.text.x = element_text(color=\"black\", size=10, angle=90) ) +\nxlab(\"\") + ylab(\"\")\n}\n\n\n\n# function to ggplot Growth by SECTORS\nggplot.growth <- function(data, ndates, vars)\n{\n# TODO: ERROR CATCHING\n\nnewdata      <- tail(data[, vars], ndates)\nnewdata$date <- date2qtr( newdata$date )\nnewdata      <- melt( newdata, id=\"date\" )\n\n#plot\nggplot(newdata, aes( x = date, y = value, group=variable, color=variable) ) +\ngeom_line( size=1 ) +\ngeom_hline(yintercept=0 ) +\ntheme(axis.text.x = element_text(color=\"black\", size=11) ) +\nxlab(\"\") + ylab(\"\")\n}\n\n\n\n# vars for ggplot.last\ncond.vars <- !(colnames(gdp.ret4) %in% c(\"date\", \"year\", \"qtr\", \"IND\", \"SER\", \"VAB\", \"TAX\", \"C\", \"FBKF\", \"M\", \"X\", \"G\"))\nvars1     <- colnames(gdp.ret4[, cond.vars])\n\nGDP GROWTH\nT/T-1 (With Seasonal Adjustment)\n\n\nggplot.last(gdp.ret1, vars1)\n\n\nggplot.growth(gdp.ret1, ndates=8, vars=c(\"date\", \"GDP\", \"AGR\", \"IND\", \"SER\"))\n\n\ndygraph(window(gdp.ret1.ts[,c(\"GDP\", \"AGR\", \"IND\", \"SER\")], start=c(2018,3) ), main = \"GDP by Sectors\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Sectors\",\"labels\":[\"quarter\",\"GDP\",\"AGR\",\"IND\",\"SER\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[0.8,-0.4,0.6,0.5,0.1,0.5,-2.5,-9.7],[1,0.5,-1,1.1,1.1,-0.7,0.5,0.4],[0.4,-0.9,0.1,0.7,0.5,0.1,-0.8,-12.3],[0.5,-0.2,0.9,0,0.1,0.6,-2.2,-9.7]]},\"evals\":[],\"jsHooks\":[]}\nggplot.growth(gdp.ret1, ndates=8, vars=c(\"date\", \"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\"))\n\n\ndygraph(window(gdp.ret1.ts[,c(\"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\")], start=c(2018,3) ), main = \"GDP by Demand Variables\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Demand Variables\",\"labels\":[\"quarter\",\"GDP\",\"C\",\"G\",\"FBKF\",\"X\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[0.8,-0.4,0.6,0.5,0.1,0.5,-2.5,-9.7],[0.5,0.2,0.8,0.3,0.5,0.4,-1.9,-12.5],[0.3,-1.3,0.6,-0.3,-0.4,0.4,0.2,-8.8],[5.1,-1.5,-1,2.9,1.5,-3.5,2.3,-15.4],[6.2,2,-3.6,-2.6,-2.2,2.3,-1.3,1.8],[6.6,-3.4,-2.1,4.8,0.2,-2.6,0.8,-13.2]]},\"evals\":[],\"jsHooks\":[]}\nT/T-4\n\n\nggplot.last(gdp.ret4, vars1)\n\n\nggplot.growth(gdp.ret4, ndate=8, vars=c(\"date\", \"GDP\", \"AGR\", \"IND\", \"SER\", \"TAX\"))\n\n\ndygraph(window(gdp.ret4.ts[,c(\"GDP\", \"AGR\", \"IND\", \"SER\", \"TAX\")], start=c(2018,3) ), main = \"GDP by Sectors\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Sectors\",\"labels\":[\"quarter\",\"GDP\",\"AGR\",\"IND\",\"SER\",\"TAX\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[1.5,1.2,0.6,1.1,1.2,1.7,-0.3,-11.4],[4.9,5.1,0.9,1.4,2.1,0.4,1.9,1.2],[0.8,-0.5,-1,0.3,1,1.5,-0.1,-12.7],[1.4,1.1,1.2,1.2,1,1.6,-0.5,-11.2],[1.5,0.7,0.3,1.9,1.8,1.9,-0.4,-15.6]]},\"evals\":[],\"jsHooks\":[]}\nggplot.growth(gdp.ret4, ndate=8, vars=c(\"date\", \"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\"))\n\n\ndygraph(window(gdp.ret4.ts[,c(\"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\")], start=c(2018,3) ), main = \"GDP by Demand Variables\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Demand Variables\",\"labels\":[\"quarter\",\"GDP\",\"C\",\"G\",\"FBKF\",\"X\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[1.5,1.2,0.6,1.1,1.2,1.7,-0.3,-11.4],[1.6,1.4,1.5,1.8,1.9,2.1,-0.7,-13.5],[1.1,-0.9,0,-0.7,-1.4,0.3,0,-8.6],[7.7,2.8,1.1,5.4,2.9,-0.4,4.3,-15.2],[2.4,12,-1.6,1.3,-4.4,-5.1,-2.2,0.5],[13.9,5,-2.3,4.9,2.2,-0.2,5.1,-14.9]]},\"evals\":[],\"jsHooks\":[]}\nAC4Q T/T-4\n\n\nggplot.last(gdp.retsum4, vars1)\n\n\nggplot.growth(gdp.retsum4, ndate=8, vars=c(\"date\", \"GDP\", \"AGR\", \"IND\", \"SER\", \"TAX\"))\n\n\ndygraph(window(gdp.retsum4.ts[,c(\"GDP\", \"AGR\", \"IND\", \"SER\", \"TAX\")], start=c(2018,3) ), main = \"GDP by Sectors\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Sectors\",\"labels\":[\"quarter\",\"GDP\",\"AGR\",\"IND\",\"SER\",\"TAX\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[1.6,1.3,1.1,1.1,1,1.1,0.9,-2.2],[1.4,1.4,2.5,2.7,2,1.3,1.6,1.5],[1.3,0.5,0.1,-0.1,0,0.5,0.7,-2.5],[1.7,1.5,1.2,1.2,1.1,1.3,0.9,-2.2],[2.3,1.6,1,1.1,1.1,1.5,1.3,-3]]},\"evals\":[],\"jsHooks\":[]}\nggplot.growth(gdp.retsum4, ndate=8, vars=c(\"date\", \"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\"))\n\n\ndygraph(window(gdp.retsum4.ts[,c(\"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\")], start=c(2018,3) ), main = \"GDP by Demand Variables\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(0))\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP by Demand Variables\",\"labels\":[\"quarter\",\"GDP\",\"C\",\"G\",\"FBKF\",\"X\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":0,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[1.6,1.3,1.1,1.1,1,1.1,0.9,-2.2],[2.6,2.1,1.6,1.6,1.7,1.8,1.3,-2.5],[0.7,0.4,0.2,-0.1,-0.8,-0.4,-0.4,-2.4],[4.1,3.9,3.6,4.3,3,2.2,3,-2.1],[3.1,4,2.4,3.4,1.6,-2.5,-2.7,-2.8],[9.6,8.3,5.7,5.3,2.4,1.1,2.9,-1.8]]},\"evals\":[],\"jsHooks\":[]}\nGDP GROWTH TABLES\nT/T-1 (With Seasonal Adjustment)\n\n\npaged_table(gdp.table(gdp.ret1, type=\"ret1\", digits=1 ), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.4\",\"2\":\"0.5\",\"3\":\"-0.7\",\"4\":\"1.1\",\"5\":\"1.1\",\"6\":\"-1.0\",\"7\":\"0.5\",\"8\":\"1.0\",\"9\":\"0.5\",\"10\":\"3.5\",\"11\":\"-0.3\",\"12\":\"-2.7\",\"13\":\"-3.3\",\"14\":\"13.3\",\"15\":\"4.0\",\"16\":\"1.6\",\"17\":\"0.0\",\"18\":\"-6.4\",\"19\":\"1.4\",\"20\":\"-0.7\",\"21\":\"-2.9\",\"22\":\"2.8\",\"23\":\"2.1\",\"24\":\"2.2\",\"25\":\"-1.6\",\"26\":\"1.0\",\"27\":\"0.9\",\"28\":\"-0.3\",\"29\":\"3.5\",\"30\":\"1.0\",\"31\":\"-5.5\",\"32\":\"11.3\",\"33\":\"12.6\",\"34\":\"-19.5\",\"35\":\"4.6\",\"36\":\"5.2\",\"37\":\"-0.9\",\"38\":\"2.4\",\"39\":\"1.6\",\"40\":\"-2.2\",\"41\":\"2.4\",\"42\":\"1.9\",\"43\":\"4.2\",\"44\":\"1.0\",\"45\":\"-1.1\",\"46\":\"-2.7\",\"47\":\"-4.0\",\"48\":\"1.9\",\"49\":\"3.2\",\"50\":\"-0.1\",\"51\":\"0.0\",\"52\":\"7.6\",\"53\":\"-2.1\",\"54\":\"-1.6\",\"55\":\"0.5\",\"56\":\"4.3\",\"57\":\"1.1\",\"58\":\"3.4\",\"59\":\"0.9\",\"60\":\"-4.7\",\"61\":\"1.3\",\"62\":\"2.5\",\"63\":\"-1.2\",\"64\":\"0.0\",\"65\":\"1.7\",\"66\":\"1.2\",\"67\":\"1.7\",\"68\":\"-2.9\",\"69\":\"0.0\",\"70\":\"2.3\",\"71\":\"2.9\",\"72\":\"7.0\",\"73\":\"2.4\",\"74\":\"-2.9\",\"75\":\"5.2\",\"76\":\"2.3\",\"77\":\"0.2\",\"78\":\"3.1\",\"79\":\"0.6\",\"80\":\"-0.9\",\"81\":\"-0.4\",\"82\":\"-0.6\",\"83\":\"3.9\",\"84\":\"0.5\",\"85\":\"1.8\",\"86\":\"4.0\",\"87\":\"-1.9\",\"88\":\"-2.7\",\"89\":\"12.7\",\"90\":\"-11.3\",\"91\":\"8.9\",\"92\":\"3.2\",\"93\":\"-1.3\",\"94\":\"-19.4\",\"95\":\"24.1\",\"96\":\"5.3\",\"97\":\"1.6\",\"98\":\"NA\",\"_rn_\":\"AGR\"},{\"1\":\"-12.3\",\"2\":\"-0.8\",\"3\":\"0.1\",\"4\":\"0.5\",\"5\":\"0.7\",\"6\":\"0.1\",\"7\":\"-0.9\",\"8\":\"0.4\",\"9\":\"0.1\",\"10\":\"-0.8\",\"11\":\"1.0\",\"12\":\"0.5\",\"13\":\"0.4\",\"14\":\"0.5\",\"15\":\"-1.3\",\"16\":\"-1.7\",\"17\":\"-0.3\",\"18\":\"0.2\",\"19\":\"-1.9\",\"20\":\"-1.9\",\"21\":\"-3.3\",\"22\":\"-1.6\",\"23\":\"0.6\",\"24\":\"-0.3\",\"25\":\"-2.9\",\"26\":\"0.5\",\"27\":\"-0.9\",\"28\":\"0.0\",\"29\":\"3.9\",\"30\":\"0.0\",\"31\":\"-1.4\",\"32\":\"2.2\",\"33\":\"-2.9\",\"34\":\"0.5\",\"35\":\"0.1\",\"36\":\"-0.9\",\"37\":\"2.8\",\"38\":\"0.6\",\"39\":\"1.5\",\"40\":\"0.2\",\"41\":\"2.8\",\"42\":\"1.2\",\"43\":\"4.1\",\"44\":\"4.1\",\"45\":\"4.1\",\"46\":\"-5.9\",\"47\":\"-7.8\",\"48\":\"2.0\",\"49\":\"0.9\",\"50\":\"3.1\",\"51\":\"0.4\",\"52\":\"0.6\",\"53\":\"3.5\",\"54\":\"0.1\",\"55\":\"2.9\",\"56\":\"1.9\",\"57\":\"-1.2\",\"58\":\"0.6\",\"59\":\"1.9\",\"60\":\"-3.1\",\"61\":\"3.3\",\"62\":\"-1.2\",\"63\":\"-0.1\",\"64\":\"3.3\",\"65\":\"1.5\",\"66\":\"2.8\",\"67\":\"1.3\",\"68\":\"3.2\",\"69\":\"0.4\",\"70\":\"-4.7\",\"71\":\"3.2\",\"72\":\"-0.3\",\"73\":\"2.4\",\"74\":\"3.6\",\"75\":\"-0.5\",\"76\":\"-2.6\",\"77\":\"-1.7\",\"78\":\"-0.2\",\"79\":\"1.7\",\"80\":\"1.0\",\"81\":\"-0.1\",\"82\":\"2.4\",\"83\":\"2.0\",\"84\":\"-0.2\",\"85\":\"0.5\",\"86\":\"-0.7\",\"87\":\"-3.1\",\"88\":\"-1.1\",\"89\":\"0.8\",\"90\":\"-2.0\",\"91\":\"-0.4\",\"92\":\"1.4\",\"93\":\"0.9\",\"94\":\"4.4\",\"95\":\"-6.1\",\"96\":\"9.2\",\"97\":\"-4.6\",\"98\":\"NA\",\"_rn_\":\"IND\"},{\"1\":\"-9.7\",\"2\":\"-2.2\",\"3\":\"0.6\",\"4\":\"0.1\",\"5\":\"0.0\",\"6\":\"0.9\",\"7\":\"-0.2\",\"8\":\"0.5\",\"9\":\"0.1\",\"10\":\"0.4\",\"11\":\"0.2\",\"12\":\"0.5\",\"13\":\"1.0\",\"14\":\"0.5\",\"15\":\"-0.4\",\"16\":\"-0.6\",\"17\":\"0.4\",\"18\":\"-1.0\",\"19\":\"-0.5\",\"20\":\"-1.1\",\"21\":\"-1.9\",\"22\":\"-0.6\",\"23\":\"0.1\",\"24\":\"0.2\",\"25\":\"-0.9\",\"26\":\"0.8\",\"27\":\"0.3\",\"28\":\"0.5\",\"29\":\"1.2\",\"30\":\"0.4\",\"31\":\"0.5\",\"32\":\"1.0\",\"33\":\"2.0\",\"34\":\"-0.1\",\"35\":\"0.5\",\"36\":\"0.0\",\"37\":\"0.5\",\"38\":\"1.2\",\"39\":\"1.0\",\"40\":\"1.5\",\"41\":\"0.8\",\"42\":\"1.8\",\"43\":\"1.4\",\"44\":\"1.8\",\"45\":\"1.0\",\"46\":\"0.8\",\"47\":\"-2.2\",\"48\":\"1.1\",\"49\":\"2.5\",\"50\":\"0.9\",\"51\":\"1.5\",\"52\":\"0.9\",\"53\":\"0.9\",\"54\":\"2.8\",\"55\":\"0.8\",\"56\":\"1.4\",\"57\":\"0.5\",\"58\":\"1.9\",\"59\":\"0.8\",\"60\":\"0.5\",\"61\":\"1.0\",\"62\":\"0.4\",\"63\":\"1.7\",\"64\":\"0.9\",\"65\":\"2.5\",\"66\":\"0.8\",\"67\":\"1.0\",\"68\":\"0.9\",\"69\":\"-0.8\",\"70\":\"-0.2\",\"71\":\"0.6\",\"72\":\"1.1\",\"73\":\"0.2\",\"74\":\"1.8\",\"75\":\"0.2\",\"76\":\"0.1\",\"77\":\"1.0\",\"78\":\"-0.5\",\"79\":\"1.2\",\"80\":\"1.4\",\"81\":\"1.2\",\"82\":\"1.0\",\"83\":\"1.0\",\"84\":\"0.0\",\"85\":\"-0.2\",\"86\":\"1.2\",\"87\":\"0.0\",\"88\":\"0.6\",\"89\":\"0.9\",\"90\":\"-0.8\",\"91\":\"1.2\",\"92\":\"0.6\",\"93\":\"0.4\",\"94\":\"2.4\",\"95\":\"-2.1\",\"96\":\"1.5\",\"97\":\"1.2\",\"98\":\"NA\",\"_rn_\":\"SER\"},{\"1\":\"-9.3\",\"2\":\"-2.4\",\"3\":\"0.6\",\"4\":\"0.3\",\"5\":\"0.1\",\"6\":\"0.6\",\"7\":\"-0.3\",\"8\":\"0.6\",\"9\":\"0.2\",\"10\":\"0.4\",\"11\":\"0.3\",\"12\":\"0.1\",\"13\":\"0.4\",\"14\":\"1.4\",\"15\":\"-0.1\",\"16\":\"-0.7\",\"17\":\"0.7\",\"18\":\"-1.6\",\"19\":\"-0.6\",\"20\":\"-1.3\",\"21\":\"-2.5\",\"22\":\"-0.5\",\"23\":\"0.4\",\"24\":\"0.0\",\"25\":\"-1.7\",\"26\":\"0.9\",\"27\":\"0.2\",\"28\":\"0.2\",\"29\":\"1.8\",\"30\":\"0.5\",\"31\":\"-0.2\",\"32\":\"1.8\",\"33\":\"1.5\",\"34\":\"-1.5\",\"35\":\"0.9\",\"36\":\"-0.1\",\"37\":\"0.7\",\"38\":\"1.5\",\"39\":\"1.4\",\"40\":\"0.8\",\"41\":\"1.0\",\"42\":\"2.1\",\"43\":\"2.4\",\"44\":\"2.2\",\"45\":\"1.4\",\"46\":\"-0.9\",\"47\":\"-3.6\",\"48\":\"1.2\",\"49\":\"2.2\",\"50\":\"1.1\",\"51\":\"1.2\",\"52\":\"1.2\",\"53\":\"1.2\",\"54\":\"1.9\",\"55\":\"1.5\",\"56\":\"1.7\",\"57\":\"-0.1\",\"58\":\"1.9\",\"59\":\"1.1\",\"60\":\"-1.1\",\"61\":\"1.4\",\"62\":\"0.8\",\"63\":\"0.8\",\"64\":\"1.2\",\"65\":\"2.6\",\"66\":\"1.5\",\"67\":\"0.8\",\"68\":\"1.1\",\"69\":\"-0.7\",\"70\":\"-0.6\",\"71\":\"1.2\",\"72\":\"1.2\",\"73\":\"0.6\",\"74\":\"2.3\",\"75\":\"0.0\",\"76\":\"-0.3\",\"77\":\"0.0\",\"78\":\"-0.1\",\"79\":\"1.3\",\"80\":\"1.3\",\"81\":\"1.2\",\"82\":\"1.0\",\"83\":\"1.2\",\"84\":\"0.0\",\"85\":\"0.1\",\"86\":\"1.0\",\"87\":\"-1.0\",\"88\":\"0.0\",\"89\":\"1.7\",\"90\":\"-1.7\",\"91\":\"0.9\",\"92\":\"1.0\",\"93\":\"0.7\",\"94\":\"1.8\",\"95\":\"-2.4\",\"96\":\"3.8\",\"97\":\"0.7\",\"98\":\"NA\",\"_rn_\":\"VAB\"},{\"1\":\"-9.7\",\"2\":\"-2.5\",\"3\":\"0.5\",\"4\":\"0.1\",\"5\":\"0.5\",\"6\":\"0.6\",\"7\":\"-0.4\",\"8\":\"0.8\",\"9\":\"-0.2\",\"10\":\"0.6\",\"11\":\"0.3\",\"12\":\"0.1\",\"13\":\"0.8\",\"14\":\"1.2\",\"15\":\"-0.1\",\"16\":\"-0.6\",\"17\":\"0.4\",\"18\":\"-1.5\",\"19\":\"-0.8\",\"20\":\"-1.6\",\"21\":\"-2.4\",\"22\":\"-0.7\",\"23\":\"0.5\",\"24\":\"0.0\",\"25\":\"-1.5\",\"26\":\"0.9\",\"27\":\"0.1\",\"28\":\"0.4\",\"29\":\"1.5\",\"30\":\"0.5\",\"31\":\"0.0\",\"32\":\"1.8\",\"33\":\"1.8\",\"34\":\"-1.4\",\"35\":\"0.9\",\"36\":\"-0.2\",\"37\":\"0.9\",\"38\":\"1.4\",\"39\":\"1.4\",\"40\":\"0.9\",\"41\":\"1.2\",\"42\":\"2.1\",\"43\":\"2.6\",\"44\":\"2.3\",\"45\":\"1.8\",\"46\":\"-1.4\",\"47\":\"-3.8\",\"48\":\"1.5\",\"49\":\"2.1\",\"50\":\"1.2\",\"51\":\"1.5\",\"52\":\"1.0\",\"53\":\"1.7\",\"54\":\"1.9\",\"55\":\"1.2\",\"56\":\"1.7\",\"57\":\"0.3\",\"58\":\"1.6\",\"59\":\"1.3\",\"60\":\"-0.7\",\"61\":\"1.2\",\"62\":\"0.8\",\"63\":\"0.8\",\"64\":\"1.2\",\"65\":\"2.8\",\"66\":\"1.4\",\"67\":\"1.0\",\"68\":\"0.9\",\"69\":\"-0.9\",\"70\":\"-0.4\",\"71\":\"1.0\",\"72\":\"1.3\",\"73\":\"0.4\",\"74\":\"2.4\",\"75\":\"-0.3\",\"76\":\"-0.5\",\"77\":\"-0.5\",\"78\":\"0.3\",\"79\":\"1.2\",\"80\":\"1.2\",\"81\":\"1.4\",\"82\":\"1.1\",\"83\":\"1.4\",\"84\":\"0.0\",\"85\":\"0.5\",\"86\":\"0.2\",\"87\":\"-1.1\",\"88\":\"0.1\",\"89\":\"1.6\",\"90\":\"-1.9\",\"91\":\"0.8\",\"92\":\"1.3\",\"93\":\"0.5\",\"94\":\"1.0\",\"95\":\"-1.0\",\"96\":\"3.8\",\"97\":\"1.0\",\"98\":\"NA\",\"_rn_\":\"GDP\"},{\"1\":\"-12.5\",\"2\":\"-1.9\",\"3\":\"0.4\",\"4\":\"0.5\",\"5\":\"0.3\",\"6\":\"0.8\",\"7\":\"0.2\",\"8\":\"0.5\",\"9\":\"0.0\",\"10\":\"0.6\",\"11\":\"0.4\",\"12\":\"0.9\",\"13\":\"1.6\",\"14\":\"0.7\",\"15\":\"-0.2\",\"16\":\"-0.3\",\"17\":\"-0.6\",\"18\":\"-1.3\",\"19\":\"-0.7\",\"20\":\"-1.8\",\"21\":\"-1.9\",\"22\":\"-1.7\",\"23\":\"1.5\",\"24\":\"0.1\",\"25\":\"-0.5\",\"26\":\"1.6\",\"27\":\"-0.1\",\"28\":\"0.7\",\"29\":\"1.3\",\"30\":\"0.5\",\"31\":\"1.1\",\"32\":\"1.3\",\"33\":\"0.8\",\"34\":\"1.4\",\"35\":\"0.5\",\"36\":\"-0.4\",\"37\":\"1.3\",\"38\":\"0.9\",\"39\":\"2.1\",\"40\":\"2.2\",\"41\":\"1.0\",\"42\":\"1.4\",\"43\":\"0.7\",\"44\":\"2.3\",\"45\":\"2.9\",\"46\":\"0.9\",\"47\":\"-1.6\",\"48\":\"1.9\",\"49\":\"1.1\",\"50\":\"2.2\",\"51\":\"2.9\",\"52\":\"0.6\",\"53\":\"1.3\",\"54\":\"2.2\",\"55\":\"1.4\",\"56\":\"1.0\",\"57\":\"1.6\",\"58\":\"1.1\",\"59\":\"1.4\",\"60\":\"1.6\",\"61\":\"0.8\",\"62\":\"-0.5\",\"63\":\"2.5\",\"64\":\"1.9\",\"65\":\"1.3\",\"66\":\"0.7\",\"67\":\"0.9\",\"68\":\"0.2\",\"69\":\"-0.9\",\"70\":\"0.5\",\"71\":\"-0.4\",\"72\":\"-1.2\",\"73\":\"1.1\",\"74\":\"2.1\",\"75\":\"0.8\",\"76\":\"-3.2\",\"77\":\"0.5\",\"78\":\"0.1\",\"79\":\"1.0\",\"80\":\"1.5\",\"81\":\"1.3\",\"82\":\"0.2\",\"83\":\"1.8\",\"84\":\"0.8\",\"85\":\"0.1\",\"86\":\"0.4\",\"87\":\"-1.3\",\"88\":\"0.2\",\"89\":\"-0.3\",\"90\":\"0.1\",\"91\":\"0.2\",\"92\":\"-1.1\",\"93\":\"0.3\",\"94\":\"-2.3\",\"95\":\"5.3\",\"96\":\"2.7\",\"97\":\"2.1\",\"98\":\"NA\",\"_rn_\":\"C\"},{\"1\":\"-8.8\",\"2\":\"0.2\",\"3\":\"0.4\",\"4\":\"-0.4\",\"5\":\"-0.3\",\"6\":\"0.6\",\"7\":\"-1.3\",\"8\":\"0.3\",\"9\":\"0.4\",\"10\":\"-0.4\",\"11\":\"0.9\",\"12\":\"-0.2\",\"13\":\"0.3\",\"14\":\"-0.6\",\"15\":\"-0.3\",\"16\":\"-0.3\",\"17\":\"-0.2\",\"18\":\"1.4\",\"19\":\"-0.9\",\"20\":\"0.2\",\"21\":\"-0.8\",\"22\":\"-0.5\",\"23\":\"-0.8\",\"24\":\"0.4\",\"25\":\"0.6\",\"26\":\"-1.2\",\"27\":\"1.1\",\"28\":\"0.7\",\"29\":\"1.6\",\"30\":\"-0.9\",\"31\":\"0.9\",\"32\":\"-0.5\",\"33\":\"0.6\",\"34\":\"2.0\",\"35\":\"-0.2\",\"36\":\"-0.4\",\"37\":\"1.0\",\"38\":\"0.8\",\"39\":\"0.4\",\"40\":\"1.0\",\"41\":\"0.6\",\"42\":\"0.8\",\"43\":\"2.4\",\"44\":\"1.1\",\"45\":\"-1.2\",\"46\":\"3.9\",\"47\":\"-3.4\",\"48\":\"2.9\",\"49\":\"-0.1\",\"50\":\"1.6\",\"51\":\"-0.5\",\"52\":\"-0.5\",\"53\":\"2.4\",\"54\":\"-0.7\",\"55\":\"3.7\",\"56\":\"1.2\",\"57\":\"0.0\",\"58\":\"1.3\",\"59\":\"0.0\",\"60\":\"1.0\",\"61\":\"0.6\",\"62\":\"0.5\",\"63\":\"-0.4\",\"64\":\"-0.1\",\"65\":\"3.7\",\"66\":\"-1.9\",\"67\":\"2.6\",\"68\":\"2.0\",\"69\":\"1.1\",\"70\":\"-0.9\",\"71\":\"-0.1\",\"72\":\"0.2\",\"73\":\"0.1\",\"74\":\"2.6\",\"75\":\"1.2\",\"76\":\"0.0\",\"77\":\"0.3\",\"78\":\"2.1\",\"79\":\"1.1\",\"80\":\"-1.4\",\"81\":\"-0.9\",\"82\":\"-1.8\",\"83\":\"1.9\",\"84\":\"2.1\",\"85\":\"1.1\",\"86\":\"-1.2\",\"87\":\"-0.7\",\"88\":\"1.7\",\"89\":\"0.7\",\"90\":\"2.4\",\"91\":\"0.7\",\"92\":\"-1.6\",\"93\":\"-0.4\",\"94\":\"13.2\",\"95\":\"-15.0\",\"96\":\"3.5\",\"97\":\"1.6\",\"98\":\"NA\",\"_rn_\":\"G\"},{\"1\":\"-15.4\",\"2\":\"2.3\",\"3\":\"-3.5\",\"4\":\"1.5\",\"5\":\"2.9\",\"6\":\"-1.0\",\"7\":\"-1.5\",\"8\":\"5.1\",\"9\":\"-0.6\",\"10\":\"-0.5\",\"11\":\"3.1\",\"12\":\"0.6\",\"13\":\"-0.4\",\"14\":\"0.3\",\"15\":\"-1.3\",\"16\":\"-5.9\",\"17\":\"3.0\",\"18\":\"-2.7\",\"19\":\"-5.5\",\"20\":\"-5.5\",\"21\":\"-7.7\",\"22\":\"-2.3\",\"23\":\"-0.3\",\"24\":\"-2.2\",\"25\":\"-5.2\",\"26\":\"1.1\",\"27\":\"-1.1\",\"28\":\"-1.2\",\"29\":\"5.2\",\"30\":\"1.8\",\"31\":\"1.2\",\"32\":\"0.0\",\"33\":\"0.9\",\"34\":\"-1.8\",\"35\":\"0.3\",\"36\":\"1.6\",\"37\":\"1.4\",\"38\":\"2.8\",\"39\":\"0.1\",\"40\":\"3.5\",\"41\":\"1.5\",\"42\":\"2.6\",\"43\":\"7.0\",\"44\":\"10.2\",\"45\":\"6.8\",\"46\":\"-10.5\",\"47\":\"-8.8\",\"48\":\"5.4\",\"49\":\"6.7\",\"50\":\"2.6\",\"51\":\"1.5\",\"52\":\"2.6\",\"53\":\"4.4\",\"54\":\"3.6\",\"55\":\"2.7\",\"56\":\"1.4\",\"57\":\"-0.3\",\"58\":\"4.4\",\"59\":\"0.5\",\"60\":\"-0.8\",\"61\":\"4.4\",\"62\":\"-1.1\",\"63\":\"-1.8\",\"64\":\"1.8\",\"65\":\"4.2\",\"66\":\"2.7\",\"67\":\"4.4\",\"68\":\"0.5\",\"69\":\"-7.5\",\"70\":\"-2.2\",\"71\":\"2.1\",\"72\":\"1.4\",\"73\":\"1.8\",\"74\":\"1.9\",\"75\":\"-6.1\",\"76\":\"-1.1\",\"77\":\"-2.4\",\"78\":\"1.2\",\"79\":\"3.6\",\"80\":\"0.3\",\"81\":\"5.0\",\"82\":\"0.0\",\"83\":\"2.0\",\"84\":\"-2.5\",\"85\":\"-1.5\",\"86\":\"-3.1\",\"87\":\"-4.6\",\"88\":\"-1.4\",\"89\":\"0.1\",\"90\":\"0.9\",\"91\":\"-0.7\",\"92\":\"1.9\",\"93\":\"1.2\",\"94\":\"1.1\",\"95\":\"4.2\",\"96\":\"3.8\",\"97\":\"3.1\",\"98\":\"NA\",\"_rn_\":\"FBKF\"},{\"1\":\"1.8\",\"2\":\"-1.3\",\"3\":\"2.3\",\"4\":\"-2.2\",\"5\":\"-2.6\",\"6\":\"-3.6\",\"7\":\"2.0\",\"8\":\"6.2\",\"9\":\"-3.2\",\"10\":\"3.1\",\"11\":\"-3.3\",\"12\":\"1.9\",\"13\":\"2.8\",\"14\":\"6.2\",\"15\":\"-0.9\",\"16\":\"-4.8\",\"17\":\"0.2\",\"18\":\"-0.1\",\"19\":\"3.7\",\"20\":\"-0.7\",\"21\":\"3.8\",\"22\":\"6.7\",\"23\":\"-6.8\",\"24\":\"4.8\",\"25\":\"-1.7\",\"26\":\"-5.2\",\"27\":\"6.8\",\"28\":\"-1.7\",\"29\":\"2.3\",\"30\":\"-2.8\",\"31\":\"2.7\",\"32\":\"2.3\",\"33\":\"-3.2\",\"34\":\"-1.2\",\"35\":\"1.1\",\"36\":\"1.9\",\"37\":\"0.8\",\"38\":\"1.9\",\"39\":\"0.8\",\"40\":\"3.0\",\"41\":\"-1.8\",\"42\":\"10.9\",\"43\":\"0.7\",\"44\":\"-1.7\",\"45\":\"2.8\",\"46\":\"-5.5\",\"47\":\"-5.9\",\"48\":\"-2.2\",\"49\":\"3.9\",\"50\":\"-1.5\",\"51\":\"0.3\",\"52\":\"2.2\",\"53\":\"-1.5\",\"54\":\"2.5\",\"55\":\"-2.7\",\"56\":\"13.9\",\"57\":\"-6.1\",\"58\":\"0.9\",\"59\":\"2.1\",\"60\":\"1.3\",\"61\":\"1.4\",\"62\":\"4.9\",\"63\":\"2.8\",\"64\":\"1.8\",\"65\":\"3.5\",\"66\":\"4.9\",\"67\":\"3.4\",\"68\":\"1.1\",\"69\":\"2.7\",\"70\":\"-2.4\",\"71\":\"0.4\",\"72\":\"26.8\",\"73\":\"-8.2\",\"74\":\"2.3\",\"75\":\"-2.1\",\"76\":\"-2.8\",\"77\":\"4.2\",\"78\":\"3.6\",\"79\":\"-2.0\",\"80\":\"8.5\",\"81\":\"2.0\",\"82\":\"-2.4\",\"83\":\"16.0\",\"84\":\"-1.6\",\"85\":\"2.0\",\"86\":\"2.0\",\"87\":\"0.4\",\"88\":\"-3.8\",\"89\":\"2.5\",\"90\":\"5.0\",\"91\":\"-3.9\",\"92\":\"2.8\",\"93\":\"5.8\",\"94\":\"4.7\",\"95\":\"5.0\",\"96\":\"-0.3\",\"97\":\"-2.4\",\"98\":\"NA\",\"_rn_\":\"X\"},{\"1\":\"-13.2\",\"2\":\"0.8\",\"3\":\"-2.6\",\"4\":\"0.2\",\"5\":\"4.8\",\"6\":\"-2.1\",\"7\":\"-3.4\",\"8\":\"6.6\",\"9\":\"-1.0\",\"10\":\"0.9\",\"11\":\"6.3\",\"12\":\"0.9\",\"13\":\"-0.4\",\"14\":\"3.1\",\"15\":\"5.1\",\"16\":\"-7.7\",\"17\":\"10.4\",\"18\":\"-5.1\",\"19\":\"-4.6\",\"20\":\"-9.6\",\"21\":\"-6.3\",\"22\":\"-0.6\",\"23\":\"-5.7\",\"24\":\"2.3\",\"25\":\"-1.9\",\"26\":\"0.1\",\"27\":\"-0.1\",\"28\":\"-2.0\",\"29\":\"1.3\",\"30\":\"3.5\",\"31\":\"5.8\",\"32\":\"-3.7\",\"33\":\"2.7\",\"34\":\"-4.9\",\"35\":\"3.3\",\"36\":\"1.6\",\"37\":\"4.6\",\"38\":\"-0.4\",\"39\":\"0.7\",\"40\":\"8.5\",\"41\":\"2.6\",\"42\":\"10.6\",\"43\":\"12.6\",\"44\":\"6.0\",\"45\":\"5.6\",\"46\":\"-15.9\",\"47\":\"-5.6\",\"48\":\"3.9\",\"49\":\"7.9\",\"50\":\"2.1\",\"51\":\"3.8\",\"52\":\"8.1\",\"53\":\"1.5\",\"54\":\"4.4\",\"55\":\"3.8\",\"56\":\"7.1\",\"57\":\"3.0\",\"58\":\"6.9\",\"59\":\"4.2\",\"60\":\"-1.1\",\"61\":\"2.0\",\"62\":\"2.5\",\"63\":\"4.0\",\"64\":\"0.0\",\"65\":\"3.8\",\"66\":\"-1.5\",\"67\":\"10.6\",\"68\":\"-0.4\",\"69\":\"-0.8\",\"70\":\"1.8\",\"71\":\"-4.1\",\"72\":\"-0.9\",\"73\":\"-2.5\",\"74\":\"-1.1\",\"75\":\"-6.1\",\"76\":\"-8.1\",\"77\":\"-3.6\",\"78\":\"3.7\",\"79\":\"3.5\",\"80\":\"8.9\",\"81\":\"4.5\",\"82\":\"-0.8\",\"83\":\"7.0\",\"84\":\"-3.5\",\"85\":\"-1.3\",\"86\":\"-9.6\",\"87\":\"-5.7\",\"88\":\"0.9\",\"89\":\"-5.5\",\"90\":\"9.2\",\"91\":\"-6.0\",\"92\":\"0.6\",\"93\":\"4.1\",\"94\":\"-0.1\",\"95\":\"10.9\",\"96\":\"7.3\",\"97\":\"9.2\",\"98\":\"NA\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nT/T-4\n\n\npaged_table(gdp.table(gdp.ret4, type=\"ret4\", digits=1), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1.2\",\"2\":\"1.9\",\"3\":\"0.4\",\"4\":\"2.1\",\"5\":\"1.4\",\"6\":\"0.9\",\"7\":\"5.1\",\"8\":\"4.9\",\"9\":\"0.8\",\"10\":\"-2.7\",\"11\":\"5.6\",\"12\":\"10.4\",\"13\":\"16.1\",\"14\":\"20.4\",\"15\":\"-1.9\",\"16\":\"-4.4\",\"17\":\"-5.3\",\"18\":\"-7.6\",\"19\":\"0.0\",\"20\":\"-0.2\",\"21\":\"4.5\",\"22\":\"7.1\",\"23\":\"2.8\",\"24\":\"1.1\",\"25\":\"0.2\",\"26\":\"6.9\",\"27\":\"4.2\",\"28\":\"-2.7\",\"29\":\"10.2\",\"30\":\"21.5\",\"31\":\"-5.9\",\"32\":\"4.7\",\"33\":\"-0.2\",\"34\":\"-11.2\",\"35\":\"10.9\",\"36\":\"7.7\",\"37\":\"0.7\",\"38\":\"5.4\",\"39\":\"3.1\",\"40\":\"5.5\",\"41\":\"10.1\",\"42\":\"6.9\",\"43\":\"1.1\",\"44\":\"-7.5\",\"45\":\"-5.5\",\"46\":\"-1.4\",\"47\":\"0.8\",\"48\":\"5.0\",\"49\":\"11.1\",\"50\":\"4.8\",\"51\":\"4.2\",\"52\":\"4.7\",\"53\":\"0.6\",\"54\":\"3.9\",\"55\":\"10.3\",\"56\":\"11.1\",\"57\":\"-0.3\",\"58\":\"0.5\",\"59\":\"0.4\",\"60\":\"-2.0\",\"61\":\"2.4\",\"62\":\"3.2\",\"63\":\"1.5\",\"64\":\"4.6\",\"65\":\"2.0\",\"66\":\"0.0\",\"67\":\"0.8\",\"68\":\"1.5\",\"69\":\"13.4\",\"70\":\"15.4\",\"71\":\"8.8\",\"72\":\"11.7\",\"73\":\"7.3\",\"74\":\"4.7\",\"75\":\"11.1\",\"76\":\"6.0\",\"77\":\"3.0\",\"78\":\"2.9\",\"79\":\"-1.6\",\"80\":\"1.5\",\"81\":\"3.4\",\"82\":\"6.2\",\"83\":\"10.3\",\"84\":\"3.5\",\"85\":\"1.6\",\"86\":\"12.6\",\"87\":\"-5.3\",\"88\":\"5.2\",\"89\":\"13.1\",\"90\":\"-1.4\",\"91\":\"-11.0\",\"92\":\"1.5\",\"93\":\"4.4\",\"94\":\"7.0\",\"95\":\"8.9\",\"96\":\"-0.6\",\"97\":\"2.2\",\"98\":\"2.6\",\"_rn_\":\"AGR\"},{\"1\":\"-12.7\",\"2\":\"-0.1\",\"3\":\"1.5\",\"4\":\"1.0\",\"5\":\"0.3\",\"6\":\"-1.0\",\"7\":\"-0.5\",\"8\":\"0.8\",\"9\":\"0.9\",\"10\":\"1.0\",\"11\":\"2.4\",\"12\":\"-0.4\",\"13\":\"-2.2\",\"14\":\"-1.9\",\"15\":\"-3.5\",\"16\":\"-3.4\",\"17\":\"-3.9\",\"18\":\"-7.4\",\"19\":\"-8.3\",\"20\":\"-5.8\",\"21\":\"-4.8\",\"22\":\"-4.1\",\"23\":\"-2.3\",\"24\":\"-3.6\",\"25\":\"-3.5\",\"26\":\"3.9\",\"27\":\"2.6\",\"28\":\"2.9\",\"29\":\"4.4\",\"30\":\"-1.4\",\"31\":\"-1.4\",\"32\":\"-0.5\",\"33\":\"-3.2\",\"34\":\"2.4\",\"35\":\"1.8\",\"36\":\"4.0\",\"37\":\"5.1\",\"38\":\"5.7\",\"39\":\"5.4\",\"40\":\"8.3\",\"41\":\"13.0\",\"42\":\"15.3\",\"43\":\"5.7\",\"44\":\"-5.8\",\"45\":\"-8.0\",\"46\":\"-10.8\",\"47\":\"-2.3\",\"48\":\"6.8\",\"49\":\"5.2\",\"50\":\"7.1\",\"51\":\"5.0\",\"52\":\"7.0\",\"53\":\"8.7\",\"54\":\"4.1\",\"55\":\"4.1\",\"56\":\"2.5\",\"57\":\"-1.9\",\"58\":\"3.3\",\"59\":\"0.2\",\"60\":\"-1.1\",\"61\":\"5.2\",\"62\":\"4.2\",\"63\":\"7.7\",\"64\":\"8.8\",\"65\":\"8.9\",\"66\":\"7.4\",\"67\":\"0.3\",\"68\":\"1.9\",\"69\":\"-2.0\",\"70\":\"0.1\",\"71\":\"9.2\",\"72\":\"5.7\",\"73\":\"2.3\",\"74\":\"-2.3\",\"75\":\"-3.9\",\"76\":\"-2.6\",\"77\":\"0.4\",\"78\":\"4.1\",\"79\":\"4.7\",\"80\":\"4.4\",\"81\":\"3.9\",\"82\":\"4.6\",\"83\":\"1.8\",\"84\":\"-3.5\",\"85\":\"-4.4\",\"86\":\"-4.2\",\"87\":\"-5.2\",\"88\":\"-2.7\",\"89\":\"-0.3\",\"90\":\"0.1\",\"91\":\"6.4\",\"92\":\"0.2\",\"93\":\"8.0\",\"94\":\"3.3\",\"95\":\"1.5\",\"96\":\"11.3\",\"97\":\"-3.0\",\"98\":\"-6.0\",\"_rn_\":\"IND\"},{\"1\":\"-11.2\",\"2\":\"-0.5\",\"3\":\"1.6\",\"4\":\"1.0\",\"5\":\"1.2\",\"6\":\"1.2\",\"7\":\"1.1\",\"8\":\"1.4\",\"9\":\"1.3\",\"10\":\"2.1\",\"11\":\"2.2\",\"12\":\"1.5\",\"13\":\"0.4\",\"14\":\"-1.1\",\"15\":\"-1.8\",\"16\":\"-1.6\",\"17\":\"-2.2\",\"18\":\"-3.2\",\"19\":\"-4.1\",\"20\":\"-3.4\",\"21\":\"-2.2\",\"22\":\"-1.2\",\"23\":\"0.2\",\"24\":\"0.4\",\"25\":\"0.7\",\"26\":\"2.8\",\"27\":\"2.4\",\"28\":\"2.7\",\"29\":\"3.1\",\"30\":\"2.8\",\"31\":\"3.7\",\"32\":\"3.3\",\"33\":\"2.4\",\"34\":\"2.2\",\"35\":\"2.1\",\"36\":\"2.8\",\"37\":\"4.3\",\"38\":\"4.7\",\"39\":\"5.3\",\"40\":\"5.7\",\"41\":\"6.0\",\"42\":\"6.2\",\"43\":\"5.1\",\"44\":\"1.4\",\"45\":\"0.7\",\"46\":\"1.0\",\"47\":\"2.1\",\"48\":\"6.2\",\"49\":\"5.8\",\"50\":\"5.3\",\"51\":\"6.3\",\"52\":\"5.4\",\"53\":\"6.0\",\"54\":\"5.7\",\"55\":\"4.5\",\"56\":\"4.4\",\"57\":\"3.9\",\"58\":\"4.6\",\"59\":\"2.5\",\"60\":\"3.5\",\"61\":\"4.2\",\"62\":\"4.5\",\"63\":\"5.8\",\"64\":\"5.2\",\"65\":\"5.6\",\"66\":\"3.3\",\"67\":\"0.8\",\"68\":\"0.5\",\"69\":\"0.9\",\"70\":\"1.8\",\"71\":\"3.6\",\"72\":\"3.4\",\"73\":\"2.5\",\"74\":\"2.9\",\"75\":\"1.0\",\"76\":\"1.7\",\"77\":\"3.2\",\"78\":\"2.4\",\"79\":\"4.5\",\"80\":\"4.3\",\"81\":\"3.3\",\"82\":\"3.1\",\"83\":\"2.0\",\"84\":\"0.9\",\"85\":\"1.7\",\"86\":\"2.8\",\"87\":\"0.7\",\"88\":\"1.8\",\"89\":\"1.9\",\"90\":\"1.4\",\"91\":\"4.7\",\"92\":\"1.3\",\"93\":\"2.2\",\"94\":\"1.9\",\"95\":\"-0.3\",\"96\":\"3.2\",\"97\":\"3.7\",\"98\":\"2.7\",\"_rn_\":\"SER\"},{\"1\":\"-10.8\",\"2\":\"-0.2\",\"3\":\"1.6\",\"4\":\"1.1\",\"5\":\"1.0\",\"6\":\"0.7\",\"7\":\"1.3\",\"8\":\"1.5\",\"9\":\"1.0\",\"10\":\"1.2\",\"11\":\"2.2\",\"12\":\"1.5\",\"13\":\"0.9\",\"14\":\"0.4\",\"15\":\"-2.1\",\"16\":\"-2.2\",\"17\":\"-2.8\",\"18\":\"-4.5\",\"19\":\"-4.8\",\"20\":\"-3.8\",\"21\":\"-2.5\",\"22\":\"-1.5\",\"23\":\"-0.4\",\"24\":\"-0.6\",\"25\":\"-0.4\",\"26\":\"3.4\",\"27\":\"2.5\",\"28\":\"2.5\",\"29\":\"3.8\",\"30\":\"2.7\",\"31\":\"1.9\",\"32\":\"2.3\",\"33\":\"0.8\",\"34\":\"1.5\",\"35\":\"2.4\",\"36\":\"3.4\",\"37\":\"4.3\",\"38\":\"4.9\",\"39\":\"5.2\",\"40\":\"6.4\",\"41\":\"8.0\",\"42\":\"8.5\",\"43\":\"5.0\",\"44\":\"-1.1\",\"45\":\"-2.0\",\"46\":\"-2.3\",\"47\":\"0.8\",\"48\":\"6.3\",\"49\":\"5.9\",\"50\":\"5.8\",\"51\":\"5.9\",\"52\":\"5.8\",\"53\":\"6.4\",\"54\":\"5.1\",\"55\":\"4.9\",\"56\":\"4.2\",\"57\":\"1.8\",\"58\":\"3.8\",\"59\":\"1.8\",\"60\":\"1.8\",\"61\":\"4.3\",\"62\":\"4.2\",\"63\":\"6.0\",\"64\":\"6.2\",\"65\":\"6.2\",\"66\":\"4.1\",\"67\":\"0.5\",\"68\":\"0.9\",\"69\":\"1.1\",\"70\":\"2.4\",\"71\":\"5.3\",\"72\":\"4.5\",\"73\":\"2.7\",\"74\":\"1.6\",\"75\":\"0.0\",\"76\":\"0.8\",\"77\":\"2.5\",\"78\":\"2.9\",\"79\":\"4.4\",\"80\":\"4.2\",\"81\":\"3.5\",\"82\":\"3.6\",\"83\":\"2.3\",\"84\":\"-0.1\",\"85\":\"0.1\",\"86\":\"1.6\",\"87\":\"-1.1\",\"88\":\"0.8\",\"89\":\"1.9\",\"90\":\"0.9\",\"91\":\"4.4\",\"92\":\"0.9\",\"93\":\"3.8\",\"94\":\"2.6\",\"95\":\"0.7\",\"96\":\"5.1\",\"97\":\"1.7\",\"98\":\"0.3\",\"_rn_\":\"VAB\"},{\"1\":\"-15.6\",\"2\":\"-0.4\",\"3\":\"1.9\",\"4\":\"1.8\",\"5\":\"1.9\",\"6\":\"0.3\",\"7\":\"0.7\",\"8\":\"1.5\",\"9\":\"1.4\",\"10\":\"2.9\",\"11\":\"3.6\",\"12\":\"2.6\",\"13\":\"0.6\",\"14\":\"0.2\",\"15\":\"-3.0\",\"16\":\"-4.1\",\"17\":\"-6.1\",\"18\":\"-9.0\",\"19\":\"-9.6\",\"20\":\"-7.1\",\"21\":\"-4.5\",\"22\":\"-2.6\",\"23\":\"0.7\",\"24\":\"-0.7\",\"25\":\"-0.7\",\"26\":\"3.9\",\"27\":\"2.5\",\"28\":\"4.4\",\"29\":\"5.0\",\"30\":\"3.0\",\"31\":\"5.8\",\"32\":\"3.5\",\"33\":\"2.3\",\"34\":\"3.0\",\"35\":\"3.3\",\"36\":\"4.3\",\"37\":\"6.9\",\"38\":\"6.8\",\"39\":\"8.6\",\"40\":\"10.1\",\"41\":\"11.4\",\"42\":\"13.5\",\"43\":\"6.8\",\"44\":\"-1.6\",\"45\":\"-3.2\",\"46\":\"-3.2\",\"47\":\"2.4\",\"48\":\"11.0\",\"49\":\"8.6\",\"50\":\"8.2\",\"51\":\"10.8\",\"52\":\"6.5\",\"53\":\"7.4\",\"54\":\"5.7\",\"55\":\"4.0\",\"56\":\"6.0\",\"57\":\"4.9\",\"58\":\"7.2\",\"59\":\"4.0\",\"60\":\"3.7\",\"61\":\"5.4\",\"62\":\"3.9\",\"63\":\"7.2\",\"64\":\"8.6\",\"65\":\"6.9\",\"66\":\"2.8\",\"67\":\"0.9\",\"68\":\"-1.2\",\"69\":\"-0.8\",\"70\":\"3.9\",\"71\":\"4.5\",\"72\":\"2.4\",\"73\":\"-0.2\",\"74\":\"-6.2\",\"75\":\"-3.8\",\"76\":\"-1.8\",\"77\":\"1.3\",\"78\":\"7.2\",\"79\":\"5.4\",\"80\":\"6.7\",\"81\":\"7.3\",\"82\":\"10.3\",\"83\":\"1.2\",\"84\":\"-4.4\",\"85\":\"-4.0\",\"86\":\"-5.4\",\"87\":\"-4.1\",\"88\":\"-2.6\",\"89\":\"-1.5\",\"90\":\"1.5\",\"91\":\"0.0\",\"92\":\"7.9\",\"93\":\"11.1\",\"94\":\"9.0\",\"95\":\"13.3\",\"96\":\"9.9\",\"97\":\"-1.7\",\"98\":\"-6.6\",\"_rn_\":\"TAX\"},{\"1\":\"-11.4\",\"2\":\"-0.3\",\"3\":\"1.7\",\"4\":\"1.2\",\"5\":\"1.1\",\"6\":\"0.6\",\"7\":\"1.2\",\"8\":\"1.5\",\"9\":\"1.1\",\"10\":\"1.5\",\"11\":\"2.4\",\"12\":\"1.6\",\"13\":\"0.9\",\"14\":\"0.4\",\"15\":\"-2.2\",\"16\":\"-2.5\",\"17\":\"-3.2\",\"18\":\"-5.2\",\"19\":\"-5.5\",\"20\":\"-4.3\",\"21\":\"-2.7\",\"22\":\"-1.6\",\"23\":\"-0.2\",\"24\":\"-0.6\",\"25\":\"-0.4\",\"26\":\"3.5\",\"27\":\"2.5\",\"28\":\"2.8\",\"29\":\"4.0\",\"30\":\"2.7\",\"31\":\"2.5\",\"32\":\"2.5\",\"33\":\"1.0\",\"34\":\"1.7\",\"35\":\"2.6\",\"36\":\"3.5\",\"37\":\"4.7\",\"38\":\"5.2\",\"39\":\"5.7\",\"40\":\"6.9\",\"41\":\"8.5\",\"42\":\"9.2\",\"43\":\"5.3\",\"44\":\"-1.2\",\"45\":\"-2.2\",\"46\":\"-2.4\",\"47\":\"1.0\",\"48\":\"7.0\",\"49\":\"6.3\",\"50\":\"6.2\",\"51\":\"6.6\",\"52\":\"5.9\",\"53\":\"6.5\",\"54\":\"5.2\",\"55\":\"4.8\",\"56\":\"4.5\",\"57\":\"2.3\",\"58\":\"4.3\",\"59\":\"2.2\",\"60\":\"2.1\",\"61\":\"4.5\",\"62\":\"4.2\",\"63\":\"6.2\",\"64\":\"6.6\",\"65\":\"6.3\",\"66\":\"3.9\",\"67\":\"0.6\",\"68\":\"0.6\",\"69\":\"0.8\",\"70\":\"2.7\",\"71\":\"5.2\",\"72\":\"4.2\",\"73\":\"2.3\",\"74\":\"0.5\",\"75\":\"-0.5\",\"76\":\"0.5\",\"77\":\"2.3\",\"78\":\"3.5\",\"79\":\"4.6\",\"80\":\"4.6\",\"81\":\"4.0\",\"82\":\"4.4\",\"83\":\"2.2\",\"84\":\"-0.6\",\"85\":\"-0.4\",\"86\":\"0.8\",\"87\":\"-1.4\",\"88\":\"0.4\",\"89\":\"1.5\",\"90\":\"1.0\",\"91\":\"3.7\",\"92\":\"1.8\",\"93\":\"4.8\",\"94\":\"3.4\",\"95\":\"2.3\",\"96\":\"5.6\",\"97\":\"1.3\",\"98\":\"-0.6\",\"_rn_\":\"GDP\"},{\"1\":\"-13.5\",\"2\":\"-0.7\",\"3\":\"2.1\",\"4\":\"1.9\",\"5\":\"1.8\",\"6\":\"1.5\",\"7\":\"1.4\",\"8\":\"1.6\",\"9\":\"1.8\",\"10\":\"3.5\",\"11\":\"3.6\",\"12\":\"3.1\",\"13\":\"1.6\",\"14\":\"-0.5\",\"15\":\"-2.4\",\"16\":\"-2.9\",\"17\":\"-4.5\",\"18\":\"-5.6\",\"19\":\"-6.0\",\"20\":\"-3.9\",\"21\":\"-2.2\",\"22\":\"-0.6\",\"23\":\"2.8\",\"24\":\"1.1\",\"25\":\"1.5\",\"26\":\"3.6\",\"27\":\"2.5\",\"28\":\"3.5\",\"29\":\"4.1\",\"30\":\"3.8\",\"31\":\"4.8\",\"32\":\"3.9\",\"33\":\"2.2\",\"34\":\"3.0\",\"35\":\"2.5\",\"36\":\"4.0\",\"37\":\"6.6\",\"38\":\"6.4\",\"39\":\"6.8\",\"40\":\"5.3\",\"41\":\"5.4\",\"42\":\"7.5\",\"43\":\"7.0\",\"44\":\"4.5\",\"45\":\"4.0\",\"46\":\"2.3\",\"47\":\"3.5\",\"48\":\"8.4\",\"49\":\"7.0\",\"50\":\"7.2\",\"51\":\"7.1\",\"52\":\"5.8\",\"53\":\"6.2\",\"54\":\"6.4\",\"55\":\"5.1\",\"56\":\"5.3\",\"57\":\"5.8\",\"58\":\"4.9\",\"59\":\"3.3\",\"60\":\"4.4\",\"61\":\"4.8\",\"62\":\"5.3\",\"63\":\"6.6\",\"64\":\"4.9\",\"65\":\"3.1\",\"66\":\"0.9\",\"67\":\"0.6\",\"68\":\"-0.7\",\"69\":\"-2.0\",\"70\":\"0.0\",\"71\":\"1.6\",\"72\":\"2.7\",\"73\":\"0.7\",\"74\":\"0.2\",\"75\":\"-1.9\",\"76\":\"-1.8\",\"77\":\"3.1\",\"78\":\"4.0\",\"79\":\"4.1\",\"80\":\"4.7\",\"81\":\"4.2\",\"82\":\"3.0\",\"83\":\"3.1\",\"84\":\"-0.1\",\"85\":\"-0.6\",\"86\":\"-0.9\",\"87\":\"-1.3\",\"88\":\"0.0\",\"89\":\"-1.1\",\"90\":\"-0.5\",\"91\":\"-2.8\",\"92\":\"2.1\",\"93\":\"6.0\",\"94\":\"7.9\",\"95\":\"6.7\",\"96\":\"5.4\",\"97\":\"1.8\",\"98\":\"-1.2\",\"_rn_\":\"C\"},{\"1\":\"-8.6\",\"2\":\"0.0\",\"3\":\"0.3\",\"4\":\"-1.4\",\"5\":\"-0.7\",\"6\":\"0.0\",\"7\":\"-0.9\",\"8\":\"1.1\",\"9\":\"0.7\",\"10\":\"0.6\",\"11\":\"0.4\",\"12\":\"-0.8\",\"13\":\"-0.8\",\"14\":\"-1.5\",\"15\":\"0.5\",\"16\":\"0.0\",\"17\":\"0.5\",\"18\":\"-0.2\",\"19\":\"-1.9\",\"20\":\"-1.8\",\"21\":\"-1.6\",\"22\":\"-0.4\",\"23\":\"-0.9\",\"24\":\"1.0\",\"25\":\"1.2\",\"26\":\"2.0\",\"27\":\"2.4\",\"28\":\"2.5\",\"29\":\"1.2\",\"30\":\"-0.1\",\"31\":\"2.9\",\"32\":\"1.9\",\"33\":\"2.1\",\"34\":\"2.1\",\"35\":\"1.2\",\"36\":\"1.8\",\"37\":\"3.3\",\"38\":\"2.6\",\"39\":\"2.8\",\"40\":\"4.8\",\"41\":\"5.1\",\"42\":\"3.0\",\"43\":\"6.1\",\"44\":\"0.3\",\"45\":\"2.2\",\"46\":\"3.2\",\"47\":\"0.9\",\"48\":\"3.9\",\"49\":\"0.5\",\"50\":\"3.0\",\"51\":\"0.7\",\"52\":\"4.9\",\"53\":\"6.6\",\"54\":\"4.3\",\"55\":\"6.2\",\"56\":\"2.6\",\"57\":\"2.4\",\"58\":\"3.0\",\"59\":\"2.1\",\"60\":\"1.7\",\"61\":\"0.6\",\"62\":\"3.7\",\"63\":\"1.3\",\"64\":\"4.3\",\"65\":\"6.5\",\"66\":\"3.6\",\"67\":\"4.7\",\"68\":\"2.0\",\"69\":\"0.3\",\"70\":\"-0.8\",\"71\":\"2.8\",\"72\":\"4.2\",\"73\":\"4.1\",\"74\":\"4.3\",\"75\":\"3.6\",\"76\":\"3.5\",\"77\":\"2.2\",\"78\":\"1.1\",\"79\":\"-2.8\",\"80\":\"-2.3\",\"81\":\"1.3\",\"82\":\"3.6\",\"83\":\"3.9\",\"84\":\"1.1\",\"85\":\"1.0\",\"86\":\"0.7\",\"87\":\"4.0\",\"88\":\"5.4\",\"89\":\"2.3\",\"90\":\"1.2\",\"91\":\"11.5\",\"92\":\"-5.7\",\"93\":\"-0.8\",\"94\":\"1.2\",\"95\":\"-6.8\",\"96\":\"2.8\",\"97\":\"-0.2\",\"98\":\"-3.3\",\"_rn_\":\"G\"},{\"1\":\"-15.2\",\"2\":\"4.3\",\"3\":\"-0.4\",\"4\":\"2.9\",\"5\":\"5.4\",\"6\":\"1.1\",\"7\":\"2.8\",\"8\":\"7.7\",\"9\":\"2.6\",\"10\":\"2.4\",\"11\":\"3.5\",\"12\":\"-1.0\",\"13\":\"-7.5\",\"14\":\"-5.1\",\"15\":\"-7.6\",\"16\":\"-10.6\",\"17\":\"-10.7\",\"18\":\"-18.8\",\"19\":\"-19.4\",\"20\":\"-14.9\",\"21\":\"-12.2\",\"22\":\"-9.4\",\"23\":\"-6.5\",\"24\":\"-7.4\",\"25\":\"-6.4\",\"26\":\"4.2\",\"27\":\"4.4\",\"28\":\"7.3\",\"29\":\"8.5\",\"30\":\"3.0\",\"31\":\"0.6\",\"32\":\"-1.5\",\"33\":\"1.1\",\"34\":\"3.1\",\"35\":\"5.5\",\"36\":\"5.8\",\"37\":\"8.1\",\"38\":\"8.2\",\"39\":\"7.8\",\"40\":\"15.3\",\"41\":\"22.9\",\"42\":\"29.0\",\"43\":\"12.9\",\"44\":\"-3.9\",\"45\":\"-8.3\",\"46\":\"-9.5\",\"47\":\"5.5\",\"48\":\"18.0\",\"49\":\"13.6\",\"50\":\"12.0\",\"51\":\"13.7\",\"52\":\"14.2\",\"53\":\"12.4\",\"54\":\"7.2\",\"55\":\"8.7\",\"56\":\"5.8\",\"57\":\"3.6\",\"58\":\"8.8\",\"59\":\"2.6\",\"60\":\"0.9\",\"61\":\"3.0\",\"62\":\"1.4\",\"63\":\"7.2\",\"64\":\"14.2\",\"65\":\"11.9\",\"66\":\"0.9\",\"67\":\"-4.9\",\"68\":\"-6.9\",\"69\":\"-6.8\",\"70\":\"3.1\",\"71\":\"7.6\",\"72\":\"-0.5\",\"73\":\"-4.3\",\"74\":\"-7.9\",\"75\":\"-7.4\",\"76\":\"1.2\",\"77\":\"2.0\",\"78\":\"10.2\",\"79\":\"8.8\",\"80\":\"6.8\",\"81\":\"3.9\",\"82\":\"-0.3\",\"83\":\"-5.0\",\"84\":\"-11.3\",\"85\":\"-10.4\",\"86\":\"-8.4\",\"87\":\"-4.9\",\"88\":\"-1.2\",\"89\":\"2.1\",\"90\":\"3.5\",\"91\":\"3.6\",\"92\":\"8.5\",\"93\":\"10.7\",\"94\":\"11.3\",\"95\":\"13.9\",\"96\":\"10.1\",\"97\":\"-4.1\",\"98\":\"-12.7\",\"_rn_\":\"FBKF\"},{\"1\":\"0.5\",\"2\":\"-2.2\",\"3\":\"-5.1\",\"4\":\"-4.4\",\"5\":\"1.3\",\"6\":\"-1.6\",\"7\":\"12.0\",\"8\":\"2.4\",\"9\":\"-2.6\",\"10\":\"5.0\",\"11\":\"8.9\",\"12\":\"7.4\",\"13\":\"2.1\",\"14\":\"1.6\",\"15\":\"-8.5\",\"16\":\"-1.0\",\"17\":\"2.6\",\"18\":\"12.1\",\"19\":\"12.5\",\"20\":\"2.1\",\"21\":\"8.8\",\"22\":\"4.1\",\"23\":\"-10.8\",\"24\":\"4.1\",\"25\":\"-1.0\",\"26\":\"2.4\",\"27\":\"3.2\",\"28\":\"2.5\",\"29\":\"5.9\",\"30\":\"-5.0\",\"31\":\"3.1\",\"32\":\"-3.6\",\"33\":\"-1.1\",\"34\":\"5.3\",\"35\":\"4.1\",\"36\":\"4.4\",\"37\":\"6.5\",\"38\":\"4.2\",\"39\":\"13.5\",\"40\":\"11.5\",\"41\":\"7.1\",\"42\":\"15.5\",\"43\":\"-3.8\",\"44\":\"-9.4\",\"45\":\"-9.9\",\"46\":\"-14.1\",\"47\":\"-6.0\",\"48\":\"3.3\",\"49\":\"5.9\",\"50\":\"-1.8\",\"51\":\"6.1\",\"52\":\"1.2\",\"53\":\"12.8\",\"54\":\"5.5\",\"55\":\"5.1\",\"56\":\"7.7\",\"57\":\"-1.7\",\"58\":\"8.5\",\"59\":\"6.8\",\"60\":\"10.9\",\"61\":\"11.1\",\"62\":\"9.9\",\"63\":\"13.6\",\"64\":\"13.7\",\"65\":\"13.0\",\"66\":\"18.2\",\"67\":\"5.6\",\"68\":\"1.6\",\"69\":\"27.4\",\"70\":\"14.7\",\"71\":\"20.9\",\"72\":\"20.1\",\"73\":\"-11.1\",\"74\":\"-4.6\",\"75\":\"9.8\",\"76\":\"3.0\",\"77\":\"13.8\",\"78\":\"11.2\",\"79\":\"2.7\",\"80\":\"18.6\",\"81\":\"11.2\",\"82\":\"20.7\",\"83\":\"21.8\",\"84\":\"3.3\",\"85\":\"-1.0\",\"86\":\"-0.1\",\"87\":\"6.1\",\"88\":\"-0.1\",\"89\":\"4.8\",\"90\":\"10.4\",\"91\":\"11.6\",\"92\":\"17.5\",\"93\":\"14.3\",\"94\":\"-0.5\",\"95\":\"-6.6\",\"96\":\"-3.6\",\"97\":\"4.5\",\"98\":\"4.7\",\"_rn_\":\"X\"},{\"1\":\"-14.9\",\"2\":\"5.1\",\"3\":\"-0.2\",\"4\":\"2.2\",\"5\":\"4.9\",\"6\":\"-2.3\",\"7\":\"5.0\",\"8\":\"13.9\",\"9\":\"6.4\",\"10\":\"8.0\",\"11\":\"9.9\",\"12\":\"7.5\",\"13\":\"-1.3\",\"14\":\"11.2\",\"15\":\"-0.7\",\"16\":\"-6.9\",\"17\":\"-10.6\",\"18\":\"-21.7\",\"19\":\"-19.8\",\"20\":\"-19.8\",\"21\":\"-11.1\",\"22\":\"-5.3\",\"23\":\"-5.3\",\"24\":\"0.6\",\"25\":\"-4.2\",\"26\":\"-0.1\",\"27\":\"2.4\",\"28\":\"11.2\",\"29\":\"6.6\",\"30\":\"6.8\",\"31\":\"1.8\",\"32\":\"-5.4\",\"33\":\"2.5\",\"34\":\"6.6\",\"35\":\"6.9\",\"36\":\"5.9\",\"37\":\"14.1\",\"38\":\"11.7\",\"39\":\"24.5\",\"40\":\"37.3\",\"41\":\"36.1\",\"42\":\"39.0\",\"43\":\"6.4\",\"44\":\"-11.6\",\"45\":\"-12.6\",\"46\":\"-13.0\",\"47\":\"8.3\",\"48\":\"21.5\",\"49\":\"23.6\",\"50\":\"15.5\",\"51\":\"21.7\",\"52\":\"19.4\",\"53\":\"17.6\",\"54\":\"19.4\",\"55\":\"22.3\",\"56\":\"20.3\",\"57\":\"13.1\",\"58\":\"14.8\",\"59\":\"5.1\",\"60\":\"7.7\",\"61\":\"8.3\",\"62\":\"8.9\",\"63\":\"6.3\",\"64\":\"13.0\",\"65\":\"12.3\",\"66\":\"10.3\",\"67\":\"10.7\",\"68\":\"-3.7\",\"69\":\"-4.1\",\"70\":\"-4.6\",\"71\":\"-9.0\",\"72\":\"-8.6\",\"73\":\"-16.5\",\"74\":\"-18.6\",\"75\":\"-12.5\",\"76\":\"-5.2\",\"77\":\"12.8\",\"78\":\"24.3\",\"79\":\"13.0\",\"80\":\"17.7\",\"81\":\"7.3\",\"82\":\"4.1\",\"83\":\"-8.7\",\"84\":\"-18.8\",\"85\":\"-15.0\",\"86\":\"-17.9\",\"87\":\"-2.4\",\"88\":\"-2.1\",\"89\":\"-2.2\",\"90\":\"7.9\",\"91\":\"-2.0\",\"92\":\"15.9\",\"93\":\"23.8\",\"94\":\"27.5\",\"95\":\"31.0\",\"96\":\"15.0\",\"97\":\"-6.6\",\"98\":\"-16.2\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nAC4Q T/T-4\n\n\npaged_table(gdp.table(gdp.retsum4, type=\"ret4\", digits=1), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1.5\",\"2\":\"1.6\",\"3\":\"1.3\",\"4\":\"2.0\",\"5\":\"2.7\",\"6\":\"2.5\",\"7\":\"1.4\",\"8\":\"1.4\",\"9\":\"2.5\",\"10\":\"6.6\",\"11\":\"14.2\",\"12\":\"12.8\",\"13\":\"9.1\",\"14\":\"3.0\",\"15\":\"-5.2\",\"16\":\"-4.9\",\"17\":\"-3.9\",\"18\":\"-1.2\",\"19\":\"3.3\",\"20\":\"3.8\",\"21\":\"4.1\",\"22\":\"2.9\",\"23\":\"2.8\",\"24\":\"3.0\",\"25\":\"2.1\",\"26\":\"4.7\",\"27\":\"8.4\",\"28\":\"6.4\",\"29\":\"8.5\",\"30\":\"5.6\",\"31\":\"-3.1\",\"32\":\"-0.1\",\"33\":\"0.6\",\"34\":\"0.8\",\"35\":\"5.6\",\"36\":\"4.2\",\"37\":\"3.7\",\"38\":\"6.3\",\"39\":\"6.7\",\"40\":\"6.3\",\"41\":\"2.8\",\"42\":\"-1.5\",\"43\":\"-3.7\",\"44\":\"-3.8\",\"45\":\"-0.5\",\"46\":\"4.0\",\"47\":\"5.8\",\"48\":\"6.4\",\"49\":\"6.4\",\"50\":\"3.5\",\"51\":\"3.2\",\"52\":\"4.3\",\"53\":\"5.9\",\"54\":\"5.6\",\"55\":\"4.6\",\"56\":\"2.9\",\"57\":\"-0.4\",\"58\":\"0.4\",\"59\":\"1.1\",\"60\":\"1.3\",\"61\":\"3.0\",\"62\":\"2.9\",\"63\":\"2.0\",\"64\":\"1.9\",\"65\":\"1.1\",\"66\":\"4.0\",\"67\":\"8.3\",\"68\":\"9.9\",\"69\":\"12.7\",\"70\":\"11.0\",\"71\":\"8.0\",\"72\":\"8.4\",\"73\":\"6.9\",\"74\":\"5.7\",\"75\":\"5.2\",\"76\":\"2.9\",\"77\":\"1.7\",\"78\":\"1.8\",\"79\":\"2.7\",\"80\":\"4.9\",\"81\":\"5.4\",\"82\":\"4.9\",\"83\":\"6.5\",\"84\":\"3.6\",\"85\":\"4.0\",\"86\":\"7.2\",\"87\":\"3.4\",\"88\":\"1.9\",\"89\":\"1.0\",\"90\":\"-1.3\",\"91\":\"0.8\",\"92\":\"5.2\",\"93\":\"4.7\",\"94\":\"4.1\",\"95\":\"3.0\",\"96\":\"-3.7\",\"97\":\"-1.7\",\"98\":\"-1.9\",\"_rn_\":\"AGR\"},{\"1\":\"-2.5\",\"2\":\"0.7\",\"3\":\"0.5\",\"4\":\"0.0\",\"5\":\"-0.1\",\"6\":\"0.1\",\"7\":\"0.5\",\"8\":\"1.3\",\"9\":\"1.0\",\"10\":\"0.2\",\"11\":\"-0.5\",\"12\":\"-2.0\",\"13\":\"-2.8\",\"14\":\"-3.2\",\"15\":\"-4.6\",\"16\":\"-5.8\",\"17\":\"-6.4\",\"18\":\"-6.6\",\"19\":\"-5.8\",\"20\":\"-4.2\",\"21\":\"-3.7\",\"22\":\"-3.4\",\"23\":\"-1.5\",\"24\":\"-0.3\",\"25\":\"1.4\",\"26\":\"3.4\",\"27\":\"2.2\",\"28\":\"1.1\",\"29\":\"0.3\",\"30\":\"-1.6\",\"31\":\"-0.7\",\"32\":\"0.1\",\"33\":\"1.2\",\"34\":\"3.3\",\"35\":\"4.1\",\"36\":\"5.0\",\"37\":\"6.1\",\"38\":\"8.0\",\"39\":\"10.2\",\"40\":\"10.3\",\"41\":\"6.3\",\"42\":\"1.1\",\"43\":\"-4.7\",\"44\":\"-6.6\",\"45\":\"-3.5\",\"46\":\"-0.2\",\"47\":\"4.1\",\"48\":\"6.0\",\"49\":\"6.0\",\"50\":\"6.9\",\"51\":\"6.2\",\"52\":\"6.0\",\"53\":\"4.9\",\"54\":\"2.2\",\"55\":\"2.0\",\"56\":\"1.0\",\"57\":\"0.1\",\"58\":\"1.8\",\"59\":\"2.0\",\"60\":\"3.9\",\"61\":\"6.5\",\"62\":\"7.4\",\"63\":\"8.2\",\"64\":\"6.3\",\"65\":\"4.4\",\"66\":\"1.8\",\"67\":\"0.1\",\"68\":\"2.3\",\"69\":\"3.3\",\"70\":\"4.4\",\"71\":\"3.8\",\"72\":\"0.5\",\"73\":\"-1.7\",\"74\":\"-2.1\",\"75\":\"-0.6\",\"76\":\"1.5\",\"77\":\"3.4\",\"78\":\"4.3\",\"79\":\"4.4\",\"80\":\"3.7\",\"81\":\"1.5\",\"82\":\"-0.6\",\"83\":\"-2.6\",\"84\":\"-4.3\",\"85\":\"-4.1\",\"86\":\"-3.1\",\"87\":\"-2.1\",\"88\":\"0.8\",\"89\":\"1.6\",\"90\":\"3.6\",\"91\":\"4.4\",\"92\":\"3.1\",\"93\":\"6.1\",\"94\":\"3.3\",\"95\":\"1.0\",\"96\":\"0.5\",\"97\":\"-2.3\",\"98\":\"-0.6\",\"_rn_\":\"IND\"},{\"1\":\"-2.2\",\"2\":\"0.9\",\"3\":\"1.3\",\"4\":\"1.1\",\"5\":\"1.2\",\"6\":\"1.2\",\"7\":\"1.5\",\"8\":\"1.7\",\"9\":\"1.8\",\"10\":\"1.6\",\"11\":\"0.8\",\"12\":\"-0.3\",\"13\":\"-1.0\",\"14\":\"-1.7\",\"15\":\"-2.2\",\"16\":\"-2.8\",\"17\":\"-3.2\",\"18\":\"-3.2\",\"19\":\"-2.7\",\"20\":\"-1.7\",\"21\":\"-0.7\",\"22\":\"0.0\",\"23\":\"1.0\",\"24\":\"1.6\",\"25\":\"2.1\",\"26\":\"2.8\",\"27\":\"2.8\",\"28\":\"3.1\",\"29\":\"3.2\",\"30\":\"3.0\",\"31\":\"2.9\",\"32\":\"2.5\",\"33\":\"2.4\",\"34\":\"2.8\",\"35\":\"3.5\",\"36\":\"4.3\",\"37\":\"5.0\",\"38\":\"5.4\",\"39\":\"5.8\",\"40\":\"5.8\",\"41\":\"4.7\",\"42\":\"3.3\",\"43\":\"2.1\",\"44\":\"1.3\",\"45\":\"2.5\",\"46\":\"3.8\",\"47\":\"4.8\",\"48\":\"5.9\",\"49\":\"5.7\",\"50\":\"5.7\",\"51\":\"5.8\",\"52\":\"5.4\",\"53\":\"5.1\",\"54\":\"4.6\",\"55\":\"4.3\",\"56\":\"3.8\",\"57\":\"3.6\",\"58\":\"3.7\",\"59\":\"3.7\",\"60\":\"4.5\",\"61\":\"5.0\",\"62\":\"5.3\",\"63\":\"5.0\",\"64\":\"3.7\",\"65\":\"2.5\",\"66\":\"1.4\",\"67\":\"1.0\",\"68\":\"1.7\",\"69\":\"2.4\",\"70\":\"2.8\",\"71\":\"3.1\",\"72\":\"2.4\",\"73\":\"2.0\",\"74\":\"2.2\",\"75\":\"2.1\",\"76\":\"3.0\",\"77\":\"3.6\",\"78\":\"3.7\",\"79\":\"3.8\",\"80\":\"3.2\",\"81\":\"2.3\",\"82\":\"1.9\",\"83\":\"1.8\",\"84\":\"1.5\",\"85\":\"1.7\",\"86\":\"1.8\",\"87\":\"1.4\",\"88\":\"2.4\",\"89\":\"2.3\",\"90\":\"2.4\",\"91\":\"2.5\",\"92\":\"1.3\",\"93\":\"1.8\",\"94\":\"2.1\",\"95\":\"2.3\",\"96\":\"4.0\",\"97\":\"5.4\",\"98\":\"5.2\",\"_rn_\":\"SER\"},{\"1\":\"-2.1\",\"2\":\"0.9\",\"3\":\"1.1\",\"4\":\"1.0\",\"5\":\"1.1\",\"6\":\"1.1\",\"7\":\"1.3\",\"8\":\"1.5\",\"9\":\"1.5\",\"10\":\"1.5\",\"11\":\"1.3\",\"12\":\"0.2\",\"13\":\"-0.7\",\"14\":\"-1.7\",\"15\":\"-2.9\",\"16\":\"-3.6\",\"17\":\"-4.0\",\"18\":\"-3.9\",\"19\":\"-3.2\",\"20\":\"-2.0\",\"21\":\"-1.2\",\"22\":\"-0.7\",\"23\":\"0.5\",\"24\":\"1.2\",\"25\":\"2.0\",\"26\":\"3.1\",\"27\":\"2.9\",\"28\":\"2.7\",\"29\":\"2.7\",\"30\":\"1.9\",\"31\":\"1.6\",\"32\":\"1.7\",\"33\":\"2.0\",\"34\":\"2.9\",\"35\":\"3.7\",\"36\":\"4.4\",\"37\":\"5.2\",\"38\":\"6.1\",\"39\":\"7.0\",\"40\":\"7.0\",\"41\":\"5.0\",\"42\":\"2.5\",\"43\":\"-0.1\",\"44\":\"-1.1\",\"45\":\"0.7\",\"46\":\"2.7\",\"47\":\"4.7\",\"48\":\"6.0\",\"49\":\"5.9\",\"50\":\"6.0\",\"51\":\"5.8\",\"52\":\"5.6\",\"53\":\"5.2\",\"54\":\"4.0\",\"55\":\"3.7\",\"56\":\"2.9\",\"57\":\"2.3\",\"58\":\"2.9\",\"59\":\"3.0\",\"60\":\"4.1\",\"61\":\"5.2\",\"62\":\"5.7\",\"63\":\"5.7\",\"64\":\"4.3\",\"65\":\"2.9\",\"66\":\"1.6\",\"67\":\"1.2\",\"68\":\"2.4\",\"69\":\"3.3\",\"70\":\"3.8\",\"71\":\"3.6\",\"72\":\"2.2\",\"73\":\"1.3\",\"74\":\"1.2\",\"75\":\"1.5\",\"76\":\"2.6\",\"77\":\"3.5\",\"78\":\"3.7\",\"79\":\"3.9\",\"80\":\"3.4\",\"81\":\"2.3\",\"82\":\"1.4\",\"83\":\"1.0\",\"84\":\"0.1\",\"85\":\"0.3\",\"86\":\"0.8\",\"87\":\"0.6\",\"88\":\"2.0\",\"89\":\"2.0\",\"90\":\"2.5\",\"91\":\"2.9\",\"92\":\"2.0\",\"93\":\"3.0\",\"94\":\"2.5\",\"95\":\"2.0\",\"96\":\"2.6\",\"97\":\"2.8\",\"98\":\"3.1\",\"_rn_\":\"VAB\"},{\"1\":\"-3.0\",\"2\":\"1.3\",\"3\":\"1.5\",\"4\":\"1.1\",\"5\":\"1.1\",\"6\":\"1.0\",\"7\":\"1.6\",\"8\":\"2.3\",\"9\":\"2.6\",\"10\":\"2.4\",\"11\":\"1.8\",\"12\":\"0.1\",\"13\":\"-1.7\",\"14\":\"-3.3\",\"15\":\"-5.6\",\"16\":\"-7.3\",\"17\":\"-8.0\",\"18\":\"-7.6\",\"19\":\"-6.0\",\"20\":\"-3.3\",\"21\":\"-1.7\",\"22\":\"-0.8\",\"23\":\"0.8\",\"24\":\"1.2\",\"25\":\"2.5\",\"26\":\"4.0\",\"27\":\"3.7\",\"28\":\"4.6\",\"29\":\"4.3\",\"30\":\"3.7\",\"31\":\"3.7\",\"32\":\"3.0\",\"33\":\"3.2\",\"34\":\"4.4\",\"35\":\"5.3\",\"36\":\"6.6\",\"37\":\"8.1\",\"38\":\"9.2\",\"39\":\"10.8\",\"40\":\"10.4\",\"41\":\"7.3\",\"42\":\"3.6\",\"43\":\"-0.3\",\"44\":\"-1.4\",\"45\":\"1.7\",\"46\":\"4.7\",\"47\":\"7.5\",\"48\":\"9.7\",\"49\":\"8.5\",\"50\":\"8.2\",\"51\":\"7.6\",\"52\":\"5.9\",\"53\":\"5.8\",\"54\":\"5.2\",\"55\":\"5.5\",\"56\":\"5.5\",\"57\":\"4.9\",\"58\":\"5.1\",\"59\":\"4.3\",\"60\":\"5.0\",\"61\":\"6.3\",\"62\":\"6.6\",\"63\":\"6.4\",\"64\":\"4.8\",\"65\":\"2.3\",\"66\":\"0.4\",\"67\":\"0.6\",\"68\":\"1.5\",\"69\":\"2.5\",\"70\":\"2.6\",\"71\":\"0.0\",\"72\":\"-2.0\",\"73\":\"-3.0\",\"74\":\"-2.6\",\"75\":\"0.6\",\"76\":\"2.9\",\"77\":\"5.1\",\"78\":\"6.6\",\"79\":\"7.4\",\"80\":\"6.3\",\"81\":\"3.3\",\"82\":\"0.5\",\"83\":\"-3.1\",\"84\":\"-4.5\",\"85\":\"-4.0\",\"86\":\"-3.3\",\"87\":\"-1.7\",\"88\":\"-0.7\",\"89\":\"1.9\",\"90\":\"5.0\",\"91\":\"6.8\",\"92\":\"10.3\",\"93\":\"10.8\",\"94\":\"7.6\",\"95\":\"3.7\",\"96\":\"0.3\",\"97\":\"-3.0\",\"98\":\"-1.9\",\"_rn_\":\"TAX\"},{\"1\":\"-2.2\",\"2\":\"0.9\",\"3\":\"1.1\",\"4\":\"1.0\",\"5\":\"1.1\",\"6\":\"1.1\",\"7\":\"1.3\",\"8\":\"1.6\",\"9\":\"1.6\",\"10\":\"1.6\",\"11\":\"1.3\",\"12\":\"0.2\",\"13\":\"-0.9\",\"14\":\"-1.9\",\"15\":\"-3.3\",\"16\":\"-4.1\",\"17\":\"-4.6\",\"18\":\"-4.4\",\"19\":\"-3.5\",\"20\":\"-2.2\",\"21\":\"-1.3\",\"22\":\"-0.7\",\"23\":\"0.5\",\"24\":\"1.2\",\"25\":\"2.1\",\"26\":\"3.2\",\"27\":\"3.0\",\"28\":\"3.0\",\"29\":\"2.9\",\"30\":\"2.2\",\"31\":\"1.9\",\"32\":\"1.9\",\"33\":\"2.2\",\"34\":\"3.1\",\"35\":\"4.0\",\"36\":\"4.8\",\"37\":\"5.6\",\"38\":\"6.6\",\"39\":\"7.5\",\"40\":\"7.5\",\"41\":\"5.3\",\"42\":\"2.6\",\"43\":\"-0.1\",\"44\":\"-1.2\",\"45\":\"0.8\",\"46\":\"3.0\",\"47\":\"5.1\",\"48\":\"6.5\",\"49\":\"6.3\",\"50\":\"6.3\",\"51\":\"6.1\",\"52\":\"5.6\",\"53\":\"5.3\",\"54\":\"4.2\",\"55\":\"4.0\",\"56\":\"3.3\",\"57\":\"2.7\",\"58\":\"3.2\",\"59\":\"3.2\",\"60\":\"4.2\",\"61\":\"5.4\",\"62\":\"5.8\",\"63\":\"5.8\",\"64\":\"4.3\",\"65\":\"2.8\",\"66\":\"1.4\",\"67\":\"1.1\",\"68\":\"2.3\",\"69\":\"3.2\",\"70\":\"3.6\",\"71\":\"3.1\",\"72\":\"1.6\",\"73\":\"0.7\",\"74\":\"0.7\",\"75\":\"1.4\",\"76\":\"2.7\",\"77\":\"3.7\",\"78\":\"4.2\",\"79\":\"4.4\",\"80\":\"3.8\",\"81\":\"2.4\",\"82\":\"1.3\",\"83\":\"0.5\",\"84\":\"-0.4\",\"85\":\"-0.2\",\"86\":\"0.3\",\"87\":\"0.3\",\"88\":\"1.6\",\"89\":\"2.0\",\"90\":\"2.8\",\"91\":\"3.4\",\"92\":\"3.0\",\"93\":\"4.0\",\"94\":\"3.2\",\"95\":\"2.2\",\"96\":\"2.3\",\"97\":\"2.1\",\"98\":\"2.5\",\"_rn_\":\"GDP\"},{\"1\":\"-2.5\",\"2\":\"1.3\",\"3\":\"1.8\",\"4\":\"1.7\",\"5\":\"1.6\",\"6\":\"1.6\",\"7\":\"2.1\",\"8\":\"2.6\",\"9\":\"3.0\",\"10\":\"2.9\",\"11\":\"2.0\",\"12\":\"0.4\",\"13\":\"-1.1\",\"14\":\"-2.6\",\"15\":\"-3.8\",\"16\":\"-4.8\",\"17\":\"-5.0\",\"18\":\"-4.4\",\"19\":\"-3.2\",\"20\":\"-1.0\",\"21\":\"0.3\",\"22\":\"1.2\",\"23\":\"2.3\",\"24\":\"2.2\",\"25\":\"2.8\",\"26\":\"3.4\",\"27\":\"3.5\",\"28\":\"4.1\",\"29\":\"4.2\",\"30\":\"3.7\",\"31\":\"3.5\",\"32\":\"2.9\",\"33\":\"2.9\",\"34\":\"4.0\",\"35\":\"4.8\",\"36\":\"5.9\",\"37\":\"6.3\",\"38\":\"6.0\",\"39\":\"6.2\",\"40\":\"6.3\",\"41\":\"6.1\",\"42\":\"5.7\",\"43\":\"4.5\",\"44\":\"3.6\",\"45\":\"4.5\",\"46\":\"5.2\",\"47\":\"6.5\",\"48\":\"7.4\",\"49\":\"6.8\",\"50\":\"6.6\",\"51\":\"6.4\",\"52\":\"5.9\",\"53\":\"5.7\",\"54\":\"5.6\",\"55\":\"5.3\",\"56\":\"4.8\",\"57\":\"4.6\",\"58\":\"4.3\",\"59\":\"4.4\",\"60\":\"5.3\",\"61\":\"5.4\",\"62\":\"5.0\",\"63\":\"3.9\",\"64\":\"2.4\",\"65\":\"1.0\",\"66\":\"-0.3\",\"67\":\"-0.5\",\"68\":\"-0.3\",\"69\":\"0.6\",\"70\":\"1.3\",\"71\":\"1.3\",\"72\":\"0.4\",\"73\":\"-0.7\",\"74\":\"-0.1\",\"75\":\"0.8\",\"76\":\"2.3\",\"77\":\"4.0\",\"78\":\"4.3\",\"79\":\"4.0\",\"80\":\"3.8\",\"81\":\"2.5\",\"82\":\"1.3\",\"83\":\"0.4\",\"84\":\"-0.7\",\"85\":\"-0.7\",\"86\":\"-0.8\",\"87\":\"-0.7\",\"88\":\"-1.1\",\"89\":\"-0.6\",\"90\":\"1.1\",\"91\":\"3.0\",\"92\":\"5.6\",\"93\":\"6.5\",\"94\":\"5.5\",\"95\":\"3.2\",\"96\":\"3.3\",\"97\":\"2.6\",\"98\":\"2.5\",\"_rn_\":\"C\"},{\"1\":\"-2.4\",\"2\":\"-0.4\",\"3\":\"-0.4\",\"4\":\"-0.8\",\"5\":\"-0.1\",\"6\":\"0.2\",\"7\":\"0.4\",\"8\":\"0.7\",\"9\":\"0.2\",\"10\":\"-0.2\",\"11\":\"-0.7\",\"12\":\"-0.6\",\"13\":\"-0.5\",\"14\":\"-0.1\",\"15\":\"0.2\",\"16\":\"-0.4\",\"17\":\"-0.9\",\"18\":\"-1.4\",\"19\":\"-1.4\",\"20\":\"-1.2\",\"21\":\"-0.5\",\"22\":\"0.2\",\"23\":\"0.8\",\"24\":\"1.7\",\"25\":\"2.0\",\"26\":\"2.0\",\"27\":\"1.5\",\"28\":\"1.6\",\"29\":\"1.5\",\"30\":\"1.7\",\"31\":\"2.3\",\"32\":\"1.8\",\"33\":\"1.8\",\"34\":\"2.1\",\"35\":\"2.2\",\"36\":\"2.6\",\"37\":\"3.4\",\"38\":\"3.8\",\"39\":\"3.9\",\"40\":\"4.8\",\"41\":\"3.6\",\"42\":\"2.9\",\"43\":\"2.9\",\"44\":\"1.6\",\"45\":\"2.5\",\"46\":\"2.1\",\"47\":\"2.0\",\"48\":\"2.0\",\"49\":\"2.2\",\"50\":\"3.7\",\"51\":\"4.1\",\"52\":\"5.5\",\"53\":\"4.9\",\"54\":\"3.9\",\"55\":\"3.6\",\"56\":\"2.5\",\"57\":\"2.3\",\"58\":\"1.8\",\"59\":\"2.0\",\"60\":\"1.8\",\"61\":\"2.4\",\"62\":\"3.9\",\"63\":\"3.9\",\"64\":\"4.8\",\"65\":\"4.2\",\"66\":\"2.7\",\"67\":\"1.6\",\"68\":\"1.1\",\"69\":\"1.6\",\"70\":\"2.6\",\"71\":\"3.8\",\"72\":\"4.0\",\"73\":\"3.9\",\"74\":\"3.4\",\"75\":\"2.6\",\"76\":\"1.0\",\"77\":\"-0.5\",\"78\":\"-0.7\",\"79\":\"-0.2\",\"80\":\"1.6\",\"81\":\"2.5\",\"82\":\"2.4\",\"83\":\"1.7\",\"84\":\"1.7\",\"85\":\"2.8\",\"86\":\"3.1\",\"87\":\"3.2\",\"88\":\"5.0\",\"89\":\"2.0\",\"90\":\"1.2\",\"91\":\"1.2\",\"92\":\"-3.1\",\"93\":\"-0.9\",\"94\":\"-0.7\",\"95\":\"-1.8\",\"96\":\"-0.8\",\"97\":\"-0.7\",\"98\":\"-0.2\",\"_rn_\":\"G\"},{\"1\":\"-2.1\",\"2\":\"3.0\",\"3\":\"2.2\",\"4\":\"3.0\",\"5\":\"4.3\",\"6\":\"3.6\",\"7\":\"3.9\",\"8\":\"4.1\",\"9\":\"1.9\",\"10\":\"-0.7\",\"11\":\"-2.6\",\"12\":\"-5.3\",\"13\":\"-7.8\",\"14\":\"-8.6\",\"15\":\"-12.1\",\"16\":\"-15.1\",\"17\":\"-16.1\",\"18\":\"-16.3\",\"19\":\"-13.9\",\"20\":\"-10.7\",\"21\":\"-8.8\",\"22\":\"-7.4\",\"23\":\"-4.2\",\"24\":\"-1.5\",\"25\":\"2.3\",\"26\":\"6.1\",\"27\":\"5.8\",\"28\":\"4.9\",\"29\":\"2.6\",\"30\":\"0.8\",\"31\":\"0.8\",\"32\":\"2.0\",\"33\":\"3.9\",\"34\":\"5.6\",\"35\":\"6.8\",\"36\":\"7.4\",\"37\":\"9.8\",\"38\":\"13.1\",\"39\":\"17.9\",\"40\":\"19.5\",\"41\":\"14.0\",\"42\":\"6.2\",\"43\":\"-2.1\",\"44\":\"-4.1\",\"45\":\"1.3\",\"46\":\"6.9\",\"47\":\"12.3\",\"48\":\"14.4\",\"49\":\"13.4\",\"50\":\"13.1\",\"51\":\"12.0\",\"52\":\"10.7\",\"53\":\"8.5\",\"54\":\"6.3\",\"55\":\"6.7\",\"56\":\"5.1\",\"57\":\"3.9\",\"58\":\"3.7\",\"59\":\"2.0\",\"60\":\"3.0\",\"61\":\"6.3\",\"62\":\"8.6\",\"63\":\"8.5\",\"64\":\"5.3\",\"65\":\"0.0\",\"66\":\"-4.5\",\"67\":\"-4.0\",\"68\":\"-0.9\",\"69\":\"0.7\",\"70\":\"1.3\",\"71\":\"-1.4\",\"72\":\"-5.0\",\"73\":\"-4.6\",\"74\":\"-3.1\",\"75\":\"1.3\",\"76\":\"5.4\",\"77\":\"6.9\",\"78\":\"7.4\",\"79\":\"4.8\",\"80\":\"1.3\",\"81\":\"-3.4\",\"82\":\"-7.0\",\"83\":\"-8.9\",\"84\":\"-8.8\",\"85\":\"-6.2\",\"86\":\"-3.0\",\"87\":\"-0.2\",\"88\":\"1.9\",\"89\":\"4.4\",\"90\":\"6.6\",\"91\":\"8.4\",\"92\":\"11.0\",\"93\":\"11.5\",\"94\":\"7.4\",\"95\":\"1.2\",\"96\":\"-4.4\",\"97\":\"-9.8\",\"98\":\"-9.2\",\"_rn_\":\"FBKF\"},{\"1\":\"-2.8\",\"2\":\"-2.7\",\"3\":\"-2.5\",\"4\":\"1.6\",\"5\":\"3.4\",\"6\":\"2.4\",\"7\":\"4.0\",\"8\":\"3.1\",\"9\":\"4.4\",\"10\":\"5.7\",\"11\":\"4.9\",\"12\":\"0.7\",\"13\":\"-1.5\",\"14\":\"-1.3\",\"15\":\"0.9\",\"16\":\"6.0\",\"17\":\"6.9\",\"18\":\"8.6\",\"19\":\"6.8\",\"20\":\"0.8\",\"21\":\"1.3\",\"22\":\"-1.2\",\"23\":\"-1.6\",\"24\":\"2.2\",\"25\":\"1.8\",\"26\":\"3.5\",\"27\":\"1.8\",\"28\":\"1.8\",\"29\":\"0.2\",\"30\":\"-1.6\",\"31\":\"0.7\",\"32\":\"0.9\",\"33\":\"3.1\",\"34\":\"5.1\",\"35\":\"4.8\",\"36\":\"7.1\",\"37\":\"9.0\",\"38\":\"9.2\",\"39\":\"11.7\",\"40\":\"7.2\",\"41\":\"1.2\",\"42\":\"-3.2\",\"43\":\"-9.2\",\"44\":\"-9.7\",\"45\":\"-6.4\",\"46\":\"-2.4\",\"47\":\"0.4\",\"48\":\"3.5\",\"49\":\"2.9\",\"50\":\"4.4\",\"51\":\"6.2\",\"52\":\"5.9\",\"53\":\"7.7\",\"54\":\"4.2\",\"55\":\"4.8\",\"56\":\"5.3\",\"57\":\"6.0\",\"58\":\"9.3\",\"59\":\"9.6\",\"60\":\"11.4\",\"61\":\"12.1\",\"62\":\"12.6\",\"63\":\"14.5\",\"64\":\"12.4\",\"65\":\"9.1\",\"66\":\"12.0\",\"67\":\"11.0\",\"68\":\"15.0\",\"69\":\"20.8\",\"70\":\"10.9\",\"71\":\"6.5\",\"72\":\"3.6\",\"73\":\"-1.0\",\"74\":\"5.4\",\"75\":\"9.2\",\"76\":\"7.5\",\"77\":\"11.6\",\"78\":\"10.9\",\"79\":\"12.9\",\"80\":\"17.8\",\"81\":\"13.7\",\"82\":\"10.4\",\"83\":\"5.7\",\"84\":\"2.0\",\"85\":\"1.0\",\"86\":\"2.6\",\"87\":\"4.9\",\"88\":\"6.1\",\"89\":\"10.9\",\"90\":\"13.6\",\"91\":\"11.0\",\"92\":\"6.6\",\"93\":\"1.0\",\"94\":\"-1.6\",\"95\":\"-0.4\",\"96\":\"0.6\",\"97\":\"7.0\",\"98\":\"11.2\",\"_rn_\":\"X\"},{\"1\":\"-1.8\",\"2\":\"2.9\",\"3\":\"1.1\",\"4\":\"2.4\",\"5\":\"5.3\",\"6\":\"5.7\",\"7\":\"8.3\",\"8\":\"9.6\",\"9\":\"7.9\",\"10\":\"6.0\",\"11\":\"6.7\",\"12\":\"4.0\",\"13\":\"0.2\",\"14\":\"-2.4\",\"15\":\"-10.3\",\"16\":\"-15.1\",\"17\":\"-18.2\",\"18\":\"-18.1\",\"19\":\"-14.2\",\"20\":\"-10.5\",\"21\":\"-5.2\",\"22\":\"-3.5\",\"23\":\"-2.3\",\"24\":\"-0.3\",\"25\":\"2.2\",\"26\":\"5.0\",\"27\":\"6.7\",\"28\":\"6.6\",\"29\":\"2.3\",\"30\":\"1.3\",\"31\":\"1.1\",\"32\":\"2.4\",\"33\":\"5.4\",\"34\":\"8.2\",\"35\":\"9.4\",\"36\":\"13.6\",\"37\":\"21.3\",\"38\":\"26.7\",\"39\":\"33.6\",\"40\":\"28.8\",\"41\":\"14.7\",\"42\":\"2.9\",\"43\":\"-7.6\",\"44\":\"-7.4\",\"45\":\"0.9\",\"46\":\"9.8\",\"47\":\"17.0\",\"48\":\"20.6\",\"49\":\"20.1\",\"50\":\"18.5\",\"51\":\"19.6\",\"52\":\"19.6\",\"53\":\"19.8\",\"54\":\"18.8\",\"55\":\"17.8\",\"56\":\"13.4\",\"57\":\"10.1\",\"58\":\"8.9\",\"59\":\"7.5\",\"60\":\"7.8\",\"61\":\"9.1\",\"62\":\"10.0\",\"63\":\"10.4\",\"64\":\"11.6\",\"65\":\"7.1\",\"66\":\"3.0\",\"67\":\"-0.5\",\"68\":\"-5.4\",\"69\":\"-6.7\",\"70\":\"-10.0\",\"71\":\"-13.3\",\"72\":\"-14.1\",\"73\":\"-13.1\",\"74\":\"-6.4\",\"75\":\"3.3\",\"76\":\"10.3\",\"77\":\"16.7\",\"78\":\"15.4\",\"79\":\"10.8\",\"80\":\"4.6\",\"81\":\"-5.4\",\"82\":\"-10.6\",\"83\":\"-15.1\",\"84\":\"-13.4\",\"85\":\"-8.9\",\"86\":\"-5.8\",\"87\":\"-0.1\",\"88\":\"0.0\",\"89\":\"4.5\",\"90\":\"10.6\",\"91\":\"14.6\",\"92\":\"24.1\",\"93\":\"24.2\",\"94\":\"15.8\",\"95\":\"5.6\",\"96\":\"-2.8\",\"97\":\"-7.1\",\"98\":\"-1.9\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nGDP LEVELS\nNOMINAL\n\n\ndygraph(gdps.ts[,\"nominal\"], main = \"Nominal GDP (Billions of Current BRL)\") %>%\ndySeries(label = \"Nominal GDP\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(gdps.ts[NROW(gdps), \"nominal\"]) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"Nominal GDP\":{\"axis\":\"y\"}},\"title\":\"Nominal GDP (Billions of Current BRL)\",\"labels\":[\"quarter\",\"Nominal GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":1652.95122,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[189.3232991,204.6107285,221.5132344,239.3163458,219.1170494,232.8895442,246.1784811,253.9041214,235.7007019,251.935879,258.0432856,256.6711527,250.6679939,268.708931,274.1255559,294.2079753,276.9269062,292.788558,308.8957999,320.4808068,312.4698199,323.7235598,332.5244457,347.0376424,342.2966672,367.3628246,379.7945316,399.3332317,397.2416388,418.9873369,439.3497816,462.3716391,444.7834882,481.7949605,505.2523184,525.9204459,499.7103627,535.5574179,552.8591552,582.4575677,554.2704654,581.9768561,617.847706,655.3548945,631.423006,670.6547043,691.8459238,726.3393037,712.0552451,769.5251557,812.602576,815.6201123,756.1271081,803.577516,852.8432512,920.4914801,886.3972937,944.1449471,997.9347416,1057.3700177,1016.5310829,1086.7126149,1112.334183,1160.8041193,1129.4723551,1183.124138,1230.4489206,1271.7145863,1241.6217624,1322.5874219,1354.1332243,1413.2765915,1385.9454277,1422.2883217,1462.1262662,1508.5929844,1456.836782,1480.1308584,1508.2197086,1550.599651,1499.4830766,1558.2855902,1577.2242587,1634.3350745,1589.2143868,1633.6513023,1647.6801174,1712.7731935,1657.8336504,1704.7023075,1736.9349982,1789.7051275,1725.680599,1795.8058442,1842.6995486,1892.7396,1803.4209524,1652.95122]]},\"evals\":[],\"jsHooks\":[]}\ndygraph(gdps.ts[,\"nominal.sum4\"], main = \"Nominal GDP AC4Q (Billions of Current BRL)\") %>%\ndySeries(label = \"Nominal GDP\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(gdps.ts[NROW(gdps), \"nominal.sum4\"]) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"Nominal GDP\":{\"axis\":\"y\"}},\"title\":\"Nominal GDP AC4Q (Billions of Current BRL)\",\"labels\":[\"quarter\",\"Nominal GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":7191.811321,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[null,null,null,854.7636078,884.5573581,912.8361738,937.5014205,952.0891961,968.6728486,987.7191834,999.5839879,1002.3510192,1017.3183112,1034.0913632,1050.1736335,1087.7104561,1113.9693684,1138.0489954,1172.8192394,1199.0920709,1234.6349846,1265.5699864,1289.1986322,1315.7554678,1345.5823151,1389.2215799,1436.4916658,1488.7872551,1543.7322267,1595.356739,1654.911989,1717.9503964,1765.4922458,1828.2998694,1894.2024062,1957.751213,2012.6780875,2066.4405449,2114.0473817,2170.5845035,2225.1446062,2271.5640444,2336.5525952,2409.449922,2486.6024626,2575.2803108,2649.2785286,2720.2629378,2800.8951769,2899.7656283,3020.5222805,3109.8030891,3153.8749521,3187.9273124,3228.1679876,3333.0393554,3463.309541,3603.8769721,3748.9684625,3885.8470001,4015.9807893,4158.5484571,4272.9478985,4376.3820001,4489.3232723,4585.7347954,4703.849533,4814.76,4926.9094073,5066.3726912,5190.0569949,5331.6190001,5475.9426654,5575.6435652,5683.6366071,5778.953,5849.8443543,5907.686891,5953.7803334,5995.787,6038.4332946,6116.5880264,6185.5925765,6269.328,6359.0593102,6434.4250223,6504.880881,6583.319,6651.9382636,6722.9892688,6812.2441496,6889.1760836,6957.0230322,7048.1265689,7153.8911193,7256.9255918,7334.6659452,7191.811321]]},\"evals\":[],\"jsHooks\":[]}\nREAL\n\n\ndygraph(gdps.ts[,\"index\"], main = \"GDP INDEX (1995=100)\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(gdps.ts[NROW(gdps), \"index\"]) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"GDP INDEX (1995=100)\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":149.4067,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[96.8397,100.1195,107.5618,104.3145,100.1328,104.8791,109.4885,108.2143,101.1417,106.4625,109.8778,106.662,101.9181,106.0358,109.2007,108.974,106.4032,110.2544,114.1853,113.9841,110.1009,112.8189,114.7119,113.3779,110.6259,115.4117,119.5008,119.2426,113.5764,116.3134,120.2491,119.9445,117.981,123.6507,128.136,127.3923,122.9177,129.1841,130.8461,130.132,128.1774,132.1337,136.7247,136.3721,134.8358,140.7717,144.7508,145.4268,143.1382,149.6911,154.8556,146.9224,139.6656,146.3934,153.0551,154.745,152.5276,158.8629,163.6269,163.549,160.4516,166.3302,169.4149,167.7489,163.1907,167.9709,173.6256,171.914,167.6319,174.727,178.4158,176.2601,173.4449,173.9641,177.2763,175.8623,170.6473,169.2063,169.7185,166.1358,161.8355,163.7235,165.5563,162.4568,162.466,165.1634,168.2627,166.326,164.8295,166.9025,170.8491,168.3599,165.808,168.6983,172.8921,171.1684,165.3915,149.4067]]},\"evals\":[],\"jsHooks\":[]}\ndygraph(gdps.ts[,\"index.sum4\"], main = \"GDP INDEX Mean of 4 Quarters (1995=100)\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyLimit( as.numeric(gdps.ts[NROW(gdps), \"index.sum4\"]) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"GDP INDEX Mean of 4 Quarters (1995=100)\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":164.714675,\"labelLoc\":\"left\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[null,null,null,102.208875,103.03215,104.22205,104.703725,105.678675,105.9309,106.32675,106.424075,106.036,106.2301,106.123425,105.95415,106.53215,107.653425,108.708075,109.954225,111.20675,112.131175,112.7723,112.90395,112.7524,112.88365,113.53185,114.729075,116.19525,116.932875,117.1583,117.345375,117.52085,118.622,120.456325,122.42805,124.29,125.524175,126.907525,127.58505,128.269975,129.5849,130.3223,131.79195,133.351975,135.016575,137.176075,139.1826,141.446275,143.521875,145.751725,148.277925,148.651825,147.783675,146.95925,146.509125,148.464775,151.680275,154.79765,157.4406,159.6416,161.6226,163.489425,164.936425,165.9864,166.671175,167.08135,168.134025,169.1753,170.2856,171.974625,173.172175,174.2587,175.71195,175.521225,175.23635,175.1369,174.4375,173.24805,171.3586,168.926975,166.724025,165.353325,164.312775,163.393025,163.55065,163.910625,164.587225,165.554525,166.1454,166.580175,167.226775,167.73525,167.979875,168.428825,168.939575,169.6417,169.537575,164.714675]]},\"evals\":[],\"jsHooks\":[]}\nGDP LEVELS TABLES\nNOMINAL (Millions of Current BRL)\n\n\npaged_table( gdp.table(gdp.nominal, type=\"level\" , period=\"qtr\", digits=0), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"125417\",\"2\":\"119691\",\"3\":\"59979\",\"4\":\"79682\",\"5\":\"90078\",\"6\":\"92218\",\"7\":\"50297\",\"8\":\"65452\",\"9\":\"93007\",\"10\":\"95645\",\"11\":\"49726\",\"12\":\"70215\",\"13\":\"84654\",\"14\":\"98376\",\"15\":\"54181\",\"16\":\"76339\",\"17\":\"88519\",\"18\":\"87615\",\"19\":\"47098\",\"20\":\"61121\",\"21\":\"72136\",\"22\":\"78612\",\"23\":\"44176\",\"24\":\"58877\",\"25\":\"72792\",\"26\":\"74130\",\"27\":\"45622\",\"28\":\"58678\",\"29\":\"65607\",\"30\":\"70383\",\"31\":\"39168\",\"32\":\"51699\",\"33\":\"55518\",\"34\":\"54309\",\"35\":\"33907\",\"36\":\"48551\",\"37\":\"53828\",\"38\":\"53738\",\"39\":\"33923\",\"40\":\"41884\",\"41\":\"40362\",\"42\":\"43763\",\"43\":\"29117\",\"44\":\"37986\",\"45\":\"40931\",\"46\":\"41178\",\"47\":\"22315\",\"48\":\"34035\",\"49\":\"43289\",\"50\":\"42413\",\"51\":\"23267\",\"52\":\"29821\",\"53\":\"32718\",\"54\":\"34346\",\"55\":\"22366\",\"56\":\"28662\",\"57\":\"26201\",\"58\":\"28065\",\"59\":\"19723\",\"60\":\"26472\",\"61\":\"27174\",\"62\":\"27589\",\"63\":\"16860\",\"64\":\"25124\",\"65\":\"34585\",\"66\":\"34343\",\"67\":\"20477\",\"68\":\"25418\",\"69\":\"29205\",\"70\":\"30850\",\"71\":\"16444\",\"72\":\"21463\",\"73\":\"21534\",\"74\":\"22074\",\"75\":\"13676\",\"76\":\"14694\",\"77\":\"17314\",\"78\":\"17485\",\"79\":\"10220\",\"80\":\"15178\",\"81\":\"15218\",\"82\":\"16347\",\"83\":\"11121\",\"84\":\"11736\",\"85\":\"13487\",\"86\":\"14190\",\"87\":\"8399\",\"88\":\"13143\",\"89\":\"14202\",\"90\":\"11869\",\"91\":\"9771\",\"92\":\"10871\",\"93\":\"11625\",\"94\":\"12338\",\"95\":\"8906\",\"96\":\"11096\",\"97\":\"10703\",\"98\":\"10054\",\"_rn_\":\"AGR\"},{\"1\":\"287544\",\"2\":\"305450\",\"3\":\"331673\",\"4\":\"351717\",\"5\":\"322471\",\"6\":\"294741\",\"7\":\"324920\",\"8\":\"330129\",\"9\":\"305344\",\"10\":\"288556\",\"11\":\"307160\",\"12\":\"311200\",\"13\":\"294577\",\"14\":\"283993\",\"15\":\"300425\",\"16\":\"302932\",\"17\":\"285838\",\"18\":\"261524\",\"19\":\"291238\",\"20\":\"307135\",\"21\":\"283762\",\"22\":\"278651\",\"23\":\"298667\",\"24\":\"315401\",\"25\":\"285775\",\"26\":\"283251\",\"27\":\"288964\",\"28\":\"301155\",\"29\":\"281667\",\"30\":\"259840\",\"31\":\"273383\",\"32\":\"280234\",\"33\":\"263933\",\"34\":\"248132\",\"35\":\"268614\",\"36\":\"263385\",\"37\":\"250399\",\"38\":\"228636\",\"39\":\"244769\",\"40\":\"245530\",\"41\":\"221147\",\"42\":\"192711\",\"43\":\"210476\",\"44\":\"192928\",\"45\":\"173009\",\"46\":\"152809\",\"47\":\"185152\",\"48\":\"204856\",\"49\":\"176613\",\"50\":\"151286\",\"51\":\"165884\",\"52\":\"166712\",\"53\":\"155432\",\"54\":\"141044\",\"55\":\"150251\",\"56\":\"149671\",\"57\":\"139270\",\"58\":\"128090\",\"59\":\"136160\",\"60\":\"135196\",\"61\":\"133729\",\"62\":\"119602\",\"63\":\"128183\",\"64\":\"127076\",\"65\":\"117825\",\"66\":\"102779\",\"67\":\"106561\",\"68\":\"105419\",\"69\":\"96082\",\"70\":\"88506\",\"71\":\"91116\",\"72\":\"85894\",\"73\":\"84313\",\"74\":\"73585\",\"75\":\"73153\",\"76\":\"75782\",\"77\":\"73981\",\"78\":\"74965\",\"79\":\"71932\",\"80\":\"71089\",\"81\":\"70463\",\"82\":\"62386\",\"83\":\"61915\",\"84\":\"61145\",\"85\":\"62478\",\"86\":\"51004\",\"87\":\"52759\",\"88\":\"58112\",\"89\":\"58383\",\"90\":\"52455\",\"91\":\"53320\",\"92\":\"57089\",\"93\":\"55636\",\"94\":\"49072\",\"95\":\"54631\",\"96\":\"49011\",\"97\":\"45839\",\"98\":\"41474\",\"_rn_\":\"IND\"},{\"1\":\"1064582\",\"2\":\"1113292\",\"3\":\"1222993\",\"4\":\"1151597\",\"5\":\"1128303\",\"6\":\"1087324\",\"7\":\"1153654\",\"8\":\"1087036\",\"9\":\"1065968\",\"10\":\"1034492\",\"11\":\"1100095\",\"12\":\"1038891\",\"13\":\"1038396\",\"14\":\"992483\",\"15\":\"1063306\",\"16\":\"988856\",\"17\":\"972770\",\"18\":\"937516\",\"19\":\"995599\",\"20\":\"929429\",\"21\":\"917925\",\"22\":\"892893\",\"23\":\"947239\",\"24\":\"893395\",\"25\":\"867578\",\"26\":\"831453\",\"27\":\"864503\",\"28\":\"803744\",\"29\":\"782557\",\"30\":\"731040\",\"31\":\"769112\",\"32\":\"710283\",\"33\":\"688921\",\"34\":\"659566\",\"35\":\"684710\",\"36\":\"633878\",\"37\":\"621996\",\"38\":\"578820\",\"39\":\"619144\",\"40\":\"562515\",\"41\":\"540506\",\"42\":\"516585\",\"43\":\"541953\",\"44\":\"500473\",\"45\":\"475784\",\"46\":\"453119\",\"47\":\"480117\",\"48\":\"448852\",\"49\":\"431586\",\"50\":\"405964\",\"51\":\"427928\",\"52\":\"392991\",\"53\":\"385915\",\"54\":\"363472\",\"55\":\"383363\",\"56\":\"349557\",\"57\":\"330663\",\"58\":\"313132\",\"59\":\"338331\",\"60\":\"308829\",\"61\":\"294768\",\"62\":\"275247\",\"63\":\"300358\",\"64\":\"274301\",\"65\":\"257771\",\"66\":\"242776\",\"67\":\"271114\",\"68\":\"247311\",\"69\":\"232389\",\"70\":\"217385\",\"71\":\"232315\",\"72\":\"217429\",\"73\":\"208326\",\"74\":\"195721\",\"75\":\"210722\",\"76\":\"192740\",\"77\":\"182907\",\"78\":\"173002\",\"79\":\"192653\",\"80\":\"178914\",\"81\":\"166882\",\"82\":\"160044\",\"83\":\"181938\",\"84\":\"164335\",\"85\":\"157083\",\"86\":\"151486\",\"87\":\"165189\",\"88\":\"156762\",\"89\":\"148554\",\"90\":\"142118\",\"91\":\"160615\",\"92\":\"148662\",\"93\":\"137028\",\"94\":\"130715\",\"95\":\"147001\",\"96\":\"134057\",\"97\":\"121690\",\"98\":\"112836\",\"_rn_\":\"SER\"},{\"1\":\"1477543\",\"2\":\"1538433\",\"3\":\"1614645\",\"4\":\"1582996\",\"5\":\"1540852\",\"6\":\"1474283\",\"7\":\"1528871\",\"8\":\"1482617\",\"9\":\"1464320\",\"10\":\"1418692\",\"11\":\"1456982\",\"12\":\"1420306\",\"13\":\"1417626\",\"14\":\"1374852\",\"15\":\"1417912\",\"16\":\"1368127\",\"17\":\"1347127\",\"18\":\"1286655\",\"19\":\"1333935\",\"20\":\"1297686\",\"21\":\"1273824\",\"22\":\"1250156\",\"23\":\"1290082\",\"24\":\"1267673\",\"25\":\"1226144\",\"26\":\"1188834\",\"27\":\"1199089\",\"28\":\"1163576\",\"29\":\"1129831\",\"30\":\"1061264\",\"31\":\"1081664\",\"32\":\"1042216\",\"33\":\"1008371\",\"34\":\"962008\",\"35\":\"987231\",\"36\":\"945813\",\"37\":\"926223\",\"38\":\"861194\",\"39\":\"897836\",\"40\":\"849929\",\"41\":\"802015\",\"42\":\"753060\",\"43\":\"781546\",\"44\":\"731387\",\"45\":\"689724\",\"46\":\"647106\",\"47\":\"687584\",\"48\":\"687743\",\"49\":\"651488\",\"50\":\"599663\",\"51\":\"617078\",\"52\":\"589524\",\"53\":\"574065\",\"54\":\"538861\",\"55\":\"555979\",\"56\":\"527890\",\"57\":\"496134\",\"58\":\"469287\",\"59\":\"494213\",\"60\":\"470496\",\"61\":\"455670\",\"62\":\"422438\",\"63\":\"445401\",\"64\":\"426501\",\"65\":\"410181\",\"66\":\"379899\",\"67\":\"398152\",\"68\":\"378148\",\"69\":\"357676\",\"70\":\"336741\",\"71\":\"339875\",\"72\":\"324786\",\"73\":\"314173\",\"74\":\"291380\",\"75\":\"297551\",\"76\":\"283216\",\"77\":\"274203\",\"78\":\"265452\",\"79\":\"274805\",\"80\":\"265181\",\"81\":\"252563\",\"82\":\"238777\",\"83\":\"254974\",\"84\":\"237216\",\"85\":\"233048\",\"86\":\"216680\",\"87\":\"226347\",\"88\":\"228016\",\"89\":\"221139\",\"90\":\"206441\",\"91\":\"223706\",\"92\":\"216623\",\"93\":\"204289\",\"94\":\"192125\",\"95\":\"210538\",\"96\":\"194164\",\"97\":\"178232\",\"98\":\"164363\",\"_rn_\":\"VAB\"},{\"1\":\"175408\",\"2\":\"264988\",\"3\":\"278095\",\"4\":\"259703\",\"5\":\"254954\",\"6\":\"251397\",\"7\":\"260834\",\"8\":\"254318\",\"9\":\"240382\",\"10\":\"239141\",\"11\":\"255791\",\"12\":\"227374\",\"13\":\"216025\",\"14\":\"214362\",\"15\":\"216423\",\"16\":\"209097\",\"17\":\"211158\",\"18\":\"212828\",\"19\":\"216664\",\"20\":\"210534\",\"21\":\"206307\",\"22\":\"206681\",\"23\":\"218511\",\"24\":\"194453\",\"25\":\"196144\",\"26\":\"197111\",\"27\":\"214187\",\"28\":\"190557\",\"29\":\"192756\",\"30\":\"180358\",\"31\":\"190051\",\"32\":\"188233\",\"33\":\"174753\",\"34\":\"167465\",\"35\":\"173573\",\"36\":\"166521\",\"37\":\"160490\",\"38\":\"155337\",\"39\":\"159534\",\"40\":\"148006\",\"41\":\"142130\",\"42\":\"133337\",\"43\":\"138945\",\"44\":\"121456\",\"45\":\"113854\",\"46\":\"109021\",\"47\":\"128036\",\"48\":\"124860\",\"49\":\"118037\",\"50\":\"112393\",\"51\":\"109261\",\"52\":\"102322\",\"53\":\"96590\",\"54\":\"92562\",\"55\":\"99376\",\"56\":\"89958\",\"57\":\"85843\",\"58\":\"84984\",\"59\":\"88244\",\"60\":\"82363\",\"61\":\"79887\",\"62\":\"77272\",\"63\":\"80519\",\"64\":\"78751\",\"65\":\"71613\",\"66\":\"64885\",\"67\":\"64220\",\"68\":\"61202\",\"69\":\"61311\",\"70\":\"60501\",\"71\":\"59459\",\"72\":\"55008\",\"73\":\"53190\",\"74\":\"50916\",\"75\":\"49487\",\"76\":\"49308\",\"77\":\"49521\",\"78\":\"47018\",\"79\":\"45675\",\"80\":\"43715\",\"81\":\"40225\",\"82\":\"38150\",\"83\":\"39234\",\"84\":\"36910\",\"85\":\"35661\",\"86\":\"33988\",\"87\":\"30324\",\"88\":\"30027\",\"89\":\"30797\",\"90\":\"29259\",\"91\":\"30198\",\"92\":\"29556\",\"93\":\"28600\",\"94\":\"26992\",\"95\":\"28778\",\"96\":\"27349\",\"97\":\"26378\",\"98\":\"24960\",\"_rn_\":\"TAX\"},{\"1\":\"1652951\",\"2\":\"1803421\",\"3\":\"1892740\",\"4\":\"1842700\",\"5\":\"1795806\",\"6\":\"1725681\",\"7\":\"1789705\",\"8\":\"1736935\",\"9\":\"1704702\",\"10\":\"1657834\",\"11\":\"1712773\",\"12\":\"1647680\",\"13\":\"1633651\",\"14\":\"1589214\",\"15\":\"1634335\",\"16\":\"1577224\",\"17\":\"1558286\",\"18\":\"1499483\",\"19\":\"1550600\",\"20\":\"1508220\",\"21\":\"1480131\",\"22\":\"1456837\",\"23\":\"1508593\",\"24\":\"1462126\",\"25\":\"1422288\",\"26\":\"1385945\",\"27\":\"1413277\",\"28\":\"1354133\",\"29\":\"1322587\",\"30\":\"1241622\",\"31\":\"1271715\",\"32\":\"1230449\",\"33\":\"1183124\",\"34\":\"1129472\",\"35\":\"1160804\",\"36\":\"1112334\",\"37\":\"1086713\",\"38\":\"1016531\",\"39\":\"1057370\",\"40\":\"997935\",\"41\":\"944145\",\"42\":\"886397\",\"43\":\"920491\",\"44\":\"852843\",\"45\":\"803578\",\"46\":\"756127\",\"47\":\"815620\",\"48\":\"812603\",\"49\":\"769525\",\"50\":\"712055\",\"51\":\"726339\",\"52\":\"691846\",\"53\":\"670655\",\"54\":\"631423\",\"55\":\"655355\",\"56\":\"617848\",\"57\":\"581977\",\"58\":\"554270\",\"59\":\"582458\",\"60\":\"552859\",\"61\":\"535557\",\"62\":\"499710\",\"63\":\"525920\",\"64\":\"505252\",\"65\":\"481795\",\"66\":\"444783\",\"67\":\"462372\",\"68\":\"439350\",\"69\":\"418987\",\"70\":\"397242\",\"71\":\"399333\",\"72\":\"379795\",\"73\":\"367363\",\"74\":\"342297\",\"75\":\"347038\",\"76\":\"332524\",\"77\":\"323724\",\"78\":\"312470\",\"79\":\"320481\",\"80\":\"308896\",\"81\":\"292789\",\"82\":\"276927\",\"83\":\"294208\",\"84\":\"274126\",\"85\":\"268709\",\"86\":\"250668\",\"87\":\"256671\",\"88\":\"258043\",\"89\":\"251936\",\"90\":\"235701\",\"91\":\"253904\",\"92\":\"246178\",\"93\":\"232890\",\"94\":\"219117\",\"95\":\"239316\",\"96\":\"221513\",\"97\":\"204611\",\"98\":\"189323\",\"_rn_\":\"GDP\"},{\"1\":\"1002720\",\"2\":\"1162204\",\"3\":\"1239127\",\"4\":\"1188423\",\"5\":\"1153132\",\"6\":\"1131694\",\"7\":\"1174457\",\"8\":\"1124224\",\"9\":\"1083063\",\"10\":\"1075834\",\"11\":\"1119097\",\"12\":\"1069721\",\"13\":\"1037002\",\"14\":\"1019279\",\"15\":\"1051459\",\"16\":\"1016044\",\"17\":\"986437\",\"18\":\"974196\",\"19\":\"1000264\",\"20\":\"959597\",\"21\":\"938674\",\"22\":\"936659\",\"23\":\"964168\",\"24\":\"912056\",\"25\":\"888373\",\"26\":\"873807\",\"27\":\"873571\",\"28\":\"833145\",\"29\":\"805989\",\"30\":\"777717\",\"31\":\"790458\",\"32\":\"753551\",\"33\":\"718125\",\"34\":\"694700\",\"35\":\"696968\",\"36\":\"668612\",\"37\":\"648649\",\"38\":\"623585\",\"39\":\"628476\",\"40\":\"596732\",\"41\":\"568567\",\"42\":\"546392\",\"43\":\"552152\",\"44\":\"534397\",\"45\":\"504220\",\"46\":\"474264\",\"47\":\"486816\",\"48\":\"480468\",\"49\":\"456473\",\"50\":\"433753\",\"51\":\"432652\",\"52\":\"410354\",\"53\":\"400751\",\"54\":\"384999\",\"55\":\"386663\",\"56\":\"368734\",\"57\":\"355817\",\"58\":\"345002\",\"59\":\"350104\",\"60\":\"332896\",\"61\":\"321752\",\"62\":\"308544\",\"63\":\"317821\",\"64\":\"301881\",\"65\":\"284833\",\"66\":\"274159\",\"67\":\"277306\",\"68\":\"267445\",\"69\":\"260277\",\"70\":\"257432\",\"71\":\"246172\",\"72\":\"233655\",\"73\":\"225796\",\"74\":\"215913\",\"75\":\"218362\",\"76\":\"211486\",\"77\":\"210284\",\"78\":\"203369\",\"79\":\"208493\",\"80\":\"200012\",\"81\":\"189996\",\"82\":\"176025\",\"83\":\"189576\",\"84\":\"178811\",\"85\":\"170252\",\"86\":\"164893\",\"87\":\"163187\",\"88\":\"163447\",\"89\":\"159194\",\"90\":\"157103\",\"91\":\"161954\",\"92\":\"157598\",\"93\":\"154447\",\"94\":\"147808\",\"95\":\"156087\",\"96\":\"142658\",\"97\":\"132511\",\"98\":\"125685\",\"_rn_\":\"C\"},{\"1\":\"370173\",\"2\":\"343521\",\"3\":\"423377\",\"4\":\"354891\",\"5\":\"360898\",\"6\":\"332726\",\"7\":\"394854\",\"8\":\"335827\",\"9\":\"339978\",\"10\":\"313027\",\"11\":\"376637\",\"12\":\"314363\",\"13\":\"333748\",\"14\":\"303010\",\"15\":\"377622\",\"16\":\"303261\",\"17\":\"312059\",\"18\":\"284703\",\"19\":\"341338\",\"20\":\"287922\",\"21\":\"290189\",\"22\":\"266326\",\"23\":\"320359\",\"24\":\"272878\",\"25\":\"269155\",\"26\":\"244482\",\"27\":\"301387\",\"28\":\"244366\",\"29\":\"247033\",\"30\":\"214489\",\"31\":\"266578\",\"32\":\"215553\",\"33\":\"215509\",\"34\":\"194540\",\"35\":\"241205\",\"36\":\"199027\",\"37\":\"199020\",\"38\":\"177786\",\"39\":\"222498\",\"40\":\"179940\",\"41\":\"172803\",\"42\":\"163726\",\"43\":\"196078\",\"44\":\"157480\",\"45\":\"150885\",\"46\":\"150521\",\"47\":\"172887\",\"48\":\"144805\",\"49\":\"139783\",\"50\":\"128394\",\"51\":\"152024\",\"52\":\"125131\",\"53\":\"123655\",\"54\":\"114489\",\"55\":\"140138\",\"56\":\"111875\",\"57\":\"105729\",\"58\":\"100992\",\"59\":\"125041\",\"60\":\"99485\",\"61\":\"95935\",\"62\":\"89562\",\"63\":\"109840\",\"64\":\"90362\",\"65\":\"84760\",\"66\":\"76588\",\"67\":\"96431\",\"68\":\"82553\",\"69\":\"78572\",\"70\":\"70185\",\"71\":\"88957\",\"72\":\"68751\",\"73\":\"71519\",\"74\":\"65697\",\"75\":\"80645\",\"76\":\"59988\",\"77\":\"58687\",\"78\":\"55190\",\"79\":\"68544\",\"80\":\"54588\",\"81\":\"52695\",\"82\":\"49216\",\"83\":\"60623\",\"84\":\"53944\",\"85\":\"51749\",\"86\":\"48863\",\"87\":\"55037\",\"88\":\"49839\",\"89\":\"49307\",\"90\":\"46994\",\"91\":\"52540\",\"92\":\"45830\",\"93\":\"45485\",\"94\":\"42139\",\"95\":\"52324\",\"96\":\"41810\",\"97\":\"39023\",\"98\":\"35666\",\"_rn_\":\"G\"},{\"1\":\"247452\",\"2\":\"285059\",\"3\":\"280576\",\"4\":\"299569\",\"5\":\"275238\",\"6\":\"259038\",\"7\":\"272350\",\"8\":\"283541\",\"9\":\"250815\",\"10\":\"242958\",\"11\":\"249801\",\"12\":\"245497\",\"13\":\"233098\",\"14\":\"230383\",\"15\":\"238080\",\"16\":\"246617\",\"17\":\"247878\",\"18\":\"240696\",\"19\":\"254802\",\"20\":\"270305\",\"21\":\"266994\",\"22\":\"277296\",\"23\":\"288988\",\"24\":\"289656\",\"25\":\"282410\",\"26\":\"287399\",\"27\":\"287438\",\"28\":\"291365\",\"29\":\"279534\",\"30\":\"256607\",\"31\":\"260349\",\"32\":\"259597\",\"33\":\"244240\",\"34\":\"233275\",\"35\":\"233842\",\"36\":\"237137\",\"37\":\"220962\",\"38\":\"209987\",\"39\":\"211755\",\"40\":\"214814\",\"41\":\"193393\",\"42\":\"177984\",\"43\":\"181988\",\"44\":\"172382\",\"45\":\"147362\",\"46\":\"134945\",\"47\":\"153856\",\"48\":\"168886\",\"49\":\"147733\",\"50\":\"132371\",\"51\":\"131177\",\"52\":\"129921\",\"53\":\"119167\",\"54\":\"109267\",\"55\":\"108850\",\"56\":\"108368\",\"57\":\"100733\",\"58\":\"96723\",\"59\":\"95462\",\"60\":\"96634\",\"61\":\"92729\",\"62\":\"85394\",\"63\":\"88268\",\"64\":\"90684\",\"65\":\"83337\",\"66\":\"76797\",\"67\":\"74519\",\"68\":\"71785\",\"69\":\"68696\",\"70\":\"70262\",\"71\":\"70596\",\"72\":\"67912\",\"73\":\"65569\",\"74\":\"62806\",\"75\":\"58153\",\"76\":\"60427\",\"77\":\"62067\",\"78\":\"61689\",\"79\":\"54811\",\"80\":\"53879\",\"81\":\"53911\",\"82\":\"56887\",\"83\":\"47432\",\"84\":\"46383\",\"85\":\"47152\",\"86\":\"44121\",\"87\":\"44249\",\"88\":\"47636\",\"89\":\"48379\",\"90\":\"45595\",\"91\":\"45894\",\"92\":\"47287\",\"93\":\"46189\",\"94\":\"42697\",\"95\":\"43187\",\"96\":\"41418\",\"97\":\"39326\",\"98\":\"35403\",\"_rn_\":\"FBKF\"},{\"1\":\"-27432\",\"2\":\"27685\",\"3\":\"-43973\",\"4\":\"19843\",\"5\":\"-2848\",\"6\":\"9294\",\"7\":\"-61243\",\"8\":\"-3724\",\"9\":\"10074\",\"10\":\"26852\",\"11\":\"-30258\",\"12\":\"7913\",\"13\":\"-1457\",\"14\":\"28188\",\"15\":\"-34668\",\"16\":\"3001\",\"17\":\"-3466\",\"18\":\"352\",\"19\":\"-47216\",\"20\":\"-2498\",\"21\":\"-648\",\"22\":\"24929\",\"23\":\"-17765\",\"24\":\"20314\",\"25\":\"9808\",\"26\":\"26673\",\"27\":\"-22456\",\"28\":\"17266\",\"29\":\"15107\",\"30\":\"31768\",\"31\":\"-22172\",\"32\":\"11259\",\"33\":\"19678\",\"34\":\"24963\",\"35\":\"-620\",\"36\":\"12050\",\"37\":\"24041\",\"38\":\"17803\",\"39\":\"2111\",\"40\":\"19071\",\"41\":\"15269\",\"42\":\"12769\",\"43\":\"-601\",\"44\":\"-8458\",\"45\":\"-3884\",\"46\":\"2750\",\"47\":\"2760\",\"48\":\"17305\",\"49\":\"25906\",\"50\":\"23504\",\"51\":\"4466\",\"52\":\"16545\",\"53\":\"15017\",\"54\":\"13577\",\"55\":\"2824\",\"56\":\"6820\",\"57\":\"6668\",\"58\":\"-1707\",\"59\":\"-6777\",\"60\":\"1882\",\"61\":\"7349\",\"62\":\"773\",\"63\":\"-4763\",\"64\":\"1330\",\"65\":\"9433\",\"66\":\"5596\",\"67\":\"3021\",\"68\":\"5204\",\"69\":\"1755\",\"70\":\"-5652\",\"71\":\"-16499\",\"72\":\"-235\",\"73\":\"7826\",\"74\":\"1804\",\"75\":\"-4158\",\"76\":\"6445\",\"77\":\"426\",\"78\":\"1547\",\"79\":\"-61\",\"80\":\"6805\",\"81\":\"931\",\"82\":\"-497\",\"83\":\"3434\",\"84\":\"312\",\"85\":\"3829\",\"86\":\"-3515\",\"87\":\"1743\",\"88\":\"3701\",\"89\":\"-853\",\"90\":\"-8376\",\"91\":\"374\",\"92\":\"2106\",\"93\":\"-8063\",\"94\":\"-7355\",\"95\":\"-4417\",\"96\":\"994\",\"97\":\"-3355\",\"98\":\"-4964\",\"_rn_\":\"DE\"},{\"1\":\"324329\",\"2\":\"265798\",\"3\":\"270205\",\"4\":\"272964\",\"5\":\"263380\",\"6\":\"232818\",\"7\":\"276019\",\"8\":\"288461\",\"9\":\"248939\",\"10\":\"212359\",\"11\":\"205392\",\"12\":\"210486\",\"13\":\"216250\",\"14\":\"192305\",\"15\":\"185194\",\"16\":\"192893\",\"17\":\"208118\",\"18\":\"195372\",\"19\":\"217639\",\"20\":\"212638\",\"21\":\"189846\",\"22\":\"153344\",\"23\":\"158168\",\"24\":\"171655\",\"25\":\"162060\",\"26\":\"144492\",\"27\":\"174627\",\"28\":\"169810\",\"29\":\"156293\",\"30\":\"125321\",\"31\":\"153034\",\"32\":\"153303\",\"33\":\"146496\",\"34\":\"119043\",\"35\":\"141072\",\"36\":\"137086\",\"37\":\"124993\",\"38\":\"103744\",\"39\":\"115900\",\"40\":\"114225\",\"41\":\"105294\",\"42\":\"86801\",\"43\":\"87460\",\"44\":\"92906\",\"45\":\"93900\",\"46\":\"87415\",\"47\":\"126594\",\"48\":\"115435\",\"49\":\"98393\",\"50\":\"80459\",\"51\":\"92083\",\"52\":\"95807\",\"53\":\"89585\",\"54\":\"85074\",\"55\":\"91941\",\"56\":\"98608\",\"57\":\"79742\",\"58\":\"76051\",\"59\":\"83006\",\"60\":\"88087\",\"61\":\"82694\",\"62\":\"77093\",\"63\":\"84321\",\"64\":\"90341\",\"65\":\"82950\",\"66\":\"66313\",\"67\":\"68852\",\"68\":\"66754\",\"69\":\"62162\",\"70\":\"63031\",\"71\":\"72262\",\"72\":\"65894\",\"73\":\"38896\",\"74\":\"34812\",\"75\":\"42667\",\"76\":\"45701\",\"77\":\"40837\",\"78\":\"33576\",\"79\":\"31756\",\"80\":\"33768\",\"81\":\"30239\",\"82\":\"26402\",\"83\":\"29511\",\"84\":\"27646\",\"85\":\"24728\",\"86\":\"22153\",\"87\":\"16781\",\"88\":\"18786\",\"89\":\"18805\",\"90\":\"16099\",\"91\":\"17398\",\"92\":\"18529\",\"93\":\"17402\",\"94\":\"13162\",\"95\":\"15085\",\"96\":\"15560\",\"97\":\"14576\",\"98\":\"12306\",\"_rn_\":\"X\"},{\"1\":\"264291\",\"2\":\"280847\",\"3\":\"276573\",\"4\":\"292990\",\"5\":\"253994\",\"6\":\"239888\",\"7\":\"266732\",\"8\":\"291393\",\"9\":\"228166\",\"10\":\"213196\",\"11\":\"207896\",\"12\":\"200301\",\"13\":\"184990\",\"14\":\"183950\",\"15\":\"183351\",\"16\":\"184593\",\"17\":\"192740\",\"18\":\"195836\",\"19\":\"216227\",\"20\":\"219745\",\"21\":\"204925\",\"22\":\"201717\",\"23\":\"205325\",\"24\":\"204433\",\"25\":\"189517\",\"26\":\"190908\",\"27\":\"201291\",\"28\":\"201819\",\"29\":\"181369\",\"30\":\"164280\",\"31\":\"176532\",\"32\":\"162814\",\"33\":\"160923\",\"34\":\"137048\",\"35\":\"151662\",\"36\":\"141579\",\"37\":\"130951\",\"38\":\"116374\",\"39\":\"123369\",\"40\":\"126847\",\"41\":\"111182\",\"42\":\"101274\",\"43\":\"96585\",\"44\":\"95863\",\"45\":\"88904\",\"46\":\"93767\",\"47\":\"127292\",\"48\":\"114297\",\"49\":\"98761\",\"50\":\"86426\",\"51\":\"86063\",\"52\":\"85912\",\"53\":\"77520\",\"54\":\"75983\",\"55\":\"75060\",\"56\":\"76558\",\"57\":\"66712\",\"58\":\"62790\",\"59\":\"64378\",\"60\":\"66125\",\"61\":\"64902\",\"62\":\"61656\",\"63\":\"69567\",\"64\":\"69346\",\"65\":\"63518\",\"66\":\"54670\",\"67\":\"57759\",\"68\":\"54391\",\"69\":\"52474\",\"70\":\"58016\",\"71\":\"62154\",\"72\":\"56182\",\"73\":\"42244\",\"74\":\"38735\",\"75\":\"48633\",\"76\":\"51523\",\"77\":\"48577\",\"78\":\"42902\",\"79\":\"43062\",\"80\":\"40155\",\"81\":\"34983\",\"82\":\"31107\",\"83\":\"36368\",\"84\":\"32971\",\"85\":\"29001\",\"86\":\"25847\",\"87\":\"24326\",\"88\":\"25366\",\"89\":\"22896\",\"90\":\"21714\",\"91\":\"24255\",\"92\":\"25171\",\"93\":\"22570\",\"94\":\"19333\",\"95\":\"22949\",\"96\":\"20928\",\"97\":\"17470\",\"98\":\"14773\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nSIDRA TABLE\nREAL (Milliions of 1995 Chained BRL)\n\n\npaged_table( gdp.table(gdp.real, type=\"ret4\" , period=\"qtr\", digits=0), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"23184\",\"2\":\"25137\",\"3\":\"13754\",\"4\":\"19674\",\"5\":\"22906\",\"6\":\"24667\",\"7\":\"13694\",\"8\":\"19276\",\"9\":\"22583\",\"10\":\"24449\",\"11\":\"13026\",\"12\":\"18375\",\"13\":\"22401\",\"14\":\"25120\",\"15\":\"12337\",\"16\":\"16639\",\"17\":\"19295\",\"18\":\"20866\",\"19\":\"12572\",\"20\":\"17409\",\"21\":\"20376\",\"22\":\"22591\",\"23\":\"12575\",\"24\":\"17447\",\"25\":\"19500\",\"26\":\"21086\",\"27\":\"12236\",\"28\":\"17265\",\"29\":\"19464\",\"30\":\"19726\",\"31\":\"11747\",\"32\":\"17741\",\"33\":\"17669\",\"34\":\"16234\",\"35\":\"12483\",\"36\":\"16939\",\"37\":\"17698\",\"38\":\"18287\",\"39\":\"11259\",\"40\":\"15732\",\"41\":\"17571\",\"42\":\"17355\",\"43\":\"10919\",\"44\":\"14906\",\"45\":\"15965\",\"46\":\"16239\",\"47\":\"10796\",\"48\":\"16114\",\"49\":\"16897\",\"50\":\"16470\",\"51\":\"10708\",\"52\":\"15345\",\"53\":\"15214\",\"54\":\"15722\",\"55\":\"10276\",\"56\":\"14659\",\"57\":\"15123\",\"58\":\"15137\",\"59\":\"9320\",\"60\":\"13193\",\"61\":\"15174\",\"62\":\"15062\",\"63\":\"9283\",\"64\":\"13463\",\"65\":\"14821\",\"66\":\"14598\",\"67\":\"9142\",\"68\":\"12876\",\"69\":\"14529\",\"70\":\"14596\",\"71\":\"9072\",\"72\":\"12690\",\"73\":\"12809\",\"74\":\"12651\",\"75\":\"8339\",\"76\":\"11362\",\"77\":\"11932\",\"78\":\"12082\",\"79\":\"7508\",\"80\":\"10722\",\"81\":\"11581\",\"82\":\"11743\",\"83\":\"7633\",\"84\":\"10564\",\"85\":\"11195\",\"86\":\"11061\",\"87\":\"6923\",\"88\":\"10208\",\"89\":\"11018\",\"90\":\"9825\",\"91\":\"7310\",\"92\":\"9703\",\"93\":\"9744\",\"94\":\"9966\",\"95\":\"8216\",\"96\":\"9562\",\"97\":\"9332\",\"98\":\"9316\",\"_rn_\":\"AGR\"},{\"1\":\"47231\",\"2\":\"51826\",\"3\":\"55865\",\"4\":\"57904\",\"5\":\"54093\",\"6\":\"51889\",\"7\":\"55059\",\"8\":\"57351\",\"9\":\"53939\",\"10\":\"52406\",\"11\":\"55354\",\"12\":\"56879\",\"13\":\"53481\",\"14\":\"51871\",\"15\":\"54038\",\"16\":\"57091\",\"17\":\"54697\",\"18\":\"52854\",\"19\":\"55986\",\"20\":\"59122\",\"21\":\"56926\",\"22\":\"57108\",\"23\":\"61079\",\"24\":\"62729\",\"25\":\"59771\",\"26\":\"59573\",\"27\":\"62527\",\"28\":\"65039\",\"29\":\"61964\",\"30\":\"57345\",\"31\":\"60913\",\"32\":\"63228\",\"33\":\"59324\",\"34\":\"58175\",\"35\":\"61783\",\"36\":\"63520\",\"37\":\"61278\",\"38\":\"56819\",\"39\":\"60661\",\"40\":\"61099\",\"41\":\"58292\",\"42\":\"53730\",\"43\":\"57545\",\"44\":\"56407\",\"45\":\"51588\",\"46\":\"46597\",\"47\":\"54460\",\"48\":\"59853\",\"49\":\"56056\",\"50\":\"52236\",\"51\":\"55760\",\"52\":\"56059\",\"53\":\"53266\",\"54\":\"48754\",\"55\":\"53126\",\"56\":\"52415\",\"57\":\"48981\",\"58\":\"46820\",\"59\":\"51038\",\"60\":\"51115\",\"61\":\"49907\",\"62\":\"45321\",\"63\":\"50915\",\"64\":\"51688\",\"65\":\"47426\",\"66\":\"43493\",\"67\":\"47287\",\"68\":\"47493\",\"69\":\"43545\",\"70\":\"40505\",\"71\":\"47134\",\"72\":\"46605\",\"73\":\"44430\",\"74\":\"40477\",\"75\":\"43164\",\"76\":\"44071\",\"77\":\"43424\",\"78\":\"41441\",\"79\":\"44913\",\"80\":\"45257\",\"81\":\"43239\",\"82\":\"39804\",\"83\":\"42899\",\"84\":\"43331\",\"85\":\"41602\",\"86\":\"38061\",\"87\":\"42157\",\"88\":\"44910\",\"89\":\"43525\",\"90\":\"39745\",\"91\":\"44446\",\"92\":\"46160\",\"93\":\"43648\",\"94\":\"39719\",\"95\":\"41760\",\"96\":\"46061\",\"97\":\"40402\",\"98\":\"38457\",\"_rn_\":\"IND\"},{\"1\":\"159726\",\"2\":\"175789\",\"3\":\"186025\",\"4\":\"183639\",\"5\":\"179811\",\"6\":\"176587\",\"7\":\"183027\",\"8\":\"181755\",\"9\":\"177764\",\"10\":\"174549\",\"11\":\"180949\",\"12\":\"179260\",\"13\":\"175521\",\"14\":\"170922\",\"15\":\"177024\",\"16\":\"176648\",\"17\":\"174814\",\"18\":\"172798\",\"19\":\"180354\",\"20\":\"179562\",\"21\":\"178705\",\"22\":\"178594\",\"23\":\"187988\",\"24\":\"185876\",\"25\":\"182744\",\"26\":\"180765\",\"27\":\"187647\",\"28\":\"185153\",\"29\":\"181545\",\"30\":\"175832\",\"31\":\"183231\",\"32\":\"180214\",\"33\":\"176093\",\"34\":\"171071\",\"35\":\"176691\",\"36\":\"174480\",\"37\":\"171955\",\"38\":\"167436\",\"39\":\"173084\",\"40\":\"169699\",\"41\":\"164788\",\"42\":\"159911\",\"43\":\"164380\",\"44\":\"160510\",\"45\":\"155422\",\"46\":\"150557\",\"47\":\"156366\",\"48\":\"158276\",\"49\":\"154362\",\"50\":\"149090\",\"51\":\"153098\",\"52\":\"149024\",\"53\":\"145925\",\"54\":\"141602\",\"55\":\"144090\",\"56\":\"141424\",\"57\":\"137676\",\"58\":\"133994\",\"59\":\"137931\",\"60\":\"135513\",\"61\":\"132518\",\"62\":\"128091\",\"63\":\"134631\",\"64\":\"130884\",\"65\":\"127145\",\"66\":\"122535\",\"67\":\"127191\",\"68\":\"124394\",\"69\":\"120435\",\"70\":\"118597\",\"71\":\"126150\",\"72\":\"123812\",\"73\":\"119373\",\"74\":\"116465\",\"75\":\"121730\",\"76\":\"119741\",\"77\":\"116478\",\"78\":\"113142\",\"79\":\"120514\",\"80\":\"117702\",\"81\":\"112886\",\"82\":\"110464\",\"83\":\"115272\",\"84\":\"112829\",\"85\":\"109264\",\"86\":\"107103\",\"87\":\"112995\",\"88\":\"111838\",\"89\":\"107469\",\"90\":\"104221\",\"91\":\"112255\",\"92\":\"109863\",\"93\":\"105502\",\"94\":\"102784\",\"95\":\"107248\",\"96\":\"108484\",\"97\":\"103181\",\"98\":\"100853\",\"_rn_\":\"SER\"},{\"1\":\"227213\",\"2\":\"249664\",\"3\":\"256804\",\"4\":\"260186\",\"5\":\"254590\",\"6\":\"250234\",\"7\":\"252714\",\"8\":\"257385\",\"9\":\"252169\",\"10\":\"248606\",\"11\":\"249454\",\"12\":\"253494\",\"13\":\"249646\",\"14\":\"245572\",\"15\":\"244108\",\"16\":\"249776\",\"17\":\"247363\",\"18\":\"244554\",\"19\":\"249314\",\"20\":\"255338\",\"21\":\"254433\",\"22\":\"256160\",\"23\":\"261942\",\"24\":\"265471\",\"25\":\"260883\",\"26\":\"259970\",\"27\":\"262905\",\"28\":\"267136\",\"29\":\"261943\",\"30\":\"251471\",\"31\":\"256396\",\"32\":\"260695\",\"33\":\"252256\",\"34\":\"244940\",\"35\":\"251648\",\"36\":\"254797\",\"37\":\"250374\",\"38\":\"241378\",\"39\":\"245652\",\"40\":\"246419\",\"41\":\"240022\",\"42\":\"230088\",\"43\":\"233473\",\"44\":\"231645\",\"45\":\"222190\",\"46\":\"212126\",\"47\":\"222256\",\"48\":\"234183\",\"49\":\"226787\",\"50\":\"217081\",\"51\":\"220487\",\"52\":\"220337\",\"53\":\"214078\",\"54\":\"205182\",\"55\":\"208172\",\"56\":\"208350\",\"57\":\"201210\",\"58\":\"195208\",\"59\":\"198373\",\"60\":\"199919\",\"61\":\"197625\",\"62\":\"188121\",\"63\":\"194852\",\"64\":\"196310\",\"65\":\"189445\",\"66\":\"180492\",\"67\":\"183740\",\"68\":\"184814\",\"69\":\"178368\",\"70\":\"173430\",\"71\":\"182752\",\"72\":\"183086\",\"73\":\"176496\",\"74\":\"169287\",\"75\":\"173502\",\"76\":\"175196\",\"77\":\"171791\",\"78\":\"166540\",\"79\":\"173514\",\"80\":\"173765\",\"81\":\"167611\",\"82\":\"161899\",\"83\":\"166149\",\"84\":\"166741\",\"85\":\"162014\",\"86\":\"156302\",\"87\":\"162424\",\"88\":\"166900\",\"89\":\"161855\",\"90\":\"153829\",\"91\":\"164180\",\"92\":\"165600\",\"93\":\"158775\",\"94\":\"152448\",\"95\":\"157224\",\"96\":\"164107\",\"97\":\"152915\",\"98\":\"148626\",\"_rn_\":\"VAB\"},{\"1\":\"35907\",\"2\":\"41624\",\"3\":\"44666\",\"4\":\"44318\",\"5\":\"42527\",\"6\":\"41793\",\"7\":\"43851\",\"8\":\"43522\",\"9\":\"41754\",\"10\":\"41686\",\"11\":\"43568\",\"12\":\"42861\",\"13\":\"41193\",\"14\":\"40517\",\"15\":\"42055\",\"16\":\"41788\",\"17\":\"40953\",\"18\":\"40434\",\"19\":\"43359\",\"20\":\"43585\",\"21\":\"43600\",\"22\":\"44453\",\"23\":\"47982\",\"24\":\"46893\",\"25\":\"45632\",\"26\":\"45634\",\"27\":\"47669\",\"28\":\"47239\",\"29\":\"45933\",\"30\":\"43904\",\"31\":\"46492\",\"32\":\"45252\",\"33\":\"43728\",\"34\":\"42617\",\"35\":\"43929\",\"36\":\"43742\",\"37\":\"42737\",\"38\":\"41367\",\"39\":\"42540\",\"40\":\"41933\",\"41\":\"39961\",\"42\":\"38718\",\"43\":\"39175\",\"44\":\"38104\",\"45\":\"35887\",\"46\":\"34106\",\"47\":\"36680\",\"48\":\"38728\",\"49\":\"37054\",\"50\":\"35227\",\"51\":\"35832\",\"52\":\"34884\",\"53\":\"34105\",\"54\":\"32550\",\"55\":\"32347\",\"56\":\"32743\",\"57\":\"31768\",\"58\":\"30798\",\"59\":\"31099\",\"60\":\"30877\",\"61\":\"30275\",\"62\":\"28736\",\"63\":\"29890\",\"64\":\"29776\",\"65\":\"28728\",\"66\":\"27650\",\"67\":\"27890\",\"68\":\"27423\",\"69\":\"26877\",\"70\":\"26900\",\"71\":\"27645\",\"72\":\"27761\",\"73\":\"27106\",\"74\":\"25883\",\"75\":\"26465\",\"76\":\"27117\",\"77\":\"27171\",\"78\":\"27604\",\"79\":\"27500\",\"80\":\"27604\",\"81\":\"26825\",\"82\":\"25746\",\"83\":\"26100\",\"84\":\"25865\",\"85\":\"24992\",\"86\":\"23339\",\"87\":\"25779\",\"88\":\"27058\",\"89\":\"26046\",\"90\":\"24670\",\"91\":\"26886\",\"92\":\"27768\",\"93\":\"26438\",\"94\":\"24295\",\"95\":\"26889\",\"96\":\"25737\",\"97\":\"23793\",\"98\":\"22294\",\"_rn_\":\"TAX\"},{\"1\":\"263700\",\"2\":\"291912\",\"3\":\"302109\",\"4\":\"305151\",\"5\":\"297749\",\"6\":\"292648\",\"7\":\"297152\",\"8\":\"301545\",\"9\":\"294579\",\"10\":\"290920\",\"11\":\"293562\",\"12\":\"296980\",\"13\":\"291510\",\"14\":\"286749\",\"15\":\"286733\",\"16\":\"292203\",\"17\":\"288969\",\"18\":\"285636\",\"19\":\"293226\",\"20\":\"299549\",\"21\":\"298646\",\"22\":\"301189\",\"23\":\"310393\",\"24\":\"312889\",\"25\":\"307043\",\"26\":\"306127\",\"27\":\"311095\",\"28\":\"314900\",\"29\":\"308389\",\"30\":\"295867\",\"31\":\"303425\",\"32\":\"306446\",\"33\":\"296465\",\"34\":\"288028\",\"35\":\"296073\",\"36\":\"299014\",\"37\":\"293569\",\"38\":\"283194\",\"39\":\"288661\",\"40\":\"288798\",\"41\":\"280390\",\"42\":\"269208\",\"43\":\"273122\",\"44\":\"270139\",\"45\":\"258381\",\"46\":\"246507\",\"47\":\"259315\",\"48\":\"273317\",\"49\":\"264202\",\"50\":\"252636\",\"51\":\"256675\",\"52\":\"255482\",\"53\":\"248459\",\"54\":\"237982\",\"55\":\"240694\",\"56\":\"241316\",\"57\":\"233213\",\"58\":\"226230\",\"59\":\"229680\",\"60\":\"230941\",\"61\":\"228007\",\"62\":\"216947\",\"63\":\"224845\",\"64\":\"226157\",\"65\":\"218241\",\"66\":\"208234\",\"67\":\"211700\",\"68\":\"212237\",\"69\":\"205291\",\"70\":\"200460\",\"71\":\"210461\",\"72\":\"210916\",\"73\":\"203699\",\"74\":\"195252\",\"75\":\"200110\",\"76\":\"202464\",\"77\":\"199123\",\"78\":\"194326\",\"79\":\"201180\",\"80\":\"201535\",\"81\":\"194597\",\"82\":\"187799\",\"83\":\"192337\",\"84\":\"192737\",\"85\":\"187151\",\"86\":\"179883\",\"87\":\"188256\",\"88\":\"193932\",\"89\":\"187904\",\"90\":\"178513\",\"91\":\"190996\",\"92\":\"193245\",\"93\":\"185109\",\"94\":\"176732\",\"95\":\"184113\",\"96\":\"189844\",\"97\":\"176709\",\"98\":\"170920\",\"_rn_\":\"GDP\"},{\"1\":\"173102\",\"2\":\"197615\",\"3\":\"213491\",\"4\":\"206098\",\"5\":\"200046\",\"6\":\"199059\",\"7\":\"209185\",\"8\":\"202248\",\"9\":\"196451\",\"10\":\"196050\",\"11\":\"206261\",\"12\":\"199075\",\"13\":\"192899\",\"14\":\"189510\",\"15\":\"199079\",\"16\":\"193067\",\"17\":\"189873\",\"18\":\"190447\",\"19\":\"203928\",\"20\":\"198758\",\"21\":\"198803\",\"22\":\"201802\",\"23\":\"216831\",\"24\":\"206859\",\"25\":\"203223\",\"26\":\"203074\",\"27\":\"210895\",\"28\":\"204598\",\"29\":\"200152\",\"30\":\"196075\",\"31\":\"205695\",\"32\":\"197728\",\"33\":\"192241\",\"34\":\"188826\",\"35\":\"196280\",\"36\":\"190260\",\"37\":\"188065\",\"38\":\"183360\",\"39\":\"191414\",\"40\":\"183015\",\"41\":\"176377\",\"42\":\"172317\",\"43\":\"179186\",\"44\":\"173837\",\"45\":\"167343\",\"46\":\"160352\",\"47\":\"167540\",\"48\":\"166399\",\"49\":\"160955\",\"50\":\"156783\",\"51\":\"161858\",\"52\":\"153564\",\"53\":\"150377\",\"54\":\"146310\",\"55\":\"151063\",\"56\":\"145156\",\"57\":\"141634\",\"58\":\"137566\",\"59\":\"143694\",\"60\":\"137862\",\"61\":\"133875\",\"62\":\"131105\",\"63\":\"139083\",\"64\":\"132070\",\"65\":\"127754\",\"66\":\"124485\",\"67\":\"130447\",\"68\":\"125917\",\"69\":\"123902\",\"70\":\"123366\",\"71\":\"129682\",\"72\":\"126845\",\"73\":\"126482\",\"74\":\"123388\",\"75\":\"127605\",\"76\":\"123497\",\"77\":\"125609\",\"78\":\"123094\",\"79\":\"130011\",\"80\":\"125793\",\"81\":\"121842\",\"82\":\"118332\",\"83\":\"124909\",\"84\":\"120091\",\"85\":\"116884\",\"86\":\"114870\",\"87\":\"121169\",\"88\":\"120234\",\"89\":\"117598\",\"90\":\"115956\",\"91\":\"122785\",\"92\":\"120195\",\"93\":\"118882\",\"94\":\"116540\",\"95\":\"126373\",\"96\":\"117771\",\"97\":\"112161\",\"98\":\"108013\",\"_rn_\":\"C\"},{\"1\":\"50037\",\"2\":\"52774\",\"3\":\"55863\",\"4\":\"54446\",\"5\":\"54727\",\"6\":\"52772\",\"7\":\"55678\",\"8\":\"55226\",\"9\":\"55106\",\"10\":\"52752\",\"11\":\"56210\",\"12\":\"54623\",\"13\":\"54705\",\"14\":\"52437\",\"15\":\"55999\",\"16\":\"55052\",\"17\":\"55170\",\"18\":\"53227\",\"19\":\"55711\",\"20\":\"55073\",\"21\":\"54888\",\"22\":\"53314\",\"23\":\"56797\",\"24\":\"56071\",\"25\":\"55795\",\"26\":\"53514\",\"27\":\"57330\",\"28\":\"55496\",\"29\":\"55113\",\"30\":\"52447\",\"31\":\"55968\",\"32\":\"54153\",\"33\":\"54474\",\"34\":\"52511\",\"35\":\"54368\",\"36\":\"53123\",\"37\":\"53344\",\"38\":\"51438\",\"39\":\"53707\",\"40\":\"52201\",\"41\":\"51646\",\"42\":\"50142\",\"43\":\"52249\",\"44\":\"49793\",\"45\":\"49121\",\"46\":\"48697\",\"47\":\"49224\",\"48\":\"49640\",\"49\":\"48081\",\"50\":\"47196\",\"51\":\"48795\",\"52\":\"47761\",\"53\":\"47861\",\"54\":\"45834\",\"55\":\"48446\",\"56\":\"45542\",\"57\":\"44897\",\"58\":\"43927\",\"59\":\"45611\",\"60\":\"44402\",\"61\":\"43852\",\"62\":\"42662\",\"63\":\"44662\",\"64\":\"43653\",\"65\":\"43595\",\"66\":\"41136\",\"67\":\"44106\",\"68\":\"41846\",\"69\":\"40950\",\"70\":\"39688\",\"71\":\"42115\",\"72\":\"41023\",\"73\":\"40846\",\"74\":\"39988\",\"75\":\"40988\",\"76\":\"39377\",\"77\":\"39229\",\"78\":\"38350\",\"79\":\"39565\",\"80\":\"38046\",\"81\":\"38367\",\"82\":\"37940\",\"83\":\"40692\",\"84\":\"38952\",\"85\":\"37870\",\"86\":\"36637\",\"87\":\"39180\",\"88\":\"38533\",\"89\":\"37499\",\"90\":\"36380\",\"91\":\"37682\",\"92\":\"36567\",\"93\":\"36670\",\"94\":\"35941\",\"95\":\"33803\",\"96\":\"38784\",\"97\":\"36963\",\"98\":\"35503\",\"_rn_\":\"G\"},{\"1\":\"44113\",\"2\":\"51544\",\"3\":\"52073\",\"4\":\"56354\",\"5\":\"52022\",\"6\":\"49431\",\"7\":\"52258\",\"8\":\"54784\",\"9\":\"49334\",\"10\":\"48898\",\"11\":\"50835\",\"12\":\"50886\",\"13\":\"48075\",\"14\":\"47759\",\"15\":\"49092\",\"16\":\"51379\",\"17\":\"51954\",\"18\":\"50314\",\"19\":\"53105\",\"20\":\"57461\",\"21\":\"58210\",\"22\":\"61950\",\"23\":\"65850\",\"24\":\"67540\",\"25\":\"66334\",\"26\":\"68395\",\"27\":\"70437\",\"28\":\"72975\",\"29\":\"70868\",\"30\":\"65665\",\"31\":\"67447\",\"32\":\"67979\",\"33\":\"65323\",\"34\":\"63780\",\"35\":\"67039\",\"36\":\"69004\",\"37\":\"64604\",\"38\":\"61837\",\"39\":\"63567\",\"40\":\"65246\",\"41\":\"59746\",\"42\":\"57136\",\"43\":\"58971\",\"44\":\"56608\",\"45\":\"48604\",\"46\":\"44291\",\"47\":\"52211\",\"48\":\"58878\",\"49\":\"52995\",\"50\":\"48935\",\"51\":\"49476\",\"52\":\"49916\",\"53\":\"46636\",\"54\":\"43681\",\"55\":\"43532\",\"56\":\"43698\",\"57\":\"41478\",\"58\":\"40747\",\"59\":\"40066\",\"60\":\"41320\",\"61\":\"40035\",\"62\":\"37452\",\"63\":\"39060\",\"64\":\"40965\",\"65\":\"38851\",\"66\":\"36948\",\"67\":\"36434\",\"68\":\"35878\",\"69\":\"34707\",\"70\":\"36615\",\"71\":\"38308\",\"72\":\"38532\",\"73\":\"37250\",\"74\":\"35506\",\"75\":\"35603\",\"76\":\"38706\",\"77\":\"38914\",\"78\":\"38563\",\"79\":\"38465\",\"80\":\"38250\",\"81\":\"38137\",\"82\":\"34980\",\"83\":\"35343\",\"84\":\"35816\",\"85\":\"36705\",\"86\":\"35087\",\"87\":\"37203\",\"88\":\"40401\",\"89\":\"40966\",\"90\":\"38304\",\"91\":\"39120\",\"92\":\"40896\",\"93\":\"40104\",\"94\":\"37013\",\"95\":\"37749\",\"96\":\"37688\",\"97\":\"36228\",\"98\":\"33267\",\"_rn_\":\"FBKF\"},{\"1\":\"42012\",\"2\":\"37799\",\"3\":\"41323\",\"4\":\"41944\",\"5\":\"41787\",\"6\":\"38661\",\"7\":\"43532\",\"8\":\"43877\",\"9\":\"41266\",\"10\":\"39302\",\"11\":\"38885\",\"12\":\"42842\",\"13\":\"42347\",\"14\":\"37443\",\"15\":\"35721\",\"16\":\"39883\",\"17\":\"41484\",\"18\":\"36871\",\"19\":\"39045\",\"20\":\"40290\",\"21\":\"40424\",\"22\":\"32882\",\"23\":\"34720\",\"24\":\"39448\",\"25\":\"37153\",\"26\":\"31576\",\"27\":\"38927\",\"28\":\"37901\",\"29\":\"37514\",\"30\":\"30834\",\"31\":\"37710\",\"32\":\"36981\",\"33\":\"35433\",\"34\":\"32443\",\"35\":\"36589\",\"36\":\"38349\",\"37\":\"35829\",\"38\":\"30798\",\"39\":\"35161\",\"40\":\"36717\",\"41\":\"33641\",\"42\":\"29547\",\"43\":\"30966\",\"44\":\"32922\",\"45\":\"31421\",\"46\":\"25585\",\"47\":\"32186\",\"48\":\"36353\",\"49\":\"34884\",\"50\":\"29790\",\"51\":\"34226\",\"52\":\"35179\",\"53\":\"32943\",\"54\":\"30322\",\"55\":\"32256\",\"56\":\"34770\",\"57\":\"29194\",\"58\":\"28732\",\"59\":\"30699\",\"60\":\"32297\",\"61\":\"29707\",\"62\":\"26484\",\"63\":\"28749\",\"64\":\"29121\",\"65\":\"26732\",\"66\":\"24101\",\"67\":\"25316\",\"68\":\"25611\",\"69\":\"23649\",\"70\":\"20382\",\"71\":\"23984\",\"72\":\"25215\",\"73\":\"18562\",\"74\":\"17776\",\"75\":\"19845\",\"76\":\"20988\",\"77\":\"20873\",\"78\":\"18628\",\"79\":\"18079\",\"80\":\"20374\",\"81\":\"18338\",\"82\":\"16754\",\"83\":\"17608\",\"84\":\"17181\",\"85\":\"16494\",\"86\":\"13882\",\"87\":\"14456\",\"88\":\"16633\",\"89\":\"16662\",\"90\":\"13895\",\"91\":\"13626\",\"92\":\"16655\",\"93\":\"15898\",\"94\":\"12584\",\"95\":\"12205\",\"96\":\"14175\",\"97\":\"13904\",\"98\":\"12645\",\"_rn_\":\"X\"},{\"1\":\"34535\",\"2\":\"41507\",\"3\":\"42765\",\"4\":\"46632\",\"5\":\"40570\",\"6\":\"39482\",\"7\":\"42858\",\"8\":\"45631\",\"9\":\"38690\",\"10\":\"40418\",\"11\":\"40810\",\"12\":\"40067\",\"13\":\"36377\",\"14\":\"37435\",\"15\":\"37147\",\"16\":\"37276\",\"17\":\"36872\",\"18\":\"33658\",\"19\":\"37390\",\"20\":\"40060\",\"21\":\"41256\",\"22\":\"42969\",\"23\":\"46647\",\"24\":\"49971\",\"25\":\"46410\",\"26\":\"45384\",\"27\":\"49277\",\"28\":\"49650\",\"29\":\"48451\",\"30\":\"45413\",\"31\":\"48142\",\"32\":\"44639\",\"33\":\"45443\",\"34\":\"42513\",\"35\":\"47278\",\"36\":\"47203\",\"37\":\"44345\",\"38\":\"39890\",\"39\":\"44220\",\"40\":\"44565\",\"41\":\"38867\",\"42\":\"35718\",\"43\":\"35528\",\"44\":\"32466\",\"45\":\"28548\",\"46\":\"25705\",\"47\":\"33395\",\"48\":\"36713\",\"49\":\"32662\",\"50\":\"29535\",\"51\":\"30823\",\"52\":\"30227\",\"53\":\"26428\",\"54\":\"25578\",\"55\":\"25335\",\"56\":\"25320\",\"57\":\"22476\",\"58\":\"21430\",\"59\":\"20708\",\"60\":\"21046\",\"61\":\"19877\",\"62\":\"18669\",\"63\":\"19697\",\"64\":\"19537\",\"65\":\"18350\",\"66\":\"17140\",\"67\":\"18527\",\"68\":\"17293\",\"69\":\"16345\",\"70\":\"15542\",\"71\":\"16735\",\"72\":\"17956\",\"73\":\"17046\",\"74\":\"16298\",\"75\":\"18390\",\"76\":\"19648\",\"77\":\"20422\",\"78\":\"20019\",\"79\":\"21015\",\"80\":\"20725\",\"81\":\"18100\",\"82\":\"16107\",\"83\":\"18600\",\"84\":\"17603\",\"85\":\"16868\",\"86\":\"15476\",\"87\":\"20384\",\"88\":\"21671\",\"89\":\"19836\",\"90\":\"18842\",\"91\":\"20883\",\"92\":\"22133\",\"93\":\"20293\",\"94\":\"17469\",\"95\":\"21306\",\"96\":\"19099\",\"97\":\"16388\",\"98\":\"13697\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nSIDRA TABLE\nINDEX (Chained Index)\n\n\npaged_table( gdp.table(gdp.index, type=\"ret4\" , period=\"qtr\", digits=2), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"262.10\",\"2\":\"284.18\",\"3\":\"155.49\",\"4\":\"222.42\",\"5\":\"258.96\",\"6\":\"278.87\",\"7\":\"154.81\",\"8\":\"217.92\",\"9\":\"255.30\",\"10\":\"276.40\",\"11\":\"147.26\",\"12\":\"207.73\",\"13\":\"253.24\",\"14\":\"283.99\",\"15\":\"139.48\",\"16\":\"188.11\",\"17\":\"218.13\",\"18\":\"235.89\",\"19\":\"142.13\",\"20\":\"196.81\",\"21\":\"230.36\",\"22\":\"255.40\",\"23\":\"142.16\",\"24\":\"197.24\",\"25\":\"220.45\",\"26\":\"238.38\",\"27\":\"138.33\",\"28\":\"195.19\",\"29\":\"220.04\",\"30\":\"223.00\",\"31\":\"132.80\",\"32\":\"200.56\",\"33\":\"199.76\",\"34\":\"183.52\",\"35\":\"141.13\",\"36\":\"191.49\",\"37\":\"200.08\",\"38\":\"206.74\",\"39\":\"127.28\",\"40\":\"177.85\",\"41\":\"198.64\",\"42\":\"196.20\",\"43\":\"123.44\",\"44\":\"168.51\",\"45\":\"180.49\",\"46\":\"183.59\",\"47\":\"122.05\",\"48\":\"182.18\",\"49\":\"191.02\",\"50\":\"186.20\",\"51\":\"121.05\",\"52\":\"173.48\",\"53\":\"171.99\",\"54\":\"177.74\",\"55\":\"116.18\",\"56\":\"165.72\",\"57\":\"170.97\",\"58\":\"171.13\",\"59\":\"105.37\",\"60\":\"149.15\",\"61\":\"171.54\",\"62\":\"170.28\",\"63\":\"104.95\",\"64\":\"152.20\",\"65\":\"167.55\",\"66\":\"165.03\",\"67\":\"103.35\",\"68\":\"145.57\",\"69\":\"164.26\",\"70\":\"165.01\",\"71\":\"102.56\",\"72\":\"143.46\",\"73\":\"144.80\",\"74\":\"143.03\",\"75\":\"94.27\",\"76\":\"128.45\",\"77\":\"134.90\",\"78\":\"136.59\",\"79\":\"84.88\",\"80\":\"121.22\",\"81\":\"130.92\",\"82\":\"132.75\",\"83\":\"86.29\",\"84\":\"119.43\",\"85\":\"126.56\",\"86\":\"125.05\",\"87\":\"78.27\",\"88\":\"115.41\",\"89\":\"124.57\",\"90\":\"111.07\",\"91\":\"82.64\",\"92\":\"109.69\",\"93\":\"110.16\",\"94\":\"112.67\",\"95\":\"92.89\",\"96\":\"108.10\",\"97\":\"105.50\",\"98\":\"105.32\",\"_rn_\":\"AGR\"},{\"1\":\"114.45\",\"2\":\"125.59\",\"3\":\"135.37\",\"4\":\"140.31\",\"5\":\"131.08\",\"6\":\"125.74\",\"7\":\"133.42\",\"8\":\"138.97\",\"9\":\"130.70\",\"10\":\"126.99\",\"11\":\"134.13\",\"12\":\"137.83\",\"13\":\"129.59\",\"14\":\"125.69\",\"15\":\"130.94\",\"16\":\"138.34\",\"17\":\"132.54\",\"18\":\"128.08\",\"19\":\"135.67\",\"20\":\"143.26\",\"21\":\"137.94\",\"22\":\"138.38\",\"23\":\"148.01\",\"24\":\"152.00\",\"25\":\"144.84\",\"26\":\"144.36\",\"27\":\"151.52\",\"28\":\"157.60\",\"29\":\"150.15\",\"30\":\"138.96\",\"31\":\"147.60\",\"32\":\"153.21\",\"33\":\"143.75\",\"34\":\"140.97\",\"35\":\"149.71\",\"36\":\"153.92\",\"37\":\"148.49\",\"38\":\"137.68\",\"39\":\"146.99\",\"40\":\"148.05\",\"41\":\"141.25\",\"42\":\"130.20\",\"43\":\"139.44\",\"44\":\"136.69\",\"45\":\"125.01\",\"46\":\"112.91\",\"47\":\"131.97\",\"48\":\"145.04\",\"49\":\"135.83\",\"50\":\"126.58\",\"51\":\"135.12\",\"52\":\"135.84\",\"53\":\"129.07\",\"54\":\"118.14\",\"55\":\"128.74\",\"56\":\"127.01\",\"57\":\"118.69\",\"58\":\"113.45\",\"59\":\"123.68\",\"60\":\"123.86\",\"61\":\"120.94\",\"62\":\"109.82\",\"63\":\"123.38\",\"64\":\"125.25\",\"65\":\"114.92\",\"66\":\"105.39\",\"67\":\"114.59\",\"68\":\"115.09\",\"69\":\"105.52\",\"70\":\"98.15\",\"71\":\"114.21\",\"72\":\"112.93\",\"73\":\"107.66\",\"74\":\"98.08\",\"75\":\"104.59\",\"76\":\"106.79\",\"77\":\"105.23\",\"78\":\"100.42\",\"79\":\"108.83\",\"80\":\"109.67\",\"81\":\"104.78\",\"82\":\"96.45\",\"83\":\"103.95\",\"84\":\"105.00\",\"85\":\"100.81\",\"86\":\"92.23\",\"87\":\"102.15\",\"88\":\"108.83\",\"89\":\"105.47\",\"90\":\"96.31\",\"91\":\"107.70\",\"92\":\"111.85\",\"93\":\"105.77\",\"94\":\"96.25\",\"95\":\"101.19\",\"96\":\"111.62\",\"97\":\"97.90\",\"98\":\"93.19\",\"_rn_\":\"IND\"},{\"1\":\"155.70\",\"2\":\"171.36\",\"3\":\"181.34\",\"4\":\"179.01\",\"5\":\"175.28\",\"6\":\"172.14\",\"7\":\"178.42\",\"8\":\"177.18\",\"9\":\"173.29\",\"10\":\"170.15\",\"11\":\"176.39\",\"12\":\"174.75\",\"13\":\"171.10\",\"14\":\"166.62\",\"15\":\"172.57\",\"16\":\"172.20\",\"17\":\"170.41\",\"18\":\"168.45\",\"19\":\"175.81\",\"20\":\"175.04\",\"21\":\"174.21\",\"22\":\"174.10\",\"23\":\"183.25\",\"24\":\"181.20\",\"25\":\"178.14\",\"26\":\"176.21\",\"27\":\"182.92\",\"28\":\"180.49\",\"29\":\"176.97\",\"30\":\"171.40\",\"31\":\"178.62\",\"32\":\"175.68\",\"33\":\"171.66\",\"34\":\"166.76\",\"35\":\"172.24\",\"36\":\"170.09\",\"37\":\"167.62\",\"38\":\"163.22\",\"39\":\"168.73\",\"40\":\"165.43\",\"41\":\"160.64\",\"42\":\"155.88\",\"43\":\"160.24\",\"44\":\"156.47\",\"45\":\"151.51\",\"46\":\"146.77\",\"47\":\"152.43\",\"48\":\"154.29\",\"49\":\"150.48\",\"50\":\"145.34\",\"51\":\"149.24\",\"52\":\"145.27\",\"53\":\"142.25\",\"54\":\"138.04\",\"55\":\"140.46\",\"56\":\"137.86\",\"57\":\"134.21\",\"58\":\"130.62\",\"59\":\"134.46\",\"60\":\"132.10\",\"61\":\"129.18\",\"62\":\"124.87\",\"63\":\"131.24\",\"64\":\"127.59\",\"65\":\"123.94\",\"66\":\"119.45\",\"67\":\"123.99\",\"68\":\"121.26\",\"69\":\"117.40\",\"70\":\"115.61\",\"71\":\"122.97\",\"72\":\"120.69\",\"73\":\"116.37\",\"74\":\"113.53\",\"75\":\"118.66\",\"76\":\"116.73\",\"77\":\"113.54\",\"78\":\"110.29\",\"79\":\"117.48\",\"80\":\"114.74\",\"81\":\"110.04\",\"82\":\"107.68\",\"83\":\"112.37\",\"84\":\"109.99\",\"85\":\"106.51\",\"86\":\"104.41\",\"87\":\"110.15\",\"88\":\"109.02\",\"89\":\"104.76\",\"90\":\"101.60\",\"91\":\"109.43\",\"92\":\"107.10\",\"93\":\"102.85\",\"94\":\"100.20\",\"95\":\"104.55\",\"96\":\"105.75\",\"97\":\"100.58\",\"98\":\"98.31\",\"_rn_\":\"SER\"},{\"1\":\"148.80\",\"2\":\"163.50\",\"3\":\"168.18\",\"4\":\"170.39\",\"5\":\"166.73\",\"6\":\"163.88\",\"7\":\"165.50\",\"8\":\"168.56\",\"9\":\"165.14\",\"10\":\"162.81\",\"11\":\"163.37\",\"12\":\"166.01\",\"13\":\"163.49\",\"14\":\"160.82\",\"15\":\"159.86\",\"16\":\"163.58\",\"17\":\"162.00\",\"18\":\"160.16\",\"19\":\"163.27\",\"20\":\"167.22\",\"21\":\"166.63\",\"22\":\"167.76\",\"23\":\"171.54\",\"24\":\"173.86\",\"25\":\"170.85\",\"26\":\"170.25\",\"27\":\"172.18\",\"28\":\"174.95\",\"29\":\"171.55\",\"30\":\"164.69\",\"31\":\"167.91\",\"32\":\"170.73\",\"33\":\"165.20\",\"34\":\"160.41\",\"35\":\"164.80\",\"36\":\"166.86\",\"37\":\"163.97\",\"38\":\"158.08\",\"39\":\"160.88\",\"40\":\"161.38\",\"41\":\"157.19\",\"42\":\"150.68\",\"43\":\"152.90\",\"44\":\"151.70\",\"45\":\"145.51\",\"46\":\"138.92\",\"47\":\"145.55\",\"48\":\"153.37\",\"49\":\"148.52\",\"50\":\"142.16\",\"51\":\"144.40\",\"52\":\"144.30\",\"53\":\"140.20\",\"54\":\"134.37\",\"55\":\"136.33\",\"56\":\"136.45\",\"57\":\"131.77\",\"58\":\"127.84\",\"59\":\"129.91\",\"60\":\"130.93\",\"61\":\"129.42\",\"62\":\"123.20\",\"63\":\"127.61\",\"64\":\"128.56\",\"65\":\"124.07\",\"66\":\"118.20\",\"67\":\"120.33\",\"68\":\"121.03\",\"69\":\"116.81\",\"70\":\"113.58\",\"71\":\"119.68\",\"72\":\"119.90\",\"73\":\"115.59\",\"74\":\"110.86\",\"75\":\"113.63\",\"76\":\"114.73\",\"77\":\"112.51\",\"78\":\"109.07\",\"79\":\"113.63\",\"80\":\"113.80\",\"81\":\"109.77\",\"82\":\"106.03\",\"83\":\"108.81\",\"84\":\"109.20\",\"85\":\"106.10\",\"86\":\"102.36\",\"87\":\"106.37\",\"88\":\"109.30\",\"89\":\"106.00\",\"90\":\"100.74\",\"91\":\"107.52\",\"92\":\"108.45\",\"93\":\"103.98\",\"94\":\"99.84\",\"95\":\"102.97\",\"96\":\"107.47\",\"97\":\"100.14\",\"98\":\"97.33\",\"_rn_\":\"VAB\"},{\"1\":\"150.86\",\"2\":\"174.88\",\"3\":\"187.66\",\"4\":\"186.20\",\"5\":\"178.67\",\"6\":\"175.59\",\"7\":\"184.24\",\"8\":\"182.85\",\"9\":\"175.43\",\"10\":\"175.14\",\"11\":\"183.05\",\"12\":\"180.08\",\"13\":\"173.07\",\"14\":\"170.23\",\"15\":\"176.69\",\"16\":\"175.57\",\"17\":\"172.06\",\"18\":\"169.88\",\"19\":\"182.17\",\"20\":\"183.12\",\"21\":\"183.18\",\"22\":\"186.77\",\"23\":\"201.59\",\"24\":\"197.02\",\"25\":\"191.72\",\"26\":\"191.73\",\"27\":\"200.28\",\"28\":\"198.47\",\"29\":\"192.98\",\"30\":\"184.46\",\"31\":\"195.33\",\"32\":\"190.12\",\"33\":\"183.72\",\"34\":\"179.05\",\"35\":\"184.56\",\"36\":\"183.78\",\"37\":\"179.56\",\"38\":\"173.80\",\"39\":\"178.73\",\"40\":\"176.18\",\"41\":\"167.89\",\"42\":\"162.67\",\"43\":\"164.59\",\"44\":\"160.09\",\"45\":\"150.78\",\"46\":\"143.29\",\"47\":\"154.11\",\"48\":\"162.71\",\"49\":\"155.68\",\"50\":\"148.00\",\"51\":\"150.55\",\"52\":\"146.56\",\"53\":\"143.29\",\"54\":\"136.76\",\"55\":\"135.90\",\"56\":\"137.57\",\"57\":\"133.47\",\"58\":\"129.40\",\"59\":\"130.66\",\"60\":\"129.73\",\"61\":\"127.20\",\"62\":\"120.73\",\"63\":\"125.58\",\"64\":\"125.10\",\"65\":\"120.70\",\"66\":\"116.17\",\"67\":\"117.18\",\"68\":\"115.22\",\"69\":\"112.92\",\"70\":\"113.02\",\"71\":\"116.15\",\"72\":\"116.64\",\"73\":\"113.88\",\"74\":\"108.74\",\"75\":\"111.19\",\"76\":\"113.93\",\"77\":\"114.16\",\"78\":\"115.98\",\"79\":\"115.54\",\"80\":\"115.97\",\"81\":\"112.70\",\"82\":\"108.17\",\"83\":\"109.66\",\"84\":\"108.67\",\"85\":\"105.00\",\"86\":\"98.06\",\"87\":\"108.31\",\"88\":\"113.68\",\"89\":\"109.43\",\"90\":\"103.65\",\"91\":\"112.96\",\"92\":\"116.66\",\"93\":\"111.08\",\"94\":\"102.08\",\"95\":\"112.97\",\"96\":\"108.13\",\"97\":\"99.97\",\"98\":\"93.66\",\"_rn_\":\"TAX\"},{\"1\":\"149.41\",\"2\":\"165.39\",\"3\":\"171.17\",\"4\":\"172.89\",\"5\":\"168.70\",\"6\":\"165.81\",\"7\":\"168.36\",\"8\":\"170.85\",\"9\":\"166.90\",\"10\":\"164.83\",\"11\":\"166.33\",\"12\":\"168.26\",\"13\":\"165.16\",\"14\":\"162.47\",\"15\":\"162.46\",\"16\":\"165.56\",\"17\":\"163.72\",\"18\":\"161.84\",\"19\":\"166.14\",\"20\":\"169.72\",\"21\":\"169.21\",\"22\":\"170.65\",\"23\":\"175.86\",\"24\":\"177.28\",\"25\":\"173.96\",\"26\":\"173.44\",\"27\":\"176.26\",\"28\":\"178.42\",\"29\":\"174.73\",\"30\":\"167.63\",\"31\":\"171.91\",\"32\":\"173.63\",\"33\":\"167.97\",\"34\":\"163.19\",\"35\":\"167.75\",\"36\":\"169.41\",\"37\":\"166.33\",\"38\":\"160.45\",\"39\":\"163.55\",\"40\":\"163.63\",\"41\":\"158.86\",\"42\":\"152.53\",\"43\":\"154.74\",\"44\":\"153.06\",\"45\":\"146.39\",\"46\":\"139.67\",\"47\":\"146.92\",\"48\":\"154.86\",\"49\":\"149.69\",\"50\":\"143.14\",\"51\":\"145.43\",\"52\":\"144.75\",\"53\":\"140.77\",\"54\":\"134.84\",\"55\":\"136.37\",\"56\":\"136.72\",\"57\":\"132.13\",\"58\":\"128.18\",\"59\":\"130.13\",\"60\":\"130.85\",\"61\":\"129.18\",\"62\":\"122.92\",\"63\":\"127.39\",\"64\":\"128.14\",\"65\":\"123.65\",\"66\":\"117.98\",\"67\":\"119.94\",\"68\":\"120.25\",\"69\":\"116.31\",\"70\":\"113.58\",\"71\":\"119.24\",\"72\":\"119.50\",\"73\":\"115.41\",\"74\":\"110.63\",\"75\":\"113.38\",\"76\":\"114.71\",\"77\":\"112.82\",\"78\":\"110.10\",\"79\":\"113.98\",\"80\":\"114.19\",\"81\":\"110.25\",\"82\":\"106.40\",\"83\":\"108.97\",\"84\":\"109.20\",\"85\":\"106.04\",\"86\":\"101.92\",\"87\":\"106.66\",\"88\":\"109.88\",\"89\":\"106.46\",\"90\":\"101.14\",\"91\":\"108.21\",\"92\":\"109.49\",\"93\":\"104.88\",\"94\":\"100.13\",\"95\":\"104.31\",\"96\":\"107.56\",\"97\":\"100.12\",\"98\":\"96.84\",\"_rn_\":\"GDP\"},{\"1\":\"153.95\",\"2\":\"175.75\",\"3\":\"189.87\",\"4\":\"183.30\",\"5\":\"177.91\",\"6\":\"177.04\",\"7\":\"186.04\",\"8\":\"179.87\",\"9\":\"174.72\",\"10\":\"174.36\",\"11\":\"183.44\",\"12\":\"177.05\",\"13\":\"171.56\",\"14\":\"168.54\",\"15\":\"177.05\",\"16\":\"171.71\",\"17\":\"168.87\",\"18\":\"169.38\",\"19\":\"181.36\",\"20\":\"176.77\",\"21\":\"176.81\",\"22\":\"179.47\",\"23\":\"192.84\",\"24\":\"183.97\",\"25\":\"180.74\",\"26\":\"180.61\",\"27\":\"187.56\",\"28\":\"181.96\",\"29\":\"178.01\",\"30\":\"174.38\",\"31\":\"182.94\",\"32\":\"175.85\",\"33\":\"170.97\",\"34\":\"167.93\",\"35\":\"174.56\",\"36\":\"169.21\",\"37\":\"167.26\",\"38\":\"163.07\",\"39\":\"170.24\",\"40\":\"162.77\",\"41\":\"156.86\",\"42\":\"153.25\",\"43\":\"159.36\",\"44\":\"154.60\",\"45\":\"148.83\",\"46\":\"142.61\",\"47\":\"149.00\",\"48\":\"147.99\",\"49\":\"143.15\",\"50\":\"139.44\",\"51\":\"143.95\",\"52\":\"136.57\",\"53\":\"133.74\",\"54\":\"130.12\",\"55\":\"134.35\",\"56\":\"129.10\",\"57\":\"125.96\",\"58\":\"122.35\",\"59\":\"127.80\",\"60\":\"122.61\",\"61\":\"119.06\",\"62\":\"116.60\",\"63\":\"123.69\",\"64\":\"117.46\",\"65\":\"113.62\",\"66\":\"110.71\",\"67\":\"116.01\",\"68\":\"111.99\",\"69\":\"110.19\",\"70\":\"109.72\",\"71\":\"115.33\",\"72\":\"112.81\",\"73\":\"112.49\",\"74\":\"109.74\",\"75\":\"113.49\",\"76\":\"109.83\",\"77\":\"111.71\",\"78\":\"109.48\",\"79\":\"115.63\",\"80\":\"111.88\",\"81\":\"108.36\",\"82\":\"105.24\",\"83\":\"111.09\",\"84\":\"106.80\",\"85\":\"103.95\",\"86\":\"102.16\",\"87\":\"107.76\",\"88\":\"106.93\",\"89\":\"104.59\",\"90\":\"103.13\",\"91\":\"109.20\",\"92\":\"106.90\",\"93\":\"105.73\",\"94\":\"103.65\",\"95\":\"112.39\",\"96\":\"104.74\",\"97\":\"99.75\",\"98\":\"96.06\",\"_rn_\":\"C\"},{\"1\":\"135.47\",\"2\":\"142.87\",\"3\":\"151.24\",\"4\":\"147.40\",\"5\":\"148.16\",\"6\":\"142.87\",\"7\":\"150.74\",\"8\":\"149.51\",\"9\":\"149.19\",\"10\":\"142.82\",\"11\":\"152.18\",\"12\":\"147.88\",\"13\":\"148.10\",\"14\":\"141.96\",\"15\":\"151.60\",\"16\":\"149.04\",\"17\":\"149.36\",\"18\":\"144.10\",\"19\":\"150.83\",\"20\":\"149.10\",\"21\":\"148.60\",\"22\":\"144.34\",\"23\":\"153.77\",\"24\":\"151.80\",\"25\":\"151.05\",\"26\":\"144.88\",\"27\":\"155.21\",\"28\":\"150.24\",\"29\":\"149.21\",\"30\":\"141.99\",\"31\":\"151.52\",\"32\":\"146.61\",\"33\":\"147.48\",\"34\":\"142.16\",\"35\":\"147.19\",\"36\":\"143.82\",\"37\":\"144.42\",\"38\":\"139.26\",\"39\":\"145.40\",\"40\":\"141.32\",\"41\":\"139.82\",\"42\":\"135.75\",\"43\":\"141.45\",\"44\":\"134.80\",\"45\":\"132.98\",\"46\":\"131.84\",\"47\":\"133.26\",\"48\":\"134.39\",\"49\":\"130.17\",\"50\":\"127.77\",\"51\":\"132.10\",\"52\":\"129.30\",\"53\":\"129.57\",\"54\":\"124.08\",\"55\":\"131.16\",\"56\":\"123.29\",\"57\":\"121.55\",\"58\":\"118.92\",\"59\":\"123.48\",\"60\":\"120.21\",\"61\":\"118.72\",\"62\":\"115.50\",\"63\":\"120.91\",\"64\":\"118.18\",\"65\":\"118.02\",\"66\":\"111.37\",\"67\":\"119.41\",\"68\":\"113.29\",\"69\":\"110.86\",\"70\":\"107.45\",\"71\":\"114.02\",\"72\":\"111.06\",\"73\":\"110.58\",\"74\":\"108.26\",\"75\":\"110.97\",\"76\":\"106.60\",\"77\":\"106.20\",\"78\":\"103.83\",\"79\":\"107.11\",\"80\":\"103.00\",\"81\":\"103.87\",\"82\":\"102.71\",\"83\":\"110.16\",\"84\":\"105.45\",\"85\":\"102.52\",\"86\":\"99.19\",\"87\":\"106.07\",\"88\":\"104.32\",\"89\":\"101.52\",\"90\":\"98.49\",\"91\":\"102.02\",\"92\":\"99.00\",\"93\":\"99.28\",\"94\":\"97.30\",\"95\":\"91.51\",\"96\":\"105.00\",\"97\":\"100.07\",\"98\":\"96.12\",\"_rn_\":\"G\"},{\"1\":\"123.20\",\"2\":\"143.96\",\"3\":\"145.43\",\"4\":\"157.39\",\"5\":\"145.29\",\"6\":\"138.06\",\"7\":\"145.95\",\"8\":\"153.01\",\"9\":\"137.79\",\"10\":\"136.57\",\"11\":\"141.98\",\"12\":\"142.12\",\"13\":\"134.27\",\"14\":\"133.39\",\"15\":\"137.11\",\"16\":\"143.50\",\"17\":\"145.10\",\"18\":\"140.52\",\"19\":\"148.32\",\"20\":\"160.48\",\"21\":\"162.58\",\"22\":\"173.02\",\"23\":\"183.91\",\"24\":\"188.63\",\"25\":\"185.26\",\"26\":\"191.02\",\"27\":\"196.72\",\"28\":\"203.81\",\"29\":\"197.93\",\"30\":\"183.40\",\"31\":\"188.37\",\"32\":\"189.86\",\"33\":\"182.44\",\"34\":\"178.13\",\"35\":\"187.24\",\"36\":\"192.72\",\"37\":\"180.43\",\"38\":\"172.71\",\"39\":\"177.54\",\"40\":\"182.23\",\"41\":\"166.86\",\"42\":\"159.58\",\"43\":\"164.70\",\"44\":\"158.10\",\"45\":\"135.75\",\"46\":\"123.70\",\"47\":\"145.82\",\"48\":\"164.44\",\"49\":\"148.01\",\"50\":\"136.67\",\"51\":\"138.18\",\"52\":\"139.41\",\"53\":\"130.25\",\"54\":\"122.00\",\"55\":\"121.58\",\"56\":\"122.05\",\"57\":\"115.85\",\"58\":\"113.80\",\"59\":\"111.90\",\"60\":\"115.40\",\"61\":\"111.81\",\"62\":\"104.60\",\"63\":\"109.09\",\"64\":\"114.41\",\"65\":\"108.51\",\"66\":\"103.19\",\"67\":\"101.76\",\"68\":\"100.21\",\"69\":\"96.93\",\"70\":\"102.26\",\"71\":\"106.99\",\"72\":\"107.62\",\"73\":\"104.04\",\"74\":\"99.17\",\"75\":\"99.44\",\"76\":\"108.10\",\"77\":\"108.68\",\"78\":\"107.70\",\"79\":\"107.43\",\"80\":\"106.83\",\"81\":\"106.51\",\"82\":\"97.70\",\"83\":\"98.71\",\"84\":\"100.03\",\"85\":\"102.51\",\"86\":\"98.00\",\"87\":\"103.91\",\"88\":\"112.84\",\"89\":\"114.41\",\"90\":\"106.98\",\"91\":\"109.26\",\"92\":\"114.22\",\"93\":\"112.01\",\"94\":\"103.37\",\"95\":\"105.43\",\"96\":\"105.26\",\"97\":\"101.18\",\"98\":\"92.91\",\"_rn_\":\"FBKF\"},{\"1\":\"316.16\",\"2\":\"284.46\",\"3\":\"310.98\",\"4\":\"315.65\",\"5\":\"314.47\",\"6\":\"290.94\",\"7\":\"327.60\",\"8\":\"330.19\",\"9\":\"310.54\",\"10\":\"295.76\",\"11\":\"292.63\",\"12\":\"322.40\",\"13\":\"318.68\",\"14\":\"281.78\",\"15\":\"268.81\",\"16\":\"300.14\",\"17\":\"312.19\",\"18\":\"277.47\",\"19\":\"293.83\",\"20\":\"303.20\",\"21\":\"304.21\",\"22\":\"247.45\",\"23\":\"261.28\",\"24\":\"296.86\",\"25\":\"279.59\",\"26\":\"237.63\",\"27\":\"292.94\",\"28\":\"285.22\",\"29\":\"282.31\",\"30\":\"232.04\",\"31\":\"283.78\",\"32\":\"278.30\",\"33\":\"266.65\",\"34\":\"244.15\",\"35\":\"275.34\",\"36\":\"288.60\",\"37\":\"269.62\",\"38\":\"231.77\",\"39\":\"264.60\",\"40\":\"276.31\",\"41\":\"253.17\",\"42\":\"222.35\",\"43\":\"233.03\",\"44\":\"247.75\",\"45\":\"236.46\",\"46\":\"192.54\",\"47\":\"242.21\",\"48\":\"273.57\",\"49\":\"262.52\",\"50\":\"224.18\",\"51\":\"257.56\",\"52\":\"264.74\",\"53\":\"247.91\",\"54\":\"228.19\",\"55\":\"242.74\",\"56\":\"261.66\",\"57\":\"219.70\",\"58\":\"216.22\",\"59\":\"231.03\",\"60\":\"243.05\",\"61\":\"223.56\",\"62\":\"199.30\",\"63\":\"216.35\",\"64\":\"219.15\",\"65\":\"201.17\",\"66\":\"181.37\",\"67\":\"190.52\",\"68\":\"192.73\",\"69\":\"177.97\",\"70\":\"153.39\",\"71\":\"180.49\",\"72\":\"189.75\",\"73\":\"139.69\",\"74\":\"133.77\",\"75\":\"149.34\",\"76\":\"157.94\",\"77\":\"157.08\",\"78\":\"140.18\",\"79\":\"136.06\",\"80\":\"153.32\",\"81\":\"138.00\",\"82\":\"126.08\",\"83\":\"132.51\",\"84\":\"129.29\",\"85\":\"124.12\",\"86\":\"104.47\",\"87\":\"108.79\",\"88\":\"125.17\",\"89\":\"125.39\",\"90\":\"104.57\",\"91\":\"102.54\",\"92\":\"125.34\",\"93\":\"119.64\",\"94\":\"94.70\",\"95\":\"91.85\",\"96\":\"106.67\",\"97\":\"104.64\",\"98\":\"95.16\",\"_rn_\":\"X\"},{\"1\":\"206.94\",\"2\":\"248.71\",\"3\":\"256.25\",\"4\":\"279.42\",\"5\":\"243.09\",\"6\":\"236.58\",\"7\":\"256.81\",\"8\":\"273.42\",\"9\":\"231.83\",\"10\":\"242.18\",\"11\":\"244.53\",\"12\":\"240.08\",\"13\":\"217.97\",\"14\":\"224.31\",\"15\":\"222.58\",\"16\":\"223.36\",\"17\":\"220.94\",\"18\":\"201.68\",\"19\":\"224.04\",\"20\":\"240.04\",\"21\":\"247.21\",\"22\":\"257.47\",\"23\":\"279.51\",\"24\":\"299.42\",\"25\":\"278.09\",\"26\":\"271.94\",\"27\":\"295.27\",\"28\":\"297.50\",\"29\":\"290.32\",\"30\":\"272.11\",\"31\":\"288.46\",\"32\":\"267.48\",\"33\":\"272.29\",\"34\":\"254.74\",\"35\":\"283.29\",\"36\":\"282.84\",\"37\":\"265.71\",\"38\":\"239.02\",\"39\":\"264.96\",\"40\":\"267.03\",\"41\":\"232.89\",\"42\":\"214.02\",\"43\":\"212.89\",\"44\":\"194.54\",\"45\":\"171.06\",\"46\":\"154.03\",\"47\":\"200.10\",\"48\":\"219.98\",\"49\":\"195.71\",\"50\":\"176.97\",\"51\":\"184.69\",\"52\":\"181.12\",\"53\":\"158.36\",\"54\":\"153.26\",\"55\":\"151.81\",\"56\":\"151.72\",\"57\":\"134.68\",\"58\":\"128.41\",\"59\":\"124.08\",\"60\":\"126.11\",\"61\":\"119.10\",\"62\":\"111.86\",\"63\":\"118.02\",\"64\":\"117.07\",\"65\":\"109.95\",\"66\":\"102.70\",\"67\":\"111.01\",\"68\":\"103.62\",\"69\":\"97.94\",\"70\":\"93.13\",\"71\":\"100.28\",\"72\":\"107.59\",\"73\":\"102.14\",\"74\":\"97.66\",\"75\":\"110.19\",\"76\":\"117.73\",\"77\":\"122.37\",\"78\":\"119.95\",\"79\":\"125.92\",\"80\":\"124.19\",\"81\":\"108.46\",\"82\":\"96.52\",\"83\":\"111.45\",\"84\":\"105.48\",\"85\":\"101.07\",\"86\":\"92.73\",\"87\":\"122.14\",\"88\":\"129.85\",\"89\":\"118.86\",\"90\":\"112.90\",\"91\":\"125.13\",\"92\":\"132.62\",\"93\":\"121.60\",\"94\":\"104.68\",\"95\":\"127.67\",\"96\":\"114.44\",\"97\":\"98.20\",\"98\":\"82.07\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nSIDRA TABLE\nNEXT RELEASES FROM IBGE\nReference Date\nPublishing Date\n2020:Q3\n2020-12-03\nUseful Links\nSCNT\nSCNT-releases\n2020:Q1 IBGE release\n2020:Q2 IBGE release\nSIDRA-CNT\nsthda-ggplot\nR-cookbook plots\nTHANK YOU FOR READING!\n\n\n",
    "preview": "posts/2020-09-01-gdp-2020Q2/post_files/figure-html5/unnamed-chunk-9-1.png",
    "last_modified": "2020-09-01T14:57:47-03:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 768
  },
  {
    "path": "posts/2020-08-27-gdp-shares/",
    "title": "Shares of the Brazilian GDP data from the SIDRA-IBGE website",
    "description": "plot shares of the brazilian GDP data from the SIDRA-IBGE website",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-08-27",
    "categories": [
      "R",
      "ggplot2",
      "dygraphs",
      "scraping",
      "webscraping",
      "reproducible-report",
      "reproducible-research",
      "PIB",
      "GDP"
    ],
    "contents": "\nLast Updated 2020-09-03\nIn this post, we will calculate the participation of GDP by sectors and by demand variables, and make plots and tables.\nFirst, let’s load up our functions and other libraries.\n\n\n# source functions\nsource(\"./myfuns.R\")\n\n# load libraries\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(dygraphs)\n#' [Why not dplyr](https://www.stat.pitt.edu/stoffer/tsa4/Rissues.htm)\n\nLoad the data.\n\n\n# load data\ngdp.nom  <- readRDS(\"../../data/gdp-nominal.rds\")\ngdp.rea  <- readRDS(\"../../data/gdp-real-NSA.rds\")\ngdp.rsa  <- readRDS(\"../../data/gdp-real-SA.rds\")\n\nGDP Levels (Current Values)\nBefore we calculate the shares, let’s replicate the IBGE release of 2020:Q1 GDP, but with all the other quarters included.\n\n\n# gdp table function\ngdp.table <- function(data, type=\"level\" , period=\"qtr\", digits=0)\n{\n# TODO: ERROR CATCHING\n\n# subset vars by type\nif(type==\"level\") vars <- c(\"AGR\", \"IND\", \"SER\", \"VAB\", \"TAX\", \"GDP\", \"C\", \"G\", \"FBKF\", \"DE\", \"X\", \"M\")\nelse if(type==\"ret4\") vars <- c(\"AGR\", \"IND\", \"SER\", \"VAB\", \"TAX\", \"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\")\nelse if(type==\"ret1\") vars <- c(\"AGR\", \"IND\", \"SER\", \"VAB\", \"GDP\", \"C\", \"G\", \"FBKF\", \"X\", \"M\")\n\n# subset time by period\nif(period ==\"year\") data <- data[c(grepl(\"*-12-*\", data$date)[-NROW(data)], TRUE),]\n\n# trasnform data\nnewdata <- data.frame( t( apply( data[,vars], 2 , rev) ) )\n\n# attribute colnames\nif(period ==\"qtr\") colnames(newdata) <- rev( paste0( data[,\"year\"], \":Q\", data[,\"qtr\"] ) )\nelse if(period ==\"year\") colnames(newdata) <- rev( c( paste0( data[-NROW(data),\"year\"] ), paste0( data[NROW(data),\"year\"], \":Q\", data[NROW(data),\"qtr\"] )  ) )\n\n\n# return table\nreturn( round(newdata, digits) )\n}\n\n# pretty show table\npaged_table(gdp.table(gdp.nom), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"125417\",\"2\":\"119691\",\"3\":\"59979\",\"4\":\"79682\",\"5\":\"90078\",\"6\":\"92218\",\"7\":\"50297\",\"8\":\"65452\",\"9\":\"93007\",\"10\":\"95645\",\"11\":\"49726\",\"12\":\"70215\",\"13\":\"84654\",\"14\":\"98376\",\"15\":\"54181\",\"16\":\"76339\",\"17\":\"88519\",\"18\":\"87615\",\"19\":\"47098\",\"20\":\"61121\",\"21\":\"72136\",\"22\":\"78612\",\"23\":\"44176\",\"24\":\"58877\",\"25\":\"72792\",\"26\":\"74130\",\"27\":\"45622\",\"28\":\"58678\",\"29\":\"65607\",\"30\":\"70383\",\"31\":\"39168\",\"32\":\"51699\",\"33\":\"55518\",\"34\":\"54309\",\"35\":\"33907\",\"36\":\"48551\",\"37\":\"53828\",\"38\":\"53738\",\"39\":\"33923\",\"40\":\"41884\",\"41\":\"40362\",\"42\":\"43763\",\"43\":\"29117\",\"44\":\"37986\",\"45\":\"40931\",\"46\":\"41178\",\"47\":\"22315\",\"48\":\"34035\",\"49\":\"43289\",\"50\":\"42413\",\"51\":\"23267\",\"52\":\"29821\",\"53\":\"32718\",\"54\":\"34346\",\"55\":\"22366\",\"56\":\"28662\",\"57\":\"26201\",\"58\":\"28065\",\"59\":\"19723\",\"60\":\"26472\",\"61\":\"27174\",\"62\":\"27589\",\"63\":\"16860\",\"64\":\"25124\",\"65\":\"34585\",\"66\":\"34343\",\"67\":\"20477\",\"68\":\"25418\",\"69\":\"29205\",\"70\":\"30850\",\"71\":\"16444\",\"72\":\"21463\",\"73\":\"21534\",\"74\":\"22074\",\"75\":\"13676\",\"76\":\"14694\",\"77\":\"17314\",\"78\":\"17485\",\"79\":\"10220\",\"80\":\"15178\",\"81\":\"15218\",\"82\":\"16347\",\"83\":\"11121\",\"84\":\"11736\",\"85\":\"13487\",\"86\":\"14190\",\"87\":\"8399\",\"88\":\"13143\",\"89\":\"14202\",\"90\":\"11869\",\"91\":\"9771\",\"92\":\"10871\",\"93\":\"11625\",\"94\":\"12338\",\"95\":\"8906\",\"96\":\"11096\",\"97\":\"10703\",\"98\":\"10054\",\"_rn_\":\"AGR\"},{\"1\":\"287544\",\"2\":\"305450\",\"3\":\"331673\",\"4\":\"351717\",\"5\":\"322471\",\"6\":\"294741\",\"7\":\"324920\",\"8\":\"330129\",\"9\":\"305344\",\"10\":\"288556\",\"11\":\"307160\",\"12\":\"311200\",\"13\":\"294577\",\"14\":\"283993\",\"15\":\"300425\",\"16\":\"302932\",\"17\":\"285838\",\"18\":\"261524\",\"19\":\"291238\",\"20\":\"307135\",\"21\":\"283762\",\"22\":\"278651\",\"23\":\"298667\",\"24\":\"315401\",\"25\":\"285775\",\"26\":\"283251\",\"27\":\"288964\",\"28\":\"301155\",\"29\":\"281667\",\"30\":\"259840\",\"31\":\"273383\",\"32\":\"280234\",\"33\":\"263933\",\"34\":\"248132\",\"35\":\"268614\",\"36\":\"263385\",\"37\":\"250399\",\"38\":\"228636\",\"39\":\"244769\",\"40\":\"245530\",\"41\":\"221147\",\"42\":\"192711\",\"43\":\"210476\",\"44\":\"192928\",\"45\":\"173009\",\"46\":\"152809\",\"47\":\"185152\",\"48\":\"204856\",\"49\":\"176613\",\"50\":\"151286\",\"51\":\"165884\",\"52\":\"166712\",\"53\":\"155432\",\"54\":\"141044\",\"55\":\"150251\",\"56\":\"149671\",\"57\":\"139270\",\"58\":\"128090\",\"59\":\"136160\",\"60\":\"135196\",\"61\":\"133729\",\"62\":\"119602\",\"63\":\"128183\",\"64\":\"127076\",\"65\":\"117825\",\"66\":\"102779\",\"67\":\"106561\",\"68\":\"105419\",\"69\":\"96082\",\"70\":\"88506\",\"71\":\"91116\",\"72\":\"85894\",\"73\":\"84313\",\"74\":\"73585\",\"75\":\"73153\",\"76\":\"75782\",\"77\":\"73981\",\"78\":\"74965\",\"79\":\"71932\",\"80\":\"71089\",\"81\":\"70463\",\"82\":\"62386\",\"83\":\"61915\",\"84\":\"61145\",\"85\":\"62478\",\"86\":\"51004\",\"87\":\"52759\",\"88\":\"58112\",\"89\":\"58383\",\"90\":\"52455\",\"91\":\"53320\",\"92\":\"57089\",\"93\":\"55636\",\"94\":\"49072\",\"95\":\"54631\",\"96\":\"49011\",\"97\":\"45839\",\"98\":\"41474\",\"_rn_\":\"IND\"},{\"1\":\"1064582\",\"2\":\"1113292\",\"3\":\"1222993\",\"4\":\"1151597\",\"5\":\"1128303\",\"6\":\"1087324\",\"7\":\"1153654\",\"8\":\"1087036\",\"9\":\"1065968\",\"10\":\"1034492\",\"11\":\"1100095\",\"12\":\"1038891\",\"13\":\"1038396\",\"14\":\"992483\",\"15\":\"1063306\",\"16\":\"988856\",\"17\":\"972770\",\"18\":\"937516\",\"19\":\"995599\",\"20\":\"929429\",\"21\":\"917925\",\"22\":\"892893\",\"23\":\"947239\",\"24\":\"893395\",\"25\":\"867578\",\"26\":\"831453\",\"27\":\"864503\",\"28\":\"803744\",\"29\":\"782557\",\"30\":\"731040\",\"31\":\"769112\",\"32\":\"710283\",\"33\":\"688921\",\"34\":\"659566\",\"35\":\"684710\",\"36\":\"633878\",\"37\":\"621996\",\"38\":\"578820\",\"39\":\"619144\",\"40\":\"562515\",\"41\":\"540506\",\"42\":\"516585\",\"43\":\"541953\",\"44\":\"500473\",\"45\":\"475784\",\"46\":\"453119\",\"47\":\"480117\",\"48\":\"448852\",\"49\":\"431586\",\"50\":\"405964\",\"51\":\"427928\",\"52\":\"392991\",\"53\":\"385915\",\"54\":\"363472\",\"55\":\"383363\",\"56\":\"349557\",\"57\":\"330663\",\"58\":\"313132\",\"59\":\"338331\",\"60\":\"308829\",\"61\":\"294768\",\"62\":\"275247\",\"63\":\"300358\",\"64\":\"274301\",\"65\":\"257771\",\"66\":\"242776\",\"67\":\"271114\",\"68\":\"247311\",\"69\":\"232389\",\"70\":\"217385\",\"71\":\"232315\",\"72\":\"217429\",\"73\":\"208326\",\"74\":\"195721\",\"75\":\"210722\",\"76\":\"192740\",\"77\":\"182907\",\"78\":\"173002\",\"79\":\"192653\",\"80\":\"178914\",\"81\":\"166882\",\"82\":\"160044\",\"83\":\"181938\",\"84\":\"164335\",\"85\":\"157083\",\"86\":\"151486\",\"87\":\"165189\",\"88\":\"156762\",\"89\":\"148554\",\"90\":\"142118\",\"91\":\"160615\",\"92\":\"148662\",\"93\":\"137028\",\"94\":\"130715\",\"95\":\"147001\",\"96\":\"134057\",\"97\":\"121690\",\"98\":\"112836\",\"_rn_\":\"SER\"},{\"1\":\"1477543\",\"2\":\"1538433\",\"3\":\"1614645\",\"4\":\"1582996\",\"5\":\"1540852\",\"6\":\"1474283\",\"7\":\"1528871\",\"8\":\"1482617\",\"9\":\"1464320\",\"10\":\"1418692\",\"11\":\"1456982\",\"12\":\"1420306\",\"13\":\"1417626\",\"14\":\"1374852\",\"15\":\"1417912\",\"16\":\"1368127\",\"17\":\"1347127\",\"18\":\"1286655\",\"19\":\"1333935\",\"20\":\"1297686\",\"21\":\"1273824\",\"22\":\"1250156\",\"23\":\"1290082\",\"24\":\"1267673\",\"25\":\"1226144\",\"26\":\"1188834\",\"27\":\"1199089\",\"28\":\"1163576\",\"29\":\"1129831\",\"30\":\"1061264\",\"31\":\"1081664\",\"32\":\"1042216\",\"33\":\"1008371\",\"34\":\"962008\",\"35\":\"987231\",\"36\":\"945813\",\"37\":\"926223\",\"38\":\"861194\",\"39\":\"897836\",\"40\":\"849929\",\"41\":\"802015\",\"42\":\"753060\",\"43\":\"781546\",\"44\":\"731387\",\"45\":\"689724\",\"46\":\"647106\",\"47\":\"687584\",\"48\":\"687743\",\"49\":\"651488\",\"50\":\"599663\",\"51\":\"617078\",\"52\":\"589524\",\"53\":\"574065\",\"54\":\"538861\",\"55\":\"555979\",\"56\":\"527890\",\"57\":\"496134\",\"58\":\"469287\",\"59\":\"494213\",\"60\":\"470496\",\"61\":\"455670\",\"62\":\"422438\",\"63\":\"445401\",\"64\":\"426501\",\"65\":\"410181\",\"66\":\"379899\",\"67\":\"398152\",\"68\":\"378148\",\"69\":\"357676\",\"70\":\"336741\",\"71\":\"339875\",\"72\":\"324786\",\"73\":\"314173\",\"74\":\"291380\",\"75\":\"297551\",\"76\":\"283216\",\"77\":\"274203\",\"78\":\"265452\",\"79\":\"274805\",\"80\":\"265181\",\"81\":\"252563\",\"82\":\"238777\",\"83\":\"254974\",\"84\":\"237216\",\"85\":\"233048\",\"86\":\"216680\",\"87\":\"226347\",\"88\":\"228016\",\"89\":\"221139\",\"90\":\"206441\",\"91\":\"223706\",\"92\":\"216623\",\"93\":\"204289\",\"94\":\"192125\",\"95\":\"210538\",\"96\":\"194164\",\"97\":\"178232\",\"98\":\"164363\",\"_rn_\":\"VAB\"},{\"1\":\"175408\",\"2\":\"264988\",\"3\":\"278095\",\"4\":\"259703\",\"5\":\"254954\",\"6\":\"251397\",\"7\":\"260834\",\"8\":\"254318\",\"9\":\"240382\",\"10\":\"239141\",\"11\":\"255791\",\"12\":\"227374\",\"13\":\"216025\",\"14\":\"214362\",\"15\":\"216423\",\"16\":\"209097\",\"17\":\"211158\",\"18\":\"212828\",\"19\":\"216664\",\"20\":\"210534\",\"21\":\"206307\",\"22\":\"206681\",\"23\":\"218511\",\"24\":\"194453\",\"25\":\"196144\",\"26\":\"197111\",\"27\":\"214187\",\"28\":\"190557\",\"29\":\"192756\",\"30\":\"180358\",\"31\":\"190051\",\"32\":\"188233\",\"33\":\"174753\",\"34\":\"167465\",\"35\":\"173573\",\"36\":\"166521\",\"37\":\"160490\",\"38\":\"155337\",\"39\":\"159534\",\"40\":\"148006\",\"41\":\"142130\",\"42\":\"133337\",\"43\":\"138945\",\"44\":\"121456\",\"45\":\"113854\",\"46\":\"109021\",\"47\":\"128036\",\"48\":\"124860\",\"49\":\"118037\",\"50\":\"112393\",\"51\":\"109261\",\"52\":\"102322\",\"53\":\"96590\",\"54\":\"92562\",\"55\":\"99376\",\"56\":\"89958\",\"57\":\"85843\",\"58\":\"84984\",\"59\":\"88244\",\"60\":\"82363\",\"61\":\"79887\",\"62\":\"77272\",\"63\":\"80519\",\"64\":\"78751\",\"65\":\"71613\",\"66\":\"64885\",\"67\":\"64220\",\"68\":\"61202\",\"69\":\"61311\",\"70\":\"60501\",\"71\":\"59459\",\"72\":\"55008\",\"73\":\"53190\",\"74\":\"50916\",\"75\":\"49487\",\"76\":\"49308\",\"77\":\"49521\",\"78\":\"47018\",\"79\":\"45675\",\"80\":\"43715\",\"81\":\"40225\",\"82\":\"38150\",\"83\":\"39234\",\"84\":\"36910\",\"85\":\"35661\",\"86\":\"33988\",\"87\":\"30324\",\"88\":\"30027\",\"89\":\"30797\",\"90\":\"29259\",\"91\":\"30198\",\"92\":\"29556\",\"93\":\"28600\",\"94\":\"26992\",\"95\":\"28778\",\"96\":\"27349\",\"97\":\"26378\",\"98\":\"24960\",\"_rn_\":\"TAX\"},{\"1\":\"1652951\",\"2\":\"1803421\",\"3\":\"1892740\",\"4\":\"1842700\",\"5\":\"1795806\",\"6\":\"1725681\",\"7\":\"1789705\",\"8\":\"1736935\",\"9\":\"1704702\",\"10\":\"1657834\",\"11\":\"1712773\",\"12\":\"1647680\",\"13\":\"1633651\",\"14\":\"1589214\",\"15\":\"1634335\",\"16\":\"1577224\",\"17\":\"1558286\",\"18\":\"1499483\",\"19\":\"1550600\",\"20\":\"1508220\",\"21\":\"1480131\",\"22\":\"1456837\",\"23\":\"1508593\",\"24\":\"1462126\",\"25\":\"1422288\",\"26\":\"1385945\",\"27\":\"1413277\",\"28\":\"1354133\",\"29\":\"1322587\",\"30\":\"1241622\",\"31\":\"1271715\",\"32\":\"1230449\",\"33\":\"1183124\",\"34\":\"1129472\",\"35\":\"1160804\",\"36\":\"1112334\",\"37\":\"1086713\",\"38\":\"1016531\",\"39\":\"1057370\",\"40\":\"997935\",\"41\":\"944145\",\"42\":\"886397\",\"43\":\"920491\",\"44\":\"852843\",\"45\":\"803578\",\"46\":\"756127\",\"47\":\"815620\",\"48\":\"812603\",\"49\":\"769525\",\"50\":\"712055\",\"51\":\"726339\",\"52\":\"691846\",\"53\":\"670655\",\"54\":\"631423\",\"55\":\"655355\",\"56\":\"617848\",\"57\":\"581977\",\"58\":\"554270\",\"59\":\"582458\",\"60\":\"552859\",\"61\":\"535557\",\"62\":\"499710\",\"63\":\"525920\",\"64\":\"505252\",\"65\":\"481795\",\"66\":\"444783\",\"67\":\"462372\",\"68\":\"439350\",\"69\":\"418987\",\"70\":\"397242\",\"71\":\"399333\",\"72\":\"379795\",\"73\":\"367363\",\"74\":\"342297\",\"75\":\"347038\",\"76\":\"332524\",\"77\":\"323724\",\"78\":\"312470\",\"79\":\"320481\",\"80\":\"308896\",\"81\":\"292789\",\"82\":\"276927\",\"83\":\"294208\",\"84\":\"274126\",\"85\":\"268709\",\"86\":\"250668\",\"87\":\"256671\",\"88\":\"258043\",\"89\":\"251936\",\"90\":\"235701\",\"91\":\"253904\",\"92\":\"246178\",\"93\":\"232890\",\"94\":\"219117\",\"95\":\"239316\",\"96\":\"221513\",\"97\":\"204611\",\"98\":\"189323\",\"_rn_\":\"GDP\"},{\"1\":\"1002720\",\"2\":\"1162204\",\"3\":\"1239127\",\"4\":\"1188423\",\"5\":\"1153132\",\"6\":\"1131694\",\"7\":\"1174457\",\"8\":\"1124224\",\"9\":\"1083063\",\"10\":\"1075834\",\"11\":\"1119097\",\"12\":\"1069721\",\"13\":\"1037002\",\"14\":\"1019279\",\"15\":\"1051459\",\"16\":\"1016044\",\"17\":\"986437\",\"18\":\"974196\",\"19\":\"1000264\",\"20\":\"959597\",\"21\":\"938674\",\"22\":\"936659\",\"23\":\"964168\",\"24\":\"912056\",\"25\":\"888373\",\"26\":\"873807\",\"27\":\"873571\",\"28\":\"833145\",\"29\":\"805989\",\"30\":\"777717\",\"31\":\"790458\",\"32\":\"753551\",\"33\":\"718125\",\"34\":\"694700\",\"35\":\"696968\",\"36\":\"668612\",\"37\":\"648649\",\"38\":\"623585\",\"39\":\"628476\",\"40\":\"596732\",\"41\":\"568567\",\"42\":\"546392\",\"43\":\"552152\",\"44\":\"534397\",\"45\":\"504220\",\"46\":\"474264\",\"47\":\"486816\",\"48\":\"480468\",\"49\":\"456473\",\"50\":\"433753\",\"51\":\"432652\",\"52\":\"410354\",\"53\":\"400751\",\"54\":\"384999\",\"55\":\"386663\",\"56\":\"368734\",\"57\":\"355817\",\"58\":\"345002\",\"59\":\"350104\",\"60\":\"332896\",\"61\":\"321752\",\"62\":\"308544\",\"63\":\"317821\",\"64\":\"301881\",\"65\":\"284833\",\"66\":\"274159\",\"67\":\"277306\",\"68\":\"267445\",\"69\":\"260277\",\"70\":\"257432\",\"71\":\"246172\",\"72\":\"233655\",\"73\":\"225796\",\"74\":\"215913\",\"75\":\"218362\",\"76\":\"211486\",\"77\":\"210284\",\"78\":\"203369\",\"79\":\"208493\",\"80\":\"200012\",\"81\":\"189996\",\"82\":\"176025\",\"83\":\"189576\",\"84\":\"178811\",\"85\":\"170252\",\"86\":\"164893\",\"87\":\"163187\",\"88\":\"163447\",\"89\":\"159194\",\"90\":\"157103\",\"91\":\"161954\",\"92\":\"157598\",\"93\":\"154447\",\"94\":\"147808\",\"95\":\"156087\",\"96\":\"142658\",\"97\":\"132511\",\"98\":\"125685\",\"_rn_\":\"C\"},{\"1\":\"370173\",\"2\":\"343521\",\"3\":\"423377\",\"4\":\"354891\",\"5\":\"360898\",\"6\":\"332726\",\"7\":\"394854\",\"8\":\"335827\",\"9\":\"339978\",\"10\":\"313027\",\"11\":\"376637\",\"12\":\"314363\",\"13\":\"333748\",\"14\":\"303010\",\"15\":\"377622\",\"16\":\"303261\",\"17\":\"312059\",\"18\":\"284703\",\"19\":\"341338\",\"20\":\"287922\",\"21\":\"290189\",\"22\":\"266326\",\"23\":\"320359\",\"24\":\"272878\",\"25\":\"269155\",\"26\":\"244482\",\"27\":\"301387\",\"28\":\"244366\",\"29\":\"247033\",\"30\":\"214489\",\"31\":\"266578\",\"32\":\"215553\",\"33\":\"215509\",\"34\":\"194540\",\"35\":\"241205\",\"36\":\"199027\",\"37\":\"199020\",\"38\":\"177786\",\"39\":\"222498\",\"40\":\"179940\",\"41\":\"172803\",\"42\":\"163726\",\"43\":\"196078\",\"44\":\"157480\",\"45\":\"150885\",\"46\":\"150521\",\"47\":\"172887\",\"48\":\"144805\",\"49\":\"139783\",\"50\":\"128394\",\"51\":\"152024\",\"52\":\"125131\",\"53\":\"123655\",\"54\":\"114489\",\"55\":\"140138\",\"56\":\"111875\",\"57\":\"105729\",\"58\":\"100992\",\"59\":\"125041\",\"60\":\"99485\",\"61\":\"95935\",\"62\":\"89562\",\"63\":\"109840\",\"64\":\"90362\",\"65\":\"84760\",\"66\":\"76588\",\"67\":\"96431\",\"68\":\"82553\",\"69\":\"78572\",\"70\":\"70185\",\"71\":\"88957\",\"72\":\"68751\",\"73\":\"71519\",\"74\":\"65697\",\"75\":\"80645\",\"76\":\"59988\",\"77\":\"58687\",\"78\":\"55190\",\"79\":\"68544\",\"80\":\"54588\",\"81\":\"52695\",\"82\":\"49216\",\"83\":\"60623\",\"84\":\"53944\",\"85\":\"51749\",\"86\":\"48863\",\"87\":\"55037\",\"88\":\"49839\",\"89\":\"49307\",\"90\":\"46994\",\"91\":\"52540\",\"92\":\"45830\",\"93\":\"45485\",\"94\":\"42139\",\"95\":\"52324\",\"96\":\"41810\",\"97\":\"39023\",\"98\":\"35666\",\"_rn_\":\"G\"},{\"1\":\"247452\",\"2\":\"285059\",\"3\":\"280576\",\"4\":\"299569\",\"5\":\"275238\",\"6\":\"259038\",\"7\":\"272350\",\"8\":\"283541\",\"9\":\"250815\",\"10\":\"242958\",\"11\":\"249801\",\"12\":\"245497\",\"13\":\"233098\",\"14\":\"230383\",\"15\":\"238080\",\"16\":\"246617\",\"17\":\"247878\",\"18\":\"240696\",\"19\":\"254802\",\"20\":\"270305\",\"21\":\"266994\",\"22\":\"277296\",\"23\":\"288988\",\"24\":\"289656\",\"25\":\"282410\",\"26\":\"287399\",\"27\":\"287438\",\"28\":\"291365\",\"29\":\"279534\",\"30\":\"256607\",\"31\":\"260349\",\"32\":\"259597\",\"33\":\"244240\",\"34\":\"233275\",\"35\":\"233842\",\"36\":\"237137\",\"37\":\"220962\",\"38\":\"209987\",\"39\":\"211755\",\"40\":\"214814\",\"41\":\"193393\",\"42\":\"177984\",\"43\":\"181988\",\"44\":\"172382\",\"45\":\"147362\",\"46\":\"134945\",\"47\":\"153856\",\"48\":\"168886\",\"49\":\"147733\",\"50\":\"132371\",\"51\":\"131177\",\"52\":\"129921\",\"53\":\"119167\",\"54\":\"109267\",\"55\":\"108850\",\"56\":\"108368\",\"57\":\"100733\",\"58\":\"96723\",\"59\":\"95462\",\"60\":\"96634\",\"61\":\"92729\",\"62\":\"85394\",\"63\":\"88268\",\"64\":\"90684\",\"65\":\"83337\",\"66\":\"76797\",\"67\":\"74519\",\"68\":\"71785\",\"69\":\"68696\",\"70\":\"70262\",\"71\":\"70596\",\"72\":\"67912\",\"73\":\"65569\",\"74\":\"62806\",\"75\":\"58153\",\"76\":\"60427\",\"77\":\"62067\",\"78\":\"61689\",\"79\":\"54811\",\"80\":\"53879\",\"81\":\"53911\",\"82\":\"56887\",\"83\":\"47432\",\"84\":\"46383\",\"85\":\"47152\",\"86\":\"44121\",\"87\":\"44249\",\"88\":\"47636\",\"89\":\"48379\",\"90\":\"45595\",\"91\":\"45894\",\"92\":\"47287\",\"93\":\"46189\",\"94\":\"42697\",\"95\":\"43187\",\"96\":\"41418\",\"97\":\"39326\",\"98\":\"35403\",\"_rn_\":\"FBKF\"},{\"1\":\"-27432\",\"2\":\"27685\",\"3\":\"-43973\",\"4\":\"19843\",\"5\":\"-2848\",\"6\":\"9294\",\"7\":\"-61243\",\"8\":\"-3724\",\"9\":\"10074\",\"10\":\"26852\",\"11\":\"-30258\",\"12\":\"7913\",\"13\":\"-1457\",\"14\":\"28188\",\"15\":\"-34668\",\"16\":\"3001\",\"17\":\"-3466\",\"18\":\"352\",\"19\":\"-47216\",\"20\":\"-2498\",\"21\":\"-648\",\"22\":\"24929\",\"23\":\"-17765\",\"24\":\"20314\",\"25\":\"9808\",\"26\":\"26673\",\"27\":\"-22456\",\"28\":\"17266\",\"29\":\"15107\",\"30\":\"31768\",\"31\":\"-22172\",\"32\":\"11259\",\"33\":\"19678\",\"34\":\"24963\",\"35\":\"-620\",\"36\":\"12050\",\"37\":\"24041\",\"38\":\"17803\",\"39\":\"2111\",\"40\":\"19071\",\"41\":\"15269\",\"42\":\"12769\",\"43\":\"-601\",\"44\":\"-8458\",\"45\":\"-3884\",\"46\":\"2750\",\"47\":\"2760\",\"48\":\"17305\",\"49\":\"25906\",\"50\":\"23504\",\"51\":\"4466\",\"52\":\"16545\",\"53\":\"15017\",\"54\":\"13577\",\"55\":\"2824\",\"56\":\"6820\",\"57\":\"6668\",\"58\":\"-1707\",\"59\":\"-6777\",\"60\":\"1882\",\"61\":\"7349\",\"62\":\"773\",\"63\":\"-4763\",\"64\":\"1330\",\"65\":\"9433\",\"66\":\"5596\",\"67\":\"3021\",\"68\":\"5204\",\"69\":\"1755\",\"70\":\"-5652\",\"71\":\"-16499\",\"72\":\"-235\",\"73\":\"7826\",\"74\":\"1804\",\"75\":\"-4158\",\"76\":\"6445\",\"77\":\"426\",\"78\":\"1547\",\"79\":\"-61\",\"80\":\"6805\",\"81\":\"931\",\"82\":\"-497\",\"83\":\"3434\",\"84\":\"312\",\"85\":\"3829\",\"86\":\"-3515\",\"87\":\"1743\",\"88\":\"3701\",\"89\":\"-853\",\"90\":\"-8376\",\"91\":\"374\",\"92\":\"2106\",\"93\":\"-8063\",\"94\":\"-7355\",\"95\":\"-4417\",\"96\":\"994\",\"97\":\"-3355\",\"98\":\"-4964\",\"_rn_\":\"DE\"},{\"1\":\"324329\",\"2\":\"265798\",\"3\":\"270205\",\"4\":\"272964\",\"5\":\"263380\",\"6\":\"232818\",\"7\":\"276019\",\"8\":\"288461\",\"9\":\"248939\",\"10\":\"212359\",\"11\":\"205392\",\"12\":\"210486\",\"13\":\"216250\",\"14\":\"192305\",\"15\":\"185194\",\"16\":\"192893\",\"17\":\"208118\",\"18\":\"195372\",\"19\":\"217639\",\"20\":\"212638\",\"21\":\"189846\",\"22\":\"153344\",\"23\":\"158168\",\"24\":\"171655\",\"25\":\"162060\",\"26\":\"144492\",\"27\":\"174627\",\"28\":\"169810\",\"29\":\"156293\",\"30\":\"125321\",\"31\":\"153034\",\"32\":\"153303\",\"33\":\"146496\",\"34\":\"119043\",\"35\":\"141072\",\"36\":\"137086\",\"37\":\"124993\",\"38\":\"103744\",\"39\":\"115900\",\"40\":\"114225\",\"41\":\"105294\",\"42\":\"86801\",\"43\":\"87460\",\"44\":\"92906\",\"45\":\"93900\",\"46\":\"87415\",\"47\":\"126594\",\"48\":\"115435\",\"49\":\"98393\",\"50\":\"80459\",\"51\":\"92083\",\"52\":\"95807\",\"53\":\"89585\",\"54\":\"85074\",\"55\":\"91941\",\"56\":\"98608\",\"57\":\"79742\",\"58\":\"76051\",\"59\":\"83006\",\"60\":\"88087\",\"61\":\"82694\",\"62\":\"77093\",\"63\":\"84321\",\"64\":\"90341\",\"65\":\"82950\",\"66\":\"66313\",\"67\":\"68852\",\"68\":\"66754\",\"69\":\"62162\",\"70\":\"63031\",\"71\":\"72262\",\"72\":\"65894\",\"73\":\"38896\",\"74\":\"34812\",\"75\":\"42667\",\"76\":\"45701\",\"77\":\"40837\",\"78\":\"33576\",\"79\":\"31756\",\"80\":\"33768\",\"81\":\"30239\",\"82\":\"26402\",\"83\":\"29511\",\"84\":\"27646\",\"85\":\"24728\",\"86\":\"22153\",\"87\":\"16781\",\"88\":\"18786\",\"89\":\"18805\",\"90\":\"16099\",\"91\":\"17398\",\"92\":\"18529\",\"93\":\"17402\",\"94\":\"13162\",\"95\":\"15085\",\"96\":\"15560\",\"97\":\"14576\",\"98\":\"12306\",\"_rn_\":\"X\"},{\"1\":\"264291\",\"2\":\"280847\",\"3\":\"276573\",\"4\":\"292990\",\"5\":\"253994\",\"6\":\"239888\",\"7\":\"266732\",\"8\":\"291393\",\"9\":\"228166\",\"10\":\"213196\",\"11\":\"207896\",\"12\":\"200301\",\"13\":\"184990\",\"14\":\"183950\",\"15\":\"183351\",\"16\":\"184593\",\"17\":\"192740\",\"18\":\"195836\",\"19\":\"216227\",\"20\":\"219745\",\"21\":\"204925\",\"22\":\"201717\",\"23\":\"205325\",\"24\":\"204433\",\"25\":\"189517\",\"26\":\"190908\",\"27\":\"201291\",\"28\":\"201819\",\"29\":\"181369\",\"30\":\"164280\",\"31\":\"176532\",\"32\":\"162814\",\"33\":\"160923\",\"34\":\"137048\",\"35\":\"151662\",\"36\":\"141579\",\"37\":\"130951\",\"38\":\"116374\",\"39\":\"123369\",\"40\":\"126847\",\"41\":\"111182\",\"42\":\"101274\",\"43\":\"96585\",\"44\":\"95863\",\"45\":\"88904\",\"46\":\"93767\",\"47\":\"127292\",\"48\":\"114297\",\"49\":\"98761\",\"50\":\"86426\",\"51\":\"86063\",\"52\":\"85912\",\"53\":\"77520\",\"54\":\"75983\",\"55\":\"75060\",\"56\":\"76558\",\"57\":\"66712\",\"58\":\"62790\",\"59\":\"64378\",\"60\":\"66125\",\"61\":\"64902\",\"62\":\"61656\",\"63\":\"69567\",\"64\":\"69346\",\"65\":\"63518\",\"66\":\"54670\",\"67\":\"57759\",\"68\":\"54391\",\"69\":\"52474\",\"70\":\"58016\",\"71\":\"62154\",\"72\":\"56182\",\"73\":\"42244\",\"74\":\"38735\",\"75\":\"48633\",\"76\":\"51523\",\"77\":\"48577\",\"78\":\"42902\",\"79\":\"43062\",\"80\":\"40155\",\"81\":\"34983\",\"82\":\"31107\",\"83\":\"36368\",\"84\":\"32971\",\"85\":\"29001\",\"86\":\"25847\",\"87\":\"24326\",\"88\":\"25366\",\"89\":\"22896\",\"90\":\"21714\",\"91\":\"24255\",\"92\":\"25171\",\"93\":\"22570\",\"94\":\"19333\",\"95\":\"22949\",\"96\":\"20928\",\"97\":\"17470\",\"98\":\"14773\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\nFull disclosure, I started by trying to do this with the dplyr package, but I am not as experienced with the GRAMMAR of data, so I defaulted to the R-base functions.\nGDP Shares (Current Values)\nNow that we have the GDP nominal levels, let’s calculate the share of each variable.\n\n\n# gdp shares\ngdp.share <- cbind(gdp.nom[,c(1,2,3)], 100*gdp.nom[,-c(1,2,3)]/gdp.nom$GDP )\n\n# sum gdp.nom over 4 quarters and coerce to data.frame\ngdp.nom.ac4  <- data.frame( apply( gdp.nom[,-c(1,2,3)], 2, sum4 ) )\n\n# divide by gdp to get shares\ngdp.share.ac <- cbind( gdp.nom[,c(1,2,3)], 100*gdp.nom.ac4/gdp.nom.ac4$GDP )\n\nBy Quarter\n\n\npaged_table(gdp.table(gdp.share, digits=1), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2020:Q1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q4\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q3\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q2\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019:Q1\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q4\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q3\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q2\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018:Q1\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q4\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q3\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q2\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017:Q1\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q4\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q3\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q2\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016:Q1\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q4\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q3\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q2\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015:Q1\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q4\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q3\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q2\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014:Q1\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q4\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q3\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q2\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013:Q1\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q4\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q3\"],\"name\":[32],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q2\"],\"name\":[33],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012:Q1\"],\"name\":[34],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q4\"],\"name\":[35],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q3\"],\"name\":[36],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q2\"],\"name\":[37],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011:Q1\"],\"name\":[38],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q4\"],\"name\":[39],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q3\"],\"name\":[40],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q2\"],\"name\":[41],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010:Q1\"],\"name\":[42],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q4\"],\"name\":[43],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q3\"],\"name\":[44],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q2\"],\"name\":[45],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009:Q1\"],\"name\":[46],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q4\"],\"name\":[47],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q3\"],\"name\":[48],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q2\"],\"name\":[49],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008:Q1\"],\"name\":[50],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q4\"],\"name\":[51],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q3\"],\"name\":[52],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q2\"],\"name\":[53],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007:Q1\"],\"name\":[54],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q4\"],\"name\":[55],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q3\"],\"name\":[56],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q2\"],\"name\":[57],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006:Q1\"],\"name\":[58],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q4\"],\"name\":[59],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q3\"],\"name\":[60],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q2\"],\"name\":[61],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005:Q1\"],\"name\":[62],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q4\"],\"name\":[63],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q3\"],\"name\":[64],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q2\"],\"name\":[65],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004:Q1\"],\"name\":[66],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q4\"],\"name\":[67],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q3\"],\"name\":[68],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q2\"],\"name\":[69],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003:Q1\"],\"name\":[70],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q4\"],\"name\":[71],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q3\"],\"name\":[72],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q2\"],\"name\":[73],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002:Q1\"],\"name\":[74],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q4\"],\"name\":[75],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q3\"],\"name\":[76],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q2\"],\"name\":[77],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001:Q1\"],\"name\":[78],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q4\"],\"name\":[79],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q3\"],\"name\":[80],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q2\"],\"name\":[81],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000:Q1\"],\"name\":[82],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q4\"],\"name\":[83],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q3\"],\"name\":[84],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q2\"],\"name\":[85],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999:Q1\"],\"name\":[86],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q4\"],\"name\":[87],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q3\"],\"name\":[88],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q2\"],\"name\":[89],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998:Q1\"],\"name\":[90],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q4\"],\"name\":[91],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q3\"],\"name\":[92],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q2\"],\"name\":[93],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997:Q1\"],\"name\":[94],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q4\"],\"name\":[95],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q3\"],\"name\":[96],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q2\"],\"name\":[97],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996:Q1\"],\"name\":[98],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"7.6\",\"2\":\"6.6\",\"3\":\"3.2\",\"4\":\"4.3\",\"5\":\"5.0\",\"6\":\"5.3\",\"7\":\"2.8\",\"8\":\"3.8\",\"9\":\"5.5\",\"10\":\"5.8\",\"11\":\"2.9\",\"12\":\"4.3\",\"13\":\"5.2\",\"14\":\"6.2\",\"15\":\"3.3\",\"16\":\"4.8\",\"17\":\"5.7\",\"18\":\"5.8\",\"19\":\"3.0\",\"20\":\"4.1\",\"21\":\"4.9\",\"22\":\"5.4\",\"23\":\"2.9\",\"24\":\"4.0\",\"25\":\"5.1\",\"26\":\"5.3\",\"27\":\"3.2\",\"28\":\"4.3\",\"29\":\"5.0\",\"30\":\"5.7\",\"31\":\"3.1\",\"32\":\"4.2\",\"33\":\"4.7\",\"34\":\"4.8\",\"35\":\"2.9\",\"36\":\"4.4\",\"37\":\"5.0\",\"38\":\"5.3\",\"39\":\"3.2\",\"40\":\"4.2\",\"41\":\"4.3\",\"42\":\"4.9\",\"43\":\"3.2\",\"44\":\"4.5\",\"45\":\"5.1\",\"46\":\"5.4\",\"47\":\"2.7\",\"48\":\"4.2\",\"49\":\"5.6\",\"50\":\"6.0\",\"51\":\"3.2\",\"52\":\"4.3\",\"53\":\"4.9\",\"54\":\"5.4\",\"55\":\"3.4\",\"56\":\"4.6\",\"57\":\"4.5\",\"58\":\"5.1\",\"59\":\"3.4\",\"60\":\"4.8\",\"61\":\"5.1\",\"62\":\"5.5\",\"63\":\"3.2\",\"64\":\"5.0\",\"65\":\"7.2\",\"66\":\"7.7\",\"67\":\"4.4\",\"68\":\"5.8\",\"69\":\"7.0\",\"70\":\"7.8\",\"71\":\"4.1\",\"72\":\"5.7\",\"73\":\"5.9\",\"74\":\"6.4\",\"75\":\"3.9\",\"76\":\"4.4\",\"77\":\"5.3\",\"78\":\"5.6\",\"79\":\"3.2\",\"80\":\"4.9\",\"81\":\"5.2\",\"82\":\"5.9\",\"83\":\"3.8\",\"84\":\"4.3\",\"85\":\"5.0\",\"86\":\"5.7\",\"87\":\"3.3\",\"88\":\"5.1\",\"89\":\"5.6\",\"90\":\"5.0\",\"91\":\"3.8\",\"92\":\"4.4\",\"93\":\"5.0\",\"94\":\"5.6\",\"95\":\"3.7\",\"96\":\"5.0\",\"97\":\"5.2\",\"98\":\"5.3\",\"_rn_\":\"AGR\"},{\"1\":\"17.4\",\"2\":\"16.9\",\"3\":\"17.5\",\"4\":\"19.1\",\"5\":\"18.0\",\"6\":\"17.1\",\"7\":\"18.2\",\"8\":\"19.0\",\"9\":\"17.9\",\"10\":\"17.4\",\"11\":\"17.9\",\"12\":\"18.9\",\"13\":\"18.0\",\"14\":\"17.9\",\"15\":\"18.4\",\"16\":\"19.2\",\"17\":\"18.3\",\"18\":\"17.4\",\"19\":\"18.8\",\"20\":\"20.4\",\"21\":\"19.2\",\"22\":\"19.1\",\"23\":\"19.8\",\"24\":\"21.6\",\"25\":\"20.1\",\"26\":\"20.4\",\"27\":\"20.4\",\"28\":\"22.2\",\"29\":\"21.3\",\"30\":\"20.9\",\"31\":\"21.5\",\"32\":\"22.8\",\"33\":\"22.3\",\"34\":\"22.0\",\"35\":\"23.1\",\"36\":\"23.7\",\"37\":\"23.0\",\"38\":\"22.5\",\"39\":\"23.1\",\"40\":\"24.6\",\"41\":\"23.4\",\"42\":\"21.7\",\"43\":\"22.9\",\"44\":\"22.6\",\"45\":\"21.5\",\"46\":\"20.2\",\"47\":\"22.7\",\"48\":\"25.2\",\"49\":\"23.0\",\"50\":\"21.2\",\"51\":\"22.8\",\"52\":\"24.1\",\"53\":\"23.2\",\"54\":\"22.3\",\"55\":\"22.9\",\"56\":\"24.2\",\"57\":\"23.9\",\"58\":\"23.1\",\"59\":\"23.4\",\"60\":\"24.5\",\"61\":\"25.0\",\"62\":\"23.9\",\"63\":\"24.4\",\"64\":\"25.2\",\"65\":\"24.5\",\"66\":\"23.1\",\"67\":\"23.0\",\"68\":\"24.0\",\"69\":\"22.9\",\"70\":\"22.3\",\"71\":\"22.8\",\"72\":\"22.6\",\"73\":\"23.0\",\"74\":\"21.5\",\"75\":\"21.1\",\"76\":\"22.8\",\"77\":\"22.9\",\"78\":\"24.0\",\"79\":\"22.4\",\"80\":\"23.0\",\"81\":\"24.1\",\"82\":\"22.5\",\"83\":\"21.0\",\"84\":\"22.3\",\"85\":\"23.3\",\"86\":\"20.3\",\"87\":\"20.6\",\"88\":\"22.5\",\"89\":\"23.2\",\"90\":\"22.3\",\"91\":\"21.0\",\"92\":\"23.2\",\"93\":\"23.9\",\"94\":\"22.4\",\"95\":\"22.8\",\"96\":\"22.1\",\"97\":\"22.4\",\"98\":\"21.9\",\"_rn_\":\"IND\"},{\"1\":\"64.4\",\"2\":\"61.7\",\"3\":\"64.6\",\"4\":\"62.5\",\"5\":\"62.8\",\"6\":\"63.0\",\"7\":\"64.5\",\"8\":\"62.6\",\"9\":\"62.5\",\"10\":\"62.4\",\"11\":\"64.2\",\"12\":\"63.1\",\"13\":\"63.6\",\"14\":\"62.5\",\"15\":\"65.1\",\"16\":\"62.7\",\"17\":\"62.4\",\"18\":\"62.5\",\"19\":\"64.2\",\"20\":\"61.6\",\"21\":\"62.0\",\"22\":\"61.3\",\"23\":\"62.8\",\"24\":\"61.1\",\"25\":\"61.0\",\"26\":\"60.0\",\"27\":\"61.2\",\"28\":\"59.4\",\"29\":\"59.2\",\"30\":\"58.9\",\"31\":\"60.5\",\"32\":\"57.7\",\"33\":\"58.2\",\"34\":\"58.4\",\"35\":\"59.0\",\"36\":\"57.0\",\"37\":\"57.2\",\"38\":\"56.9\",\"39\":\"58.6\",\"40\":\"56.4\",\"41\":\"57.2\",\"42\":\"58.3\",\"43\":\"58.9\",\"44\":\"58.7\",\"45\":\"59.2\",\"46\":\"59.9\",\"47\":\"58.9\",\"48\":\"55.2\",\"49\":\"56.1\",\"50\":\"57.0\",\"51\":\"58.9\",\"52\":\"56.8\",\"53\":\"57.5\",\"54\":\"57.6\",\"55\":\"58.5\",\"56\":\"56.6\",\"57\":\"56.8\",\"58\":\"56.5\",\"59\":\"58.1\",\"60\":\"55.9\",\"61\":\"55.0\",\"62\":\"55.1\",\"63\":\"57.1\",\"64\":\"54.3\",\"65\":\"53.5\",\"66\":\"54.6\",\"67\":\"58.6\",\"68\":\"56.3\",\"69\":\"55.5\",\"70\":\"54.7\",\"71\":\"58.2\",\"72\":\"57.2\",\"73\":\"56.7\",\"74\":\"57.2\",\"75\":\"60.7\",\"76\":\"58.0\",\"77\":\"56.5\",\"78\":\"55.4\",\"79\":\"60.1\",\"80\":\"57.9\",\"81\":\"57.0\",\"82\":\"57.8\",\"83\":\"61.8\",\"84\":\"59.9\",\"85\":\"58.5\",\"86\":\"60.4\",\"87\":\"64.4\",\"88\":\"60.8\",\"89\":\"59.0\",\"90\":\"60.3\",\"91\":\"63.3\",\"92\":\"60.4\",\"93\":\"58.8\",\"94\":\"59.7\",\"95\":\"61.4\",\"96\":\"60.5\",\"97\":\"59.5\",\"98\":\"59.6\",\"_rn_\":\"SER\"},{\"1\":\"89.4\",\"2\":\"85.3\",\"3\":\"85.3\",\"4\":\"85.9\",\"5\":\"85.8\",\"6\":\"85.4\",\"7\":\"85.4\",\"8\":\"85.4\",\"9\":\"85.9\",\"10\":\"85.6\",\"11\":\"85.1\",\"12\":\"86.2\",\"13\":\"86.8\",\"14\":\"86.5\",\"15\":\"86.8\",\"16\":\"86.7\",\"17\":\"86.4\",\"18\":\"85.8\",\"19\":\"86.0\",\"20\":\"86.0\",\"21\":\"86.1\",\"22\":\"85.8\",\"23\":\"85.5\",\"24\":\"86.7\",\"25\":\"86.2\",\"26\":\"85.8\",\"27\":\"84.8\",\"28\":\"85.9\",\"29\":\"85.4\",\"30\":\"85.5\",\"31\":\"85.1\",\"32\":\"84.7\",\"33\":\"85.2\",\"34\":\"85.2\",\"35\":\"85.0\",\"36\":\"85.0\",\"37\":\"85.2\",\"38\":\"84.7\",\"39\":\"84.9\",\"40\":\"85.2\",\"41\":\"84.9\",\"42\":\"85.0\",\"43\":\"84.9\",\"44\":\"85.8\",\"45\":\"85.8\",\"46\":\"85.6\",\"47\":\"84.3\",\"48\":\"84.6\",\"49\":\"84.7\",\"50\":\"84.2\",\"51\":\"85.0\",\"52\":\"85.2\",\"53\":\"85.6\",\"54\":\"85.3\",\"55\":\"84.8\",\"56\":\"85.4\",\"57\":\"85.2\",\"58\":\"84.7\",\"59\":\"84.8\",\"60\":\"85.1\",\"61\":\"85.1\",\"62\":\"84.5\",\"63\":\"84.7\",\"64\":\"84.4\",\"65\":\"85.1\",\"66\":\"85.4\",\"67\":\"86.1\",\"68\":\"86.1\",\"69\":\"85.4\",\"70\":\"84.8\",\"71\":\"85.1\",\"72\":\"85.5\",\"73\":\"85.5\",\"74\":\"85.1\",\"75\":\"85.7\",\"76\":\"85.2\",\"77\":\"84.7\",\"78\":\"85.0\",\"79\":\"85.7\",\"80\":\"85.8\",\"81\":\"86.3\",\"82\":\"86.2\",\"83\":\"86.7\",\"84\":\"86.5\",\"85\":\"86.7\",\"86\":\"86.4\",\"87\":\"88.2\",\"88\":\"88.4\",\"89\":\"87.8\",\"90\":\"87.6\",\"91\":\"88.1\",\"92\":\"88.0\",\"93\":\"87.7\",\"94\":\"87.7\",\"95\":\"88.0\",\"96\":\"87.7\",\"97\":\"87.1\",\"98\":\"86.8\",\"_rn_\":\"VAB\"},{\"1\":\"10.6\",\"2\":\"14.7\",\"3\":\"14.7\",\"4\":\"14.1\",\"5\":\"14.2\",\"6\":\"14.6\",\"7\":\"14.6\",\"8\":\"14.6\",\"9\":\"14.1\",\"10\":\"14.4\",\"11\":\"14.9\",\"12\":\"13.8\",\"13\":\"13.2\",\"14\":\"13.5\",\"15\":\"13.2\",\"16\":\"13.3\",\"17\":\"13.6\",\"18\":\"14.2\",\"19\":\"14.0\",\"20\":\"14.0\",\"21\":\"13.9\",\"22\":\"14.2\",\"23\":\"14.5\",\"24\":\"13.3\",\"25\":\"13.8\",\"26\":\"14.2\",\"27\":\"15.2\",\"28\":\"14.1\",\"29\":\"14.6\",\"30\":\"14.5\",\"31\":\"14.9\",\"32\":\"15.3\",\"33\":\"14.8\",\"34\":\"14.8\",\"35\":\"15.0\",\"36\":\"15.0\",\"37\":\"14.8\",\"38\":\"15.3\",\"39\":\"15.1\",\"40\":\"14.8\",\"41\":\"15.1\",\"42\":\"15.0\",\"43\":\"15.1\",\"44\":\"14.2\",\"45\":\"14.2\",\"46\":\"14.4\",\"47\":\"15.7\",\"48\":\"15.4\",\"49\":\"15.3\",\"50\":\"15.8\",\"51\":\"15.0\",\"52\":\"14.8\",\"53\":\"14.4\",\"54\":\"14.7\",\"55\":\"15.2\",\"56\":\"14.6\",\"57\":\"14.8\",\"58\":\"15.3\",\"59\":\"15.2\",\"60\":\"14.9\",\"61\":\"14.9\",\"62\":\"15.5\",\"63\":\"15.3\",\"64\":\"15.6\",\"65\":\"14.9\",\"66\":\"14.6\",\"67\":\"13.9\",\"68\":\"13.9\",\"69\":\"14.6\",\"70\":\"15.2\",\"71\":\"14.9\",\"72\":\"14.5\",\"73\":\"14.5\",\"74\":\"14.9\",\"75\":\"14.3\",\"76\":\"14.8\",\"77\":\"15.3\",\"78\":\"15.0\",\"79\":\"14.3\",\"80\":\"14.2\",\"81\":\"13.7\",\"82\":\"13.8\",\"83\":\"13.3\",\"84\":\"13.5\",\"85\":\"13.3\",\"86\":\"13.6\",\"87\":\"11.8\",\"88\":\"11.6\",\"89\":\"12.2\",\"90\":\"12.4\",\"91\":\"11.9\",\"92\":\"12.0\",\"93\":\"12.3\",\"94\":\"12.3\",\"95\":\"12.0\",\"96\":\"12.3\",\"97\":\"12.9\",\"98\":\"13.2\",\"_rn_\":\"TAX\"},{\"1\":\"100.0\",\"2\":\"100.0\",\"3\":\"100.0\",\"4\":\"100.0\",\"5\":\"100.0\",\"6\":\"100.0\",\"7\":\"100.0\",\"8\":\"100.0\",\"9\":\"100.0\",\"10\":\"100.0\",\"11\":\"100.0\",\"12\":\"100.0\",\"13\":\"100.0\",\"14\":\"100.0\",\"15\":\"100.0\",\"16\":\"100.0\",\"17\":\"100.0\",\"18\":\"100.0\",\"19\":\"100.0\",\"20\":\"100.0\",\"21\":\"100.0\",\"22\":\"100.0\",\"23\":\"100.0\",\"24\":\"100.0\",\"25\":\"100.0\",\"26\":\"100.0\",\"27\":\"100.0\",\"28\":\"100.0\",\"29\":\"100.0\",\"30\":\"100.0\",\"31\":\"100.0\",\"32\":\"100.0\",\"33\":\"100.0\",\"34\":\"100.0\",\"35\":\"100.0\",\"36\":\"100.0\",\"37\":\"100.0\",\"38\":\"100.0\",\"39\":\"100.0\",\"40\":\"100.0\",\"41\":\"100.0\",\"42\":\"100.0\",\"43\":\"100.0\",\"44\":\"100.0\",\"45\":\"100.0\",\"46\":\"100.0\",\"47\":\"100.0\",\"48\":\"100.0\",\"49\":\"100.0\",\"50\":\"100.0\",\"51\":\"100.0\",\"52\":\"100.0\",\"53\":\"100.0\",\"54\":\"100.0\",\"55\":\"100.0\",\"56\":\"100.0\",\"57\":\"100.0\",\"58\":\"100.0\",\"59\":\"100.0\",\"60\":\"100.0\",\"61\":\"100.0\",\"62\":\"100.0\",\"63\":\"100.0\",\"64\":\"100.0\",\"65\":\"100.0\",\"66\":\"100.0\",\"67\":\"100.0\",\"68\":\"100.0\",\"69\":\"100.0\",\"70\":\"100.0\",\"71\":\"100.0\",\"72\":\"100.0\",\"73\":\"100.0\",\"74\":\"100.0\",\"75\":\"100.0\",\"76\":\"100.0\",\"77\":\"100.0\",\"78\":\"100.0\",\"79\":\"100.0\",\"80\":\"100.0\",\"81\":\"100.0\",\"82\":\"100.0\",\"83\":\"100.0\",\"84\":\"100.0\",\"85\":\"100.0\",\"86\":\"100.0\",\"87\":\"100.0\",\"88\":\"100.0\",\"89\":\"100.0\",\"90\":\"100.0\",\"91\":\"100.0\",\"92\":\"100.0\",\"93\":\"100.0\",\"94\":\"100.0\",\"95\":\"100.0\",\"96\":\"100.0\",\"97\":\"100.0\",\"98\":\"100.0\",\"_rn_\":\"GDP\"},{\"1\":\"60.7\",\"2\":\"64.4\",\"3\":\"65.5\",\"4\":\"64.5\",\"5\":\"64.2\",\"6\":\"65.6\",\"7\":\"65.6\",\"8\":\"64.7\",\"9\":\"63.5\",\"10\":\"64.9\",\"11\":\"65.3\",\"12\":\"64.9\",\"13\":\"63.5\",\"14\":\"64.1\",\"15\":\"64.3\",\"16\":\"64.4\",\"17\":\"63.3\",\"18\":\"65.0\",\"19\":\"64.5\",\"20\":\"63.6\",\"21\":\"63.4\",\"22\":\"64.3\",\"23\":\"63.9\",\"24\":\"62.4\",\"25\":\"62.5\",\"26\":\"63.0\",\"27\":\"61.8\",\"28\":\"61.5\",\"29\":\"60.9\",\"30\":\"62.6\",\"31\":\"62.2\",\"32\":\"61.2\",\"33\":\"60.7\",\"34\":\"61.5\",\"35\":\"60.0\",\"36\":\"60.1\",\"37\":\"59.7\",\"38\":\"61.3\",\"39\":\"59.4\",\"40\":\"59.8\",\"41\":\"60.2\",\"42\":\"61.6\",\"43\":\"60.0\",\"44\":\"62.7\",\"45\":\"62.7\",\"46\":\"62.7\",\"47\":\"59.7\",\"48\":\"59.1\",\"49\":\"59.3\",\"50\":\"60.9\",\"51\":\"59.6\",\"52\":\"59.3\",\"53\":\"59.8\",\"54\":\"61.0\",\"55\":\"59.0\",\"56\":\"59.7\",\"57\":\"61.1\",\"58\":\"62.2\",\"59\":\"60.1\",\"60\":\"60.2\",\"61\":\"60.1\",\"62\":\"61.7\",\"63\":\"60.4\",\"64\":\"59.7\",\"65\":\"59.1\",\"66\":\"61.6\",\"67\":\"60.0\",\"68\":\"60.9\",\"69\":\"62.1\",\"70\":\"64.8\",\"71\":\"61.6\",\"72\":\"61.5\",\"73\":\"61.5\",\"74\":\"63.1\",\"75\":\"62.9\",\"76\":\"63.6\",\"77\":\"65.0\",\"78\":\"65.1\",\"79\":\"65.1\",\"80\":\"64.8\",\"81\":\"64.9\",\"82\":\"63.6\",\"83\":\"64.4\",\"84\":\"65.2\",\"85\":\"63.4\",\"86\":\"65.8\",\"87\":\"63.6\",\"88\":\"63.3\",\"89\":\"63.2\",\"90\":\"66.7\",\"91\":\"63.8\",\"92\":\"64.0\",\"93\":\"66.3\",\"94\":\"67.5\",\"95\":\"65.2\",\"96\":\"64.4\",\"97\":\"64.8\",\"98\":\"66.4\",\"_rn_\":\"C\"},{\"1\":\"22.4\",\"2\":\"19.0\",\"3\":\"22.4\",\"4\":\"19.3\",\"5\":\"20.1\",\"6\":\"19.3\",\"7\":\"22.1\",\"8\":\"19.3\",\"9\":\"19.9\",\"10\":\"18.9\",\"11\":\"22.0\",\"12\":\"19.1\",\"13\":\"20.4\",\"14\":\"19.1\",\"15\":\"23.1\",\"16\":\"19.2\",\"17\":\"20.0\",\"18\":\"19.0\",\"19\":\"22.0\",\"20\":\"19.1\",\"21\":\"19.6\",\"22\":\"18.3\",\"23\":\"21.2\",\"24\":\"18.7\",\"25\":\"18.9\",\"26\":\"17.6\",\"27\":\"21.3\",\"28\":\"18.0\",\"29\":\"18.7\",\"30\":\"17.3\",\"31\":\"21.0\",\"32\":\"17.5\",\"33\":\"18.2\",\"34\":\"17.2\",\"35\":\"20.8\",\"36\":\"17.9\",\"37\":\"18.3\",\"38\":\"17.5\",\"39\":\"21.0\",\"40\":\"18.0\",\"41\":\"18.3\",\"42\":\"18.5\",\"43\":\"21.3\",\"44\":\"18.5\",\"45\":\"18.8\",\"46\":\"19.9\",\"47\":\"21.2\",\"48\":\"17.8\",\"49\":\"18.2\",\"50\":\"18.0\",\"51\":\"20.9\",\"52\":\"18.1\",\"53\":\"18.4\",\"54\":\"18.1\",\"55\":\"21.4\",\"56\":\"18.1\",\"57\":\"18.2\",\"58\":\"18.2\",\"59\":\"21.5\",\"60\":\"18.0\",\"61\":\"17.9\",\"62\":\"17.9\",\"63\":\"20.9\",\"64\":\"17.9\",\"65\":\"17.6\",\"66\":\"17.2\",\"67\":\"20.9\",\"68\":\"18.8\",\"69\":\"18.8\",\"70\":\"17.7\",\"71\":\"22.3\",\"72\":\"18.1\",\"73\":\"19.5\",\"74\":\"19.2\",\"75\":\"23.2\",\"76\":\"18.0\",\"77\":\"18.1\",\"78\":\"17.7\",\"79\":\"21.4\",\"80\":\"17.7\",\"81\":\"18.0\",\"82\":\"17.8\",\"83\":\"20.6\",\"84\":\"19.7\",\"85\":\"19.3\",\"86\":\"19.5\",\"87\":\"21.4\",\"88\":\"19.3\",\"89\":\"19.6\",\"90\":\"19.9\",\"91\":\"20.7\",\"92\":\"18.6\",\"93\":\"19.5\",\"94\":\"19.2\",\"95\":\"21.9\",\"96\":\"18.9\",\"97\":\"19.1\",\"98\":\"18.8\",\"_rn_\":\"G\"},{\"1\":\"15.0\",\"2\":\"15.8\",\"3\":\"14.8\",\"4\":\"16.3\",\"5\":\"15.3\",\"6\":\"15.0\",\"7\":\"15.2\",\"8\":\"16.3\",\"9\":\"14.7\",\"10\":\"14.7\",\"11\":\"14.6\",\"12\":\"14.9\",\"13\":\"14.3\",\"14\":\"14.5\",\"15\":\"14.6\",\"16\":\"15.6\",\"17\":\"15.9\",\"18\":\"16.1\",\"19\":\"16.4\",\"20\":\"17.9\",\"21\":\"18.0\",\"22\":\"19.0\",\"23\":\"19.2\",\"24\":\"19.8\",\"25\":\"19.9\",\"26\":\"20.7\",\"27\":\"20.3\",\"28\":\"21.5\",\"29\":\"21.1\",\"30\":\"20.7\",\"31\":\"20.5\",\"32\":\"21.1\",\"33\":\"20.6\",\"34\":\"20.7\",\"35\":\"20.1\",\"36\":\"21.3\",\"37\":\"20.3\",\"38\":\"20.7\",\"39\":\"20.0\",\"40\":\"21.5\",\"41\":\"20.5\",\"42\":\"20.1\",\"43\":\"19.8\",\"44\":\"20.2\",\"45\":\"18.3\",\"46\":\"17.8\",\"47\":\"18.9\",\"48\":\"20.8\",\"49\":\"19.2\",\"50\":\"18.6\",\"51\":\"18.1\",\"52\":\"18.8\",\"53\":\"17.8\",\"54\":\"17.3\",\"55\":\"16.6\",\"56\":\"17.5\",\"57\":\"17.3\",\"58\":\"17.5\",\"59\":\"16.4\",\"60\":\"17.5\",\"61\":\"17.3\",\"62\":\"17.1\",\"63\":\"16.8\",\"64\":\"17.9\",\"65\":\"17.3\",\"66\":\"17.3\",\"67\":\"16.1\",\"68\":\"16.3\",\"69\":\"16.4\",\"70\":\"17.7\",\"71\":\"17.7\",\"72\":\"17.9\",\"73\":\"17.8\",\"74\":\"18.3\",\"75\":\"16.8\",\"76\":\"18.2\",\"77\":\"19.2\",\"78\":\"19.7\",\"79\":\"17.1\",\"80\":\"17.4\",\"81\":\"18.4\",\"82\":\"20.5\",\"83\":\"16.1\",\"84\":\"16.9\",\"85\":\"17.5\",\"86\":\"17.6\",\"87\":\"17.2\",\"88\":\"18.5\",\"89\":\"19.2\",\"90\":\"19.3\",\"91\":\"18.1\",\"92\":\"19.2\",\"93\":\"19.8\",\"94\":\"19.5\",\"95\":\"18.0\",\"96\":\"18.7\",\"97\":\"19.2\",\"98\":\"18.7\",\"_rn_\":\"FBKF\"},{\"1\":\"-1.7\",\"2\":\"1.5\",\"3\":\"-2.3\",\"4\":\"1.1\",\"5\":\"-0.2\",\"6\":\"0.5\",\"7\":\"-3.4\",\"8\":\"-0.2\",\"9\":\"0.6\",\"10\":\"1.6\",\"11\":\"-1.8\",\"12\":\"0.5\",\"13\":\"-0.1\",\"14\":\"1.8\",\"15\":\"-2.1\",\"16\":\"0.2\",\"17\":\"-0.2\",\"18\":\"0.0\",\"19\":\"-3.0\",\"20\":\"-0.2\",\"21\":\"0.0\",\"22\":\"1.7\",\"23\":\"-1.2\",\"24\":\"1.4\",\"25\":\"0.7\",\"26\":\"1.9\",\"27\":\"-1.6\",\"28\":\"1.3\",\"29\":\"1.1\",\"30\":\"2.6\",\"31\":\"-1.7\",\"32\":\"0.9\",\"33\":\"1.7\",\"34\":\"2.2\",\"35\":\"-0.1\",\"36\":\"1.1\",\"37\":\"2.2\",\"38\":\"1.8\",\"39\":\"0.2\",\"40\":\"1.9\",\"41\":\"1.6\",\"42\":\"1.4\",\"43\":\"-0.1\",\"44\":\"-1.0\",\"45\":\"-0.5\",\"46\":\"0.4\",\"47\":\"0.3\",\"48\":\"2.1\",\"49\":\"3.4\",\"50\":\"3.3\",\"51\":\"0.6\",\"52\":\"2.4\",\"53\":\"2.2\",\"54\":\"2.2\",\"55\":\"0.4\",\"56\":\"1.1\",\"57\":\"1.1\",\"58\":\"-0.3\",\"59\":\"-1.2\",\"60\":\"0.3\",\"61\":\"1.4\",\"62\":\"0.2\",\"63\":\"-0.9\",\"64\":\"0.3\",\"65\":\"2.0\",\"66\":\"1.3\",\"67\":\"0.7\",\"68\":\"1.2\",\"69\":\"0.4\",\"70\":\"-1.4\",\"71\":\"-4.1\",\"72\":\"-0.1\",\"73\":\"2.1\",\"74\":\"0.5\",\"75\":\"-1.2\",\"76\":\"1.9\",\"77\":\"0.1\",\"78\":\"0.5\",\"79\":\"0.0\",\"80\":\"2.2\",\"81\":\"0.3\",\"82\":\"-0.2\",\"83\":\"1.2\",\"84\":\"0.1\",\"85\":\"1.4\",\"86\":\"-1.4\",\"87\":\"0.7\",\"88\":\"1.4\",\"89\":\"-0.3\",\"90\":\"-3.6\",\"91\":\"0.1\",\"92\":\"0.9\",\"93\":\"-3.5\",\"94\":\"-3.4\",\"95\":\"-1.8\",\"96\":\"0.4\",\"97\":\"-1.6\",\"98\":\"-2.6\",\"_rn_\":\"DE\"},{\"1\":\"19.6\",\"2\":\"14.7\",\"3\":\"14.3\",\"4\":\"14.8\",\"5\":\"14.7\",\"6\":\"13.5\",\"7\":\"15.4\",\"8\":\"16.6\",\"9\":\"14.6\",\"10\":\"12.8\",\"11\":\"12.0\",\"12\":\"12.8\",\"13\":\"13.2\",\"14\":\"12.1\",\"15\":\"11.3\",\"16\":\"12.2\",\"17\":\"13.4\",\"18\":\"13.0\",\"19\":\"14.0\",\"20\":\"14.1\",\"21\":\"12.8\",\"22\":\"10.5\",\"23\":\"10.5\",\"24\":\"11.7\",\"25\":\"11.4\",\"26\":\"10.4\",\"27\":\"12.4\",\"28\":\"12.5\",\"29\":\"11.8\",\"30\":\"10.1\",\"31\":\"12.0\",\"32\":\"12.5\",\"33\":\"12.4\",\"34\":\"10.5\",\"35\":\"12.2\",\"36\":\"12.3\",\"37\":\"11.5\",\"38\":\"10.2\",\"39\":\"11.0\",\"40\":\"11.4\",\"41\":\"11.2\",\"42\":\"9.8\",\"43\":\"9.5\",\"44\":\"10.9\",\"45\":\"11.7\",\"46\":\"11.6\",\"47\":\"15.5\",\"48\":\"14.2\",\"49\":\"12.8\",\"50\":\"11.3\",\"51\":\"12.7\",\"52\":\"13.8\",\"53\":\"13.4\",\"54\":\"13.5\",\"55\":\"14.0\",\"56\":\"16.0\",\"57\":\"13.7\",\"58\":\"13.7\",\"59\":\"14.3\",\"60\":\"15.9\",\"61\":\"15.4\",\"62\":\"15.4\",\"63\":\"16.0\",\"64\":\"17.9\",\"65\":\"17.2\",\"66\":\"14.9\",\"67\":\"14.9\",\"68\":\"15.2\",\"69\":\"14.8\",\"70\":\"15.9\",\"71\":\"18.1\",\"72\":\"17.3\",\"73\":\"10.6\",\"74\":\"10.2\",\"75\":\"12.3\",\"76\":\"13.7\",\"77\":\"12.6\",\"78\":\"10.7\",\"79\":\"9.9\",\"80\":\"10.9\",\"81\":\"10.3\",\"82\":\"9.5\",\"83\":\"10.0\",\"84\":\"10.1\",\"85\":\"9.2\",\"86\":\"8.8\",\"87\":\"6.5\",\"88\":\"7.3\",\"89\":\"7.5\",\"90\":\"6.8\",\"91\":\"6.9\",\"92\":\"7.5\",\"93\":\"7.5\",\"94\":\"6.0\",\"95\":\"6.3\",\"96\":\"7.0\",\"97\":\"7.1\",\"98\":\"6.5\",\"_rn_\":\"X\"},{\"1\":\"16.0\",\"2\":\"15.6\",\"3\":\"14.6\",\"4\":\"15.9\",\"5\":\"14.1\",\"6\":\"13.9\",\"7\":\"14.9\",\"8\":\"16.8\",\"9\":\"13.4\",\"10\":\"12.9\",\"11\":\"12.1\",\"12\":\"12.2\",\"13\":\"11.3\",\"14\":\"11.6\",\"15\":\"11.2\",\"16\":\"11.7\",\"17\":\"12.4\",\"18\":\"13.1\",\"19\":\"13.9\",\"20\":\"14.6\",\"21\":\"13.8\",\"22\":\"13.8\",\"23\":\"13.6\",\"24\":\"14.0\",\"25\":\"13.3\",\"26\":\"13.8\",\"27\":\"14.2\",\"28\":\"14.9\",\"29\":\"13.7\",\"30\":\"13.2\",\"31\":\"13.9\",\"32\":\"13.2\",\"33\":\"13.6\",\"34\":\"12.1\",\"35\":\"13.1\",\"36\":\"12.7\",\"37\":\"12.1\",\"38\":\"11.4\",\"39\":\"11.7\",\"40\":\"12.7\",\"41\":\"11.8\",\"42\":\"11.4\",\"43\":\"10.5\",\"44\":\"11.2\",\"45\":\"11.1\",\"46\":\"12.4\",\"47\":\"15.6\",\"48\":\"14.1\",\"49\":\"12.8\",\"50\":\"12.1\",\"51\":\"11.8\",\"52\":\"12.4\",\"53\":\"11.6\",\"54\":\"12.0\",\"55\":\"11.5\",\"56\":\"12.4\",\"57\":\"11.5\",\"58\":\"11.3\",\"59\":\"11.1\",\"60\":\"12.0\",\"61\":\"12.1\",\"62\":\"12.3\",\"63\":\"13.2\",\"64\":\"13.7\",\"65\":\"13.2\",\"66\":\"12.3\",\"67\":\"12.5\",\"68\":\"12.4\",\"69\":\"12.5\",\"70\":\"14.6\",\"71\":\"15.6\",\"72\":\"14.8\",\"73\":\"11.5\",\"74\":\"11.3\",\"75\":\"14.0\",\"76\":\"15.5\",\"77\":\"15.0\",\"78\":\"13.7\",\"79\":\"13.4\",\"80\":\"13.0\",\"81\":\"11.9\",\"82\":\"11.2\",\"83\":\"12.4\",\"84\":\"12.0\",\"85\":\"10.8\",\"86\":\"10.3\",\"87\":\"9.5\",\"88\":\"9.8\",\"89\":\"9.1\",\"90\":\"9.2\",\"91\":\"9.6\",\"92\":\"10.2\",\"93\":\"9.7\",\"94\":\"8.8\",\"95\":\"9.6\",\"96\":\"9.4\",\"97\":\"8.5\",\"98\":\"7.8\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\n\n\n# plot SECTORS function\nplot.sector.gg <- function(data, start.year=0, type=\"qtr\")\n{\n# TODO: ERROR CATCHING\n\n# index of years\nid.year <- (data$year >= start.year)\n\n# conditional date\nif(type==\"year\")\n{\nid.qtr       <- c(grepl(4, data$qtr)[-NROW(data)], TRUE)\nnewdata      <- data[(id.year & id.qtr),]\nnewdata$date <- newdata$year;\nnewdata      <- newdata[,c(\"date\", \"AGR\", \"IND\", \"SER\", \"TAX\")]\n} else\n{\nnewdata <- data[id.year, c(\"date\", \"AGR\", \"IND\", \"SER\", \"TAX\")]\n}\n\n# melt data\nnewdata <- melt( newdata, id=\"date\" )\n\n#plot\nggplot(newdata, aes( x = date, y = value, fill = variable) ) +\ngeom_bar( stat=\"identity\" ) +\ngeom_hline(yintercept=c(0, 100) ) +\nxlab(\"\") + ylab(\"\")\n}\n\n# Acutally plot Sectors\nplot.sector.gg(gdp.share, start.year=2019)\n\n\n\n\n# plot DEMAND function\nplot.demand.gg <- function(data, start.year=0, type=\"qtr\")\n{\n# TODO: ERROR CATCHING\n\ndata$M <- -data$M\n\n# index of years\nid.year <- (data$year >= start.year)\n\n# conditional date\nif(type==\"year\")\n{\nid.qtr       <- c(grepl(4, data$qtr)[-NROW(data)], TRUE)\nnewdata      <- data[(id.year & id.qtr),]\nnewdata$date <- newdata$year;\nnewdata      <- newdata[, c(\"date\", \"C\", \"G\", \"FBKF\", \"DE\", \"X\", \"M\")]\n} else\n{\nnewdata <- data[id.year, c(\"date\", \"C\", \"G\", \"FBKF\", \"DE\", \"X\", \"M\")]\n}\n\n# melt data\nnewdata <- melt( newdata, id=\"date\" )\n\n#plot\nggplot(newdata, aes( x = date, y = value, fill = variable) ) +\ngeom_bar( stat=\"identity\") +\ngeom_hline(yintercept=c(0, 100) ) +\nxlab(\"\") + ylab(\"\")\n}\n\n# Actually plot DEMAND\nplot.demand.gg(gdp.share, 2019)\n\n\nIn the plot above, notice that the rectangle above \\(100\\) is the same as the one below \\(0\\). This is because of the Identity \\(GDP_t = C_t + I_t + G_t + (X_t - M_t)\\). With \\(I_t\\) being equal to fixed investment plus Inventory variation. Inventory variation may be positive or negative, and depending on its sign, it shows either above or below zero in the graph. Above zero we have \\(C_t + I_t + G_t + X_t\\). Below zero we have imports \\(M_t\\) (and ocasionally the variation of inventory). Only the full sum \\(C_t + I_t + G_t + (X_t - M_t)\\) equals to \\(100\\). So, the part below \\(0\\) equals the part above \\(100\\).\nAC 4Q\n\n\n# visualize\npaged_table(gdp.table(gdp.share.ac, digits=1, period=\"year\"), list(rows.print=12) )\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"2020:Q2\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2019\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2018\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2017\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2016\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2015\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2014\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2013\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2012\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2011\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2010\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2009\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2008\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2007\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2006\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2005\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2004\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2003\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2002\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2001\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"2000\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1999\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1998\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1997\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1996\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"5.4\",\"2\":\"4.4\",\"3\":\"4.4\",\"4\":\"4.6\",\"5\":\"4.9\",\"6\":\"4.3\",\"7\":\"4.3\",\"8\":\"4.5\",\"9\":\"4.2\",\"10\":\"4.3\",\"11\":\"4.1\",\"12\":\"4.5\",\"13\":\"4.6\",\"14\":\"4.4\",\"15\":\"4.4\",\"16\":\"4.7\",\"17\":\"5.7\",\"18\":\"6.2\",\"19\":\"5.5\",\"20\":\"4.8\",\"21\":\"4.8\",\"22\":\"4.6\",\"23\":\"4.8\",\"24\":\"4.7\",\"25\":\"4.8\",\"_rn_\":\"AGR\"},{\"1\":\"17.7\",\"2\":\"17.9\",\"3\":\"18.1\",\"4\":\"18.2\",\"5\":\"18.4\",\"6\":\"19.4\",\"7\":\"20.5\",\"8\":\"21.2\",\"9\":\"22.1\",\"10\":\"23.1\",\"11\":\"23.3\",\"12\":\"21.9\",\"13\":\"23.1\",\"14\":\"23.1\",\"15\":\"23.5\",\"16\":\"24.2\",\"17\":\"24.3\",\"18\":\"23.1\",\"19\":\"22.5\",\"20\":\"22.6\",\"21\":\"23.0\",\"22\":\"21.7\",\"23\":\"22.1\",\"24\":\"22.6\",\"25\":\"22.3\",\"_rn_\":\"IND\"},{\"1\":\"63.3\",\"2\":\"63.3\",\"3\":\"63.0\",\"4\":\"63.3\",\"5\":\"63.2\",\"6\":\"62.3\",\"7\":\"61.3\",\"8\":\"59.7\",\"9\":\"58.7\",\"10\":\"57.6\",\"11\":\"57.6\",\"12\":\"59.1\",\"13\":\"56.8\",\"14\":\"57.7\",\"15\":\"57.1\",\"16\":\"56.1\",\"17\":\"54.9\",\"18\":\"56.4\",\"19\":\"57.3\",\"20\":\"57.7\",\"21\":\"58.3\",\"22\":\"60.2\",\"23\":\"61.1\",\"24\":\"60.6\",\"25\":\"60.3\",\"_rn_\":\"SER\"},{\"1\":\"86.4\",\"2\":\"85.6\",\"3\":\"85.6\",\"4\":\"86.1\",\"5\":\"86.4\",\"6\":\"86.0\",\"7\":\"86.0\",\"8\":\"85.4\",\"9\":\"85.0\",\"10\":\"85.0\",\"11\":\"85.0\",\"12\":\"85.5\",\"13\":\"84.5\",\"14\":\"85.3\",\"15\":\"85.1\",\"16\":\"84.9\",\"17\":\"84.9\",\"18\":\"85.6\",\"19\":\"85.3\",\"20\":\"85.2\",\"21\":\"86.0\",\"22\":\"86.6\",\"23\":\"88.0\",\"24\":\"87.9\",\"25\":\"87.4\",\"_rn_\":\"VAB\"},{\"1\":\"13.6\",\"2\":\"14.4\",\"3\":\"14.4\",\"4\":\"13.9\",\"5\":\"13.6\",\"6\":\"14.0\",\"7\":\"14.0\",\"8\":\"14.6\",\"9\":\"15.0\",\"10\":\"15.0\",\"11\":\"15.0\",\"12\":\"14.5\",\"13\":\"15.5\",\"14\":\"14.7\",\"15\":\"14.9\",\"16\":\"15.1\",\"17\":\"15.1\",\"18\":\"14.4\",\"19\":\"14.7\",\"20\":\"14.8\",\"21\":\"14.0\",\"22\":\"13.4\",\"23\":\"12.0\",\"24\":\"12.1\",\"25\":\"12.6\",\"_rn_\":\"TAX\"},{\"1\":\"100.0\",\"2\":\"100.0\",\"3\":\"100.0\",\"4\":\"100.0\",\"5\":\"100.0\",\"6\":\"100.0\",\"7\":\"100.0\",\"8\":\"100.0\",\"9\":\"100.0\",\"10\":\"100.0\",\"11\":\"100.0\",\"12\":\"100.0\",\"13\":\"100.0\",\"14\":\"100.0\",\"15\":\"100.0\",\"16\":\"100.0\",\"17\":\"100.0\",\"18\":\"100.0\",\"19\":\"100.0\",\"20\":\"100.0\",\"21\":\"100.0\",\"22\":\"100.0\",\"23\":\"100.0\",\"24\":\"100.0\",\"25\":\"100.0\",\"_rn_\":\"GDP\"},{\"1\":\"63.9\",\"2\":\"64.9\",\"3\":\"64.7\",\"4\":\"64.5\",\"5\":\"64.3\",\"6\":\"64.0\",\"7\":\"63.0\",\"8\":\"61.7\",\"9\":\"61.4\",\"10\":\"60.3\",\"11\":\"60.2\",\"12\":\"62.0\",\"13\":\"59.7\",\"14\":\"59.9\",\"15\":\"60.4\",\"16\":\"60.5\",\"17\":\"60.2\",\"18\":\"61.8\",\"19\":\"61.9\",\"20\":\"64.1\",\"21\":\"64.6\",\"22\":\"64.7\",\"23\":\"64.1\",\"24\":\"65.3\",\"25\":\"65.2\",\"_rn_\":\"C\"},{\"1\":\"20.7\",\"2\":\"20.3\",\"3\":\"20.1\",\"4\":\"20.2\",\"5\":\"20.4\",\"6\":\"19.8\",\"7\":\"19.2\",\"8\":\"18.9\",\"9\":\"18.5\",\"10\":\"18.7\",\"11\":\"19.0\",\"12\":\"19.7\",\"13\":\"18.8\",\"14\":\"18.9\",\"15\":\"19.0\",\"16\":\"18.9\",\"17\":\"18.5\",\"18\":\"19.1\",\"19\":\"19.8\",\"20\":\"19.3\",\"21\":\"18.8\",\"22\":\"19.8\",\"23\":\"20.1\",\"24\":\"19.5\",\"25\":\"19.8\",\"_rn_\":\"G\"},{\"1\":\"15.5\",\"2\":\"15.4\",\"3\":\"15.2\",\"4\":\"14.6\",\"5\":\"15.5\",\"6\":\"17.8\",\"7\":\"19.9\",\"8\":\"20.9\",\"9\":\"20.7\",\"10\":\"20.6\",\"11\":\"20.5\",\"12\":\"19.1\",\"13\":\"19.4\",\"14\":\"18.0\",\"15\":\"17.2\",\"16\":\"17.1\",\"17\":\"17.3\",\"18\":\"16.6\",\"19\":\"17.9\",\"20\":\"18.4\",\"21\":\"18.3\",\"22\":\"17.0\",\"23\":\"18.5\",\"24\":\"19.1\",\"25\":\"18.6\",\"_rn_\":\"FBKF\"},{\"1\":\"-0.3\",\"2\":\"-0.2\",\"3\":\"-0.4\",\"4\":\"0.1\",\"5\":\"-0.6\",\"6\":\"-0.4\",\"7\":\"0.7\",\"8\":\"0.8\",\"9\":\"0.7\",\"10\":\"1.2\",\"11\":\"1.3\",\"12\":\"-0.3\",\"13\":\"2.2\",\"14\":\"1.8\",\"15\":\"0.6\",\"16\":\"0.1\",\"17\":\"0.6\",\"18\":\"0.3\",\"19\":\"-0.5\",\"20\":\"0.3\",\"21\":\"0.6\",\"22\":\"0.4\",\"23\":\"-0.4\",\"24\":\"-1.4\",\"25\":\"-1.4\",\"_rn_\":\"DE\"},{\"1\":\"15.8\",\"2\":\"14.3\",\"3\":\"14.9\",\"4\":\"12.5\",\"5\":\"12.5\",\"6\":\"12.9\",\"7\":\"11.0\",\"8\":\"11.7\",\"9\":\"11.9\",\"10\":\"11.6\",\"11\":\"10.9\",\"12\":\"10.9\",\"13\":\"13.5\",\"14\":\"13.3\",\"15\":\"14.4\",\"16\":\"15.2\",\"17\":\"16.5\",\"18\":\"15.2\",\"19\":\"14.2\",\"20\":\"12.4\",\"21\":\"10.2\",\"22\":\"9.6\",\"23\":\"7.0\",\"24\":\"7.0\",\"25\":\"6.7\",\"_rn_\":\"X\"},{\"1\":\"15.5\",\"2\":\"14.7\",\"3\":\"14.5\",\"4\":\"11.8\",\"5\":\"12.1\",\"6\":\"14.1\",\"7\":\"13.7\",\"8\":\"14.0\",\"9\":\"13.2\",\"10\":\"12.4\",\"11\":\"11.9\",\"12\":\"11.3\",\"13\":\"13.7\",\"14\":\"12.0\",\"15\":\"11.7\",\"16\":\"11.8\",\"17\":\"13.1\",\"18\":\"13.0\",\"19\":\"13.4\",\"20\":\"14.6\",\"21\":\"12.5\",\"22\":\"11.4\",\"23\":\"9.4\",\"24\":\"9.6\",\"25\":\"8.9\",\"_rn_\":\"M\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[12],\"max\":[12]},\"pages\":{}}}\n  \n\n\n\n# plot SECTORS AC\nplot.sector.gg(gdp.share.ac, start.year=2014, type=\"year\")\n\n\n\n\n# plot DEMAND AC\nplot.demand.gg(gdp.share.ac, 2014, type=\"year\")\n\n\ndygraphs\nNow, let’s make interactive plots with dygraphs:\nBy Quarter\n\n\nvars <- c(\"AGR\", \"IND\", \"SER\", \"VAB\", \"TAX\", \"GDP\", \"C\", \"G\", \"FBKF\", \"DE\", \"X\", \"M\")\ntmp <- gdp.share[,vars]; tmp$M <- -tmp$M\ntmp.ts <- ts( tmp, start = c(1996,1), freq=4);\n\ndygraph(tmp.ts[,c(\"AGR\", \"IND\", \"SER\", \"TAX\")], main = \"GDP by Sectors\") %>%\n  dyStackedBarGroup(c(\"AGR\", \"IND\", \"SER\", \"TAX\")) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-5, 120) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-5,120]}},\"series\":{\"AGR\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"IND\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"SER\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"TAX\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"}},\"title\":\"GDP by Sectors\",\"labels\":[\"quarter\",\"AGR\",\"IND\",\"SER\",\"TAX\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[5.31034201695886,5.23077024282234,5.0091996218895,3.72150580447314,5.63074623074036,4.9916806011766,4.41604004193362,3.84848384741501,5.03555539051197,5.63702322049969,5.09322211947529,3.27223418434432,5.66094553166646,5.01928955238187,4.28125220265171,3.78010235400984,5.90295042988495,5.19752301932509,4.91354541075455,3.18897187698917,5.59586340389477,5.34845215179794,4.41907333130546,3.94075490065627,6.44882951404909,5.8618049944077,5.651169807417,4.1178992116423,7.76593966664504,6.97035390522324,5.7852779640485,4.42871375931673,7.72136579057478,7.17843183002741,4.97247327425623,3.20590059417578,5.52092783326224,5.07396657982132,4.78823789947433,3.38611536594514,5.06348534731073,4.50208112665874,4.63898786410643,3.41275580417596,5.43945574894051,4.87851655855447,4.31038544481195,3.20325660218021,5.95637366508601,5.62541235713368,4.18835424661514,2.73593895779169,5.44591813451477,5.09360607844583,4.45407018775738,3.16323031005532,4.93721265972317,4.2749610241493,4.197055674487,3.2082407134817,5.2864328503063,4.9532857778552,4.36476555715091,2.92099293379894,4.80838244112594,4.69250858949173,4.20166055936642,3.07994900915292,5.66867171077542,4.96050301958493,4.33323635717842,3.22808404769365,5.34868458154372,5.11793193330837,4.02682107291727,2.92830433767196,5.39607048444223,4.87364189393215,4.05252703909667,3.03739081004088,5.84303017935107,5.68056595380818,4.84010372519386,3.31517210548613,6.19021887903287,5.18188238094731,4.26143792466206,2.90326803856532,5.76925221519801,5.4559148240022,3.76827047459052,2.8103357322476,5.3438804639421,5.01602796821993,4.32418401364121,3.1688777209501,6.63688801223667,7.58745080813698],[21.9062296067922,22.4031965655212,22.1254224980067,22.8281480804727,22.3953856326435,23.889314048475,23.190093482139,20.99989374178,22.2548831111478,23.1735707243191,22.5200665713427,20.5550743607191,20.3473394055834,23.2510390211035,22.3053923590785,21.0444959681554,22.5277984201883,24.0663255358497,23.0139539038776,22.4451569559641,23.9910916913483,22.8532383758867,22.7898138858547,21.0792367923256,21.4973760924775,22.9507786183327,22.6159921624317,22.8169945216207,22.28006416129,22.932019070288,23.9943881651858,23.0466773453969,23.1077051029791,24.4554618374843,25.1510279264856,24.3730058603527,23.9343002321933,24.9700046961108,24.4538842720425,23.3767774428043,23.1095955306876,23.9304746812938,24.2246313203921,22.9266001155958,22.33744986479,23.1761533175605,24.0966391309105,22.8383313769449,21.2463317335376,22.9509657211067,25.209881576846,22.7007591043681,20.2094282248363,21.5298367432172,22.6217375618016,22.8656378196064,21.7409630162096,23.4230236977138,24.6038177112001,23.1488834280004,22.4918233830821,23.0418496911478,23.6785759824123,23.140341917634,21.9688429982008,22.3081132252244,22.7749548240776,21.4972082843995,20.9274968568318,21.2966536227423,22.2396542892357,20.4464035234111,20.4374178260439,20.0925934523899,21.5713935034977,19.7977138093868,19.1271412517096,19.1714302616961,20.3641068438959,18.7822848091174,17.4409610939386,18.343128704881,19.2066738974511,18.3820988295139,17.8700545287563,18.0318128100696,18.8871777727746,17.933507253948,17.4055803566526,17.9118939862173,19.006418964562,18.1549217079058,17.0796912169492,17.9568882761742,19.087076792699,17.5234559999696,16.9372552366937,17.3958088551458],[59.5994302531146,59.4741203416418,60.5187389200977,61.4252980541708,59.6551204289811,58.8383340569052,60.3880966101224,63.2581607633566,60.2957647365411,58.9651425551817,60.7501682268147,64.3583112719624,60.4328661761393,58.458442492185,59.948768753231,61.8398135585823,57.7929626615675,56.9974770667097,57.9205834970629,60.1136919317066,55.3658766966249,56.501084942042,57.9626112282547,60.7202808152779,57.1789065026573,56.708649038409,57.2491855225016,58.1756288378541,54.7237051374283,55.4644776425462,56.2903132441207,58.635448148965,54.5829370785532,53.5022124416762,54.2899746939588,57.1109149761238,55.0813740008918,55.0394119001895,55.8602886097237,58.0867904482718,56.494382408419,56.8172864494774,56.5765196674535,58.4969612827085,57.5638771863184,57.5429671372843,56.8033039988838,58.9157001032601,57.0130491410097,56.0847197525865,55.2363228910069,58.8652881972342,59.9262772814215,59.208167877609,58.6828737046117,58.8764624134406,58.2791984781079,57.248228543742,56.3678891665916,58.5550701680351,56.9406627536387,57.2364877863534,56.9862619784292,58.9858054615537,58.3959740158141,58.2289361845477,57.7254814164612,60.4783858725487,58.8778353390756,59.1686556625342,59.3548422914949,61.1701312538155,59.9917699198164,60.9987166570433,61.1024638400002,62.7895675702574,61.2898485837379,62.0164858458707,61.6242699720944,64.2073801743684,62.5225916937834,62.425636174634,62.6959381740075,65.060469899375,62.4511469593751,63.5628674881876,63.0517112775109,64.2288931818222,62.4002445088745,62.5310546134754,62.5835473075564,64.4605889804604,63.0084264451999,62.8299025389707,62.495106881365,64.6149653919641,61.7322214327402,64.4049100614112],[13.1839981231343,12.8919128011413,12.3466389148621,12.0250480608834,12.318747707635,12.2806712934432,12.0057699064258,11.8934616474485,12.4137967617991,12.2242634999995,11.6365430823673,11.8143801829741,13.5588489265043,13.2712289343297,13.4645866850388,13.3355880852629,13.7762884883592,13.7386743439612,14.1519172206783,14.2521792353401,15.0471682401351,15.2972244993829,14.8285015846581,14.2597274917402,14.8748878908161,14.4787673488506,14.4836525339798,14.8894774038411,15.2302910598102,14.6331494058096,13.930020649406,13.8891607463214,14.5879920278929,14.8638938908121,15.5865240855073,15.310178588362,15.4633979336527,14.9166168052062,14.8975892187595,15.1503167601474,15.3325367135826,14.7501577253873,14.559861148048,15.1636828127786,14.6592171841138,14.4023629866008,14.7896714253937,15.0427119176148,15.7842454603667,15.3389021561781,15.3654412855319,15.6980137283454,14.4183763592274,14.168389300728,14.2413185458294,15.0946694460339,15.0426258346777,15.0537867343949,14.8312374477213,15.0878056999403,15.2810810228103,14.7683767446436,14.9703964820076,14.9528596783986,14.8268005448591,14.770441992284,15.2979032000949,14.9444568338989,14.5259960852632,14.5741876951386,14.072267062091,15.1553811750798,14.2221276798112,13.7907579572584,13.2993215767455,14.4844142826838,14.1869396869745,13.9384419985011,13.9590961382826,13.9729442000242,14.1934170329269,13.5506691666769,13.2572842033475,13.242259165625,13.4885796391281,13.2234373207955,13.7996730311216,14.9343315256644,14.4249229253068,14.101136570439,14.6417632532911,14.5741535793862,14.5680018739088,14.1971812166352,14.0936323122948,14.6927008871162,14.6936353183295,10.611830275306]]},\"evals\":[\"attrs.series.AGR.plotter\",\"attrs.series.IND.plotter\",\"attrs.series.SER.plotter\",\"attrs.series.TAX.plotter\"],\"jsHooks\":[]}\ndygraph(tmp.ts[,c(\"C\", \"FBKF\", \"DE\", \"G\", \"X\", \"M\")], main = \"GDP by Demand\") %>%\n  dyStackedBarGroup( c(\"C\", \"G\", \"X\", \"FBKF\", \"DE\") ) %>%\n  dyStackedBarGroup( c(\"M\") ) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-20, 140) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-20,140]}},\"series\":{\"C\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"G\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"X\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"FBKF\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"DE\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"M\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"}},\"title\":\"GDP by Demand\",\"labels\":[\"quarter\",\"C\",\"G\",\"X\",\"FBKF\",\"DE\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[66.3864648976001,64.7624212920976,64.4017186090079,65.2222473054325,67.456158708205,66.3175025441954,64.0177043484082,63.7853537811852,66.6535606528035,63.1882778395371,63.3410435074696,63.5781779461343,65.7813024449309,63.3592910240858,65.2297587917085,64.4361316876919,63.5637859879431,64.8918400014798,64.7505052075006,65.0563915455046,65.084467538364,64.9578312217732,63.6000021757198,62.9217049452846,63.077718566814,61.4640391949992,61.5215393480405,61.6456611567296,64.8049218802085,62.1205218338426,60.8728522923203,59.9747900281629,61.6388632836843,59.1192273170321,59.7485010966354,60.4314524330989,61.744595155661,60.0779467795697,60.2135326455023,60.1080428197517,62.2443028695427,61.1393850580994,59.6803904456028,59.0005155748478,60.9732129082417,59.7552242950844,59.3129378064567,59.5660659689012,60.9156588740645,59.3187539509048,59.127111061484,59.6865775204107,62.7227332044386,62.7469023535995,62.660659734139,59.9845199153843,61.6418588914291,60.2203354523466,59.7967381858309,59.4376180031154,61.3444271985281,59.6891028875826,60.1089146965467,60.0418108802278,61.5065855098767,60.6973338160395,61.2419553615073,62.1568976652069,62.6372217249726,60.9402939082949,61.5260570414467,61.8117633062063,63.0477108792153,62.4608510205698,62.3787403854246,63.9117247972269,64.2940115854379,63.4183163247264,63.6244551724326,64.5081757663829,64.9687770874306,63.3026969705466,64.419781562164,64.3355803595953,64.1372751257552,63.4775333108122,64.9228749199204,65.3383267175707,64.8939909948398,63.5338764624744,64.7245851321461,65.6229562822214,65.5795498283863,64.2124821524735,64.4936053250195,65.4673802513563,64.44442835453,60.6624073032234],[18.8387168243679,19.0716759507554,18.8749262829598,21.8637979052746,19.2312815982999,19.5305668428544,18.6165515341625,20.6927805308165,19.9380102482419,19.5711232142525,19.3143074752417,21.442687392427,19.4931501384629,19.2582627259233,19.6786075719546,20.6053364930655,17.7723596003544,17.9977553289497,17.6720926013472,21.3877345992752,17.6624703203857,18.1288147011165,18.0401277186461,23.2382553783739,19.1930376761787,19.4681497176184,18.1021434432891,22.2763590250934,17.6681909811918,18.7527745543185,18.7898466910266,20.8558001281615,17.2191599804986,17.5925101649128,17.8844350058899,20.8852914649539,17.92283114084,17.9130563023801,17.9947214338904,21.4678354671844,18.220627420066,18.1671687785868,18.1072709364401,21.3834577686213,18.1318803261977,18.4379801568776,18.0865836590768,20.9301264196479,18.0314334995129,18.1647841223393,17.819869844961,21.1969943228189,19.9068910355867,18.7766270702875,18.4652477085815,21.3014182139631,18.4708975945286,18.3025859674169,18.0312292276247,21.0425507131343,17.4895028386938,18.3139390645901,17.8927592931845,20.7790961015416,17.2239946751752,18.2152452205315,17.5182156114933,20.9621000397265,17.2748785737617,18.6780462228438,18.0459224332467,21.3254099524934,17.6400626831117,18.9241042616655,18.6631047473894,21.2356069206708,18.2811128391732,19.6056547131036,19.090207703708,22.0133161631932,18.9867717444034,20.0257646584506,19.2275226510882,23.1055320473696,19.0666295005127,20.4295620020086,19.0791350930457,21.9899202725349,18.8816919553101,19.9435223970916,19.3344339510701,22.0625031147764,19.2808353523131,20.096694983236,19.2592739423869,22.3684695454145,19.048290502716,22.3946958942926],[6.49992962223845,7.12392341636182,7.02462552278095,6.30325318965321,6.00683554111422,7.47211059207354,7.52648355664909,6.85228148486447,6.83021075890992,7.46404020524603,7.28010169158999,6.53794866445854,8.8377352670073,9.2024309753962,10.0852399219886,10.030676758476,9.5338706744993,10.3278509264696,10.9317364013793,9.90879379551038,10.7455098898017,12.6148236245856,13.7436495845574,12.2945837243851,10.1699890287451,10.5879492685064,17.3499028599494,18.0955410829136,15.867145118625,14.8361288338497,15.1937325100971,14.8911154961883,14.9089815065666,17.2167774469696,17.8804237625444,16.0330973357961,15.4276162862532,15.4407453871623,15.9329007526581,14.2510365223297,13.7209697516746,13.7018820876097,15.9599007396816,14.0291935822263,13.4733085097631,13.3577778588021,13.8479877967303,12.6776744051886,11.2995653853656,12.786143594032,14.205595799145,15.5211951361783,11.5608450568127,11.6852221634335,10.8937265516583,9.50139780658248,9.79258092470866,11.1523468958255,11.4461226810144,10.9611272553487,10.205699495586,11.5019000411164,12.324188817993,12.1529659013504,10.5396636812293,12.3821202183942,12.4590779863698,12.0336725196528,10.0933114250318,11.8171848538733,12.5401458477456,12.3562060003171,10.4255454372246,11.3942798958159,11.7400998852256,10.4844736078968,10.5258492025087,12.8263001627586,14.098621731802,14.0358176115699,13.0293129845117,13.3555652319989,12.2298976024493,11.3314521232225,12.1006361002823,13.2372358100865,12.7747179975773,11.9917912820837,12.8094143431557,14.6030602589537,16.6074860889403,15.4225919710899,13.4913481170799,14.6664078330434,14.8132764349666,14.275884279063,14.7385440235833,19.6212228815803],[18.6998408903176,19.2199520955227,18.6975605372678,18.0458688919192,19.4857657662489,19.8332037870853,19.2084758134451,18.0752673280553,19.3443535095387,19.2030237582794,18.4604812286579,17.2396869435963,17.6012036932011,17.5477822134613,16.9204074562535,16.1218635394348,20.5422157711593,18.4129731941232,17.4423138862498,17.1027678216641,19.742461630292,19.1728048271635,18.1723146918699,16.7571075281141,18.3483899547591,17.8486720781817,17.8812318370937,17.6785897330568,17.6873862499029,16.3956672075738,16.3388884679942,16.1167372949281,17.2662517241349,17.2972543576449,17.94833808723,16.7835169345714,17.0886181024158,17.3145212633979,17.4789482983314,16.3895390658172,17.4505197981635,17.3086878703457,17.5396150940795,16.6092915630159,17.3048719577379,17.7687504070193,18.7788463197707,18.0600773539002,18.5900539755746,19.1978787705276,20.7833431849716,18.8636390986162,17.8468342365201,18.3382054084251,20.2125808766674,19.7707098799252,20.079510662432,20.4833811369767,21.525857037063,20.0265700327508,20.6571830446091,20.3330235216174,21.3188700593947,20.1448029785606,20.6534306790844,20.6436159195325,21.0977516867107,20.4722468394007,20.6670530648553,21.1354030721408,21.5167304716725,20.3384103669986,20.7366709724598,19.8560281618883,19.8106069083078,19.1561277884993,19.0341152712604,18.0385235997725,17.9221432168467,16.4324786888527,16.0519142000432,15.9071115499557,15.6361680553449,14.5673677335008,14.4966480428039,14.2685409653715,14.8995774184245,14.584569903826,14.6551500351908,14.7131298231084,16.3241945204533,15.2175754885633,15.0107635416489,15.3267078113678,16.2570643232424,14.8238020380617,15.8065978894524,14.9702975747826],[-2.62200031564948,-1.63957570778113,0.448722128360562,-1.84572624374411,-3.3567910941393,-3.46204546352494,0.855565397344553,0.147196429084825,-3.55345827674007,-0.338556938926512,1.43426925114303,0.678920783137933,-1.40224503547998,1.42483808995541,0.113770494318221,1.1673668589364,-0.179302078954147,0.317820923862742,2.20303445440276,-0.0190179251633112,0.494936855180106,0.131564443521852,1.9382726242674,-1.19802346836137,0.527046849376978,2.1304391124828,-0.0619737727682438,-4.13168674436668,-1.42285648027087,0.418876573450924,1.18448680708301,0.653396022706013,1.25814843591579,1.95794976564517,0.263264581192271,-0.905658686048813,0.154778239102545,1.37226933179595,0.340439618716112,-1.16355687964735,-0.308045134385398,1.1458134683717,1.10387094323856,0.430951172212539,2.15029149571405,2.23912369565406,2.39146443316806,0.614902701430117,3.30089323289784,3.36646834844986,2.12956864906616,0.33835900542199,0.363713160200082,-0.483393203848675,-0.991765554584481,-0.0652574861349876,1.44051071576506,1.61726251322963,1.91102846759534,0.199668296306753,1.75132669324892,2.21226273352981,1.08334705380532,-0.0534248534863896,2.21010801081447,1.66322809821669,0.915069078569274,-1.74347844546697,2.55857792300564,1.1422344526986,1.27509095782844,-1.58895575961997,1.92454486784985,0.689563483744099,1.38933859336204,-1.1775612961017,1.7111569125662,-0.0437518477724348,-0.165615035114387,-3.04503745177226,0.0234827791987099,-0.222432583718825,0.190271680355306,-2.1212294247926,1.77372676299258,-0.0891721016565188,0.480221459034522,-1.76661295931241,1.61969045528309,0.590941412801484,-0.214429239082621,-3.42196087271365,0.538547429077285,-0.158567225359963,1.07684741742493,-2.32323587988543,1.53516274517916,-1.65956349274481],[-7.80295186605482,-8.53839704695641,-9.44755308037703,-9.58944104853535,-8.82325051972884,-9.69133830268366,-10.2247806500095,-9.55287955400633,-9.21267689275388,-9.08790807838847,-9.83020311534895,-9.47742169079369,-10.3111465081223,-10.7926050288221,-12.0277842362234,-12.3613753376046,-11.232929955002,-11.9482404090395,-12.9996825832529,-13.4366698055879,-13.7298462660265,-15.0058388181607,-15.4943667950606,-14.0136281077963,-11.3161820466594,-11.4992493445675,-14.7928437156045,-15.5644642534267,-14.6047877244836,-12.5239690269026,-12.3798067912821,-12.4918389485191,-12.2914049532831,-13.1837190522046,-13.7249625532842,-13.2276994823715,-12.3384389242725,-12.118539064306,-11.9605427671861,-11.0528970126041,-11.3283747050615,-11.4629372630133,-12.3910481590426,-11.4534096609238,-12.0335652134918,-11.5588564134374,-12.4178200152026,-11.848846849068,-12.1376049674155,-12.8340287862535,-14.0654885396278,-15.6067650711855,-12.4010167200088,-11.0635637918968,-11.2404493164617,-10.49278832972,-11.4253587888634,-11.7759119657952,-12.710975609149,-11.667534300656,-11.4481392509911,-12.0502282484362,-12.7280799119342,-13.0652510081939,-12.1337825561801,-13.6015432727145,-13.2320697165233,-13.8814386263834,-13.231042727735,-13.7131625098513,-14.90394675194,-14.2428338663954,-13.7745348398612,-13.3248268307145,-13.9818905265488,-13.610371818192,-13.8462458040821,-13.8450429593449,-14.5698127963052,-13.9447507782265,-13.0602587955877,-12.3687058208157,-11.7036415514017,-11.2187028388957,-11.5749155323466,-11.3236999866223,-12.1565268880024,-12.1379952167029,-12.8599377898114,-13.3845303544296,-16.7762704477699,-14.9036659839373,-13.9010442685055,-14.1437255491921,-15.9000674430403,-14.61230023401,-15.5730235154608,-15.9890601611341]]},\"evals\":[\"attrs.series.C.plotter\",\"attrs.series.G.plotter\",\"attrs.series.X.plotter\",\"attrs.series.FBKF.plotter\",\"attrs.series.DE.plotter\",\"attrs.series.M.plotter\"],\"jsHooks\":[]}\nAC4Q\n\n\ntmp <- gdp.share.ac[,vars]; tmp$M <- -tmp$M\ntmp.ts <- ts( tmp, start = c(1996,1), freq=4);\n\ndygraph(tmp.ts[,c(\"AGR\", \"IND\", \"SER\", \"TAX\")], main = \"GDP by Sectors\") %>%\n  dyStackedBarGroup(c(\"AGR\", \"IND\", \"SER\", \"TAX\")) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-5, 120) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-5,120]}},\"series\":{\"AGR\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"IND\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"SER\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"TAX\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"}},\"title\":\"GDP by Sectors\",\"labels\":[\"quarter\",\"AGR\",\"IND\",\"SER\",\"TAX\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[null,null,null,4.76841119908053,4.86603310750302,4.81633399966823,4.66565044527311,4.68504702949228,4.55641355735218,4.72941333782745,4.90050869091157,4.7500447835131,4.90834195652095,4.75964296304452,4.55280383879491,4.64598153089318,4.73006779133264,4.78204189098834,4.93372778652594,4.75045997570861,4.70591842323532,4.75654154625107,4.63187940233063,4.80104301642181,5.03564363470133,5.18121975222853,5.4818945055379,5.47527489376074,5.8488519406641,6.14040845569149,6.1584055815309,6.16718439147129,6.19900671103814,6.28033766898873,6.04630927640725,5.66531157603221,5.17509457408449,4.68180303269658,4.6401680515371,4.65116882283132,4.55854890137791,4.42256387389401,4.39326893436411,4.37004377383362,4.48702955853012,4.58557919325354,4.50125808640504,4.41691543234317,4.57776537506522,4.78622722627987,4.73437396648927,4.56785118317928,4.46487484566367,4.3432194599118,4.41148795375657,4.47677399182984,4.38302996896344,4.19627672006456,4.13783929237308,4.11575648747581,4.23077008118894,4.40954502494548,4.44751430895548,4.3420341299196,4.24552000021939,4.19311945367803,4.15476396787201,4.1683282240444,4.39969752394517,4.47771832486858,4.50546891546237,4.50688618214267,4.45651831495526,4.50568878842937,4.42358616111954,4.32561053879483,4.3498095810525,4.29612510416981,4.30055205536583,4.31914942942436,4.43774562086557,4.64889037765324,4.84305662060767,4.89135358685971,4.99154961160469,4.87300803899834,4.72607614995617,4.60210116052405,4.51356798277787,4.59011550162836,4.46006498339964,4.41853769167898,4.32619734485518,4.22872035974967,4.36510520767551,4.43654479472404,4.76408166112427,5.35008769454896],[null,null,null,22.3401145483349,22.4466710815098,22.8244736109296,23.0856538206173,22.5941476157036,22.5565572748108,22.3996935686123,22.236107509781,22.1187903791379,21.6507724450758,21.6956025244946,21.652192146757,21.7467112569757,22.2557753321433,22.4865844998223,22.6678328824148,23.0066186321239,23.3631744764994,23.0700631365731,23.0112220716332,22.6395279206454,22.0351221974826,22.0866148092867,22.0637979283708,22.4953278215365,22.6612140142867,22.6656572953493,23.0298096897768,23.0838178233212,23.2706830390996,23.6605076957077,23.980641641738,24.306623290035,24.4791324086992,24.6118701530129,24.4416967411814,24.172578278061,23.9613066456175,23.7155908295024,23.6755049399027,23.5440216715158,23.3344716426165,23.1585541309377,23.1549066992276,23.1253804129963,22.8253088502792,22.7775121014596,23.1297415983421,23.0852937511155,22.8110034426371,22.4542759715904,21.8048693315777,21.8785926250332,22.2077881314046,22.6773227534395,23.202779748644,23.2679773541452,23.4085549040652,23.3094424797439,23.1032377190124,23.1020509630306,22.9551219659,22.7676406112127,22.554142118219,22.1336473656008,21.8674681779956,21.6155542307847,21.5035191250632,21.2248099475746,21.0929363778433,20.7894360004417,20.6450798039093,20.4724627471447,20.1457286711181,19.9144172348114,19.6214138493899,19.3600439775462,18.9396814554984,18.7316213231111,18.4547064809418,18.3547582771232,18.449100099101,18.3688181430936,18.296965087807,18.181269965803,18.0623006887282,18.0315714874907,18.0731849749145,18.1291453541619,18.0412525528623,18.0510446565173,18.0859449469312,17.922226420092,17.8782747230384,17.7477558340966],[null,null,null,60.3188798043257,60.3084424559941,60.1203894139542,60.0965644510189,60.6057128222464,60.7453224120439,60.7408945055425,60.8301759192275,61.1185930542525,61.1402690929958,60.9733221974559,60.7607164991731,60.2036566374422,59.5527935703335,59.1537725019813,58.6431604031205,58.2518612416253,57.6243869543756,57.482089581577,57.5009666303306,57.7136922463033,58.1228579421302,58.1268014104796,57.9327755957803,57.3481454771489,56.7103359998801,56.3835256159594,56.1601145002038,56.3578281380465,56.2783599114463,55.7333029911773,55.2191196609409,54.9204711078884,55.0350122296942,55.393527983424,55.7793404068243,56.0758916106396,56.4034783403732,56.831096767117,56.9934857077768,57.1381272102654,57.3897303796549,57.5590005244721,57.590782000799,57.7262362097238,57.5815284128208,57.193231301672,56.7560820016934,56.8048617737801,57.5062040932336,58.278344593162,59.1509616951385,59.1450592146825,58.7528919090631,58.2571841312496,57.6574352711029,57.6129219715132,57.2956998158617,57.2910042597277,57.4272646072144,57.568169322112,57.9185255680613,58.1602389256215,58.3241276246835,58.7336025056285,58.8473502172405,59.075642761115,59.468582170348,59.6787579896523,59.9395825697573,60.392626643436,60.8224869686708,61.2509740086137,61.5589859746091,61.8084955054535,61.9352141313249,62.3078671740674,62.6067961549027,62.7034901802488,62.9647084807478,63.20369583311,63.1762299206114,63.4561726315758,63.5380553450599,63.3398442335849,63.3179905208644,63.0589487517761,62.9394849823719,63.0140750086837,63.1589474975549,63.2269754456963,63.1946823876509,63.2529200476678,62.9365400113546,63.3006547169398],[null,null,null,12.5725944248606,12.3788533323829,12.2388029644931,12.1521312937573,12.1150925430609,12.1417067661165,12.129998598142,12.0332078800799,12.0125717830966,12.3006165152373,12.5714323246753,13.0342875247972,13.403650574689,13.4613632972136,13.5776010896341,13.7552789194123,13.9910601505421,14.3065201539892,14.6913057435004,14.8559319034623,14.8457368242297,14.8063762256859,14.6053640352035,14.5215319772724,14.6812518075538,14.779598051647,14.8104086455362,14.6516702405737,14.3911696646237,14.2519503497442,14.3258516495959,14.7539294156346,15.1075940260444,15.3107607875221,15.3127988260273,15.1387948004571,15.100361288468,15.0766661126314,15.0307485294866,14.9377404179564,14.9478073443852,14.7887684151769,14.6968661513366,14.7530532135684,14.7314679412606,15.0153973618348,15.24302936714,15.3798024301645,15.5419932854938,15.2179176121242,14.924159972199,14.6326810164295,14.4995741654542,14.6562899847941,14.8692163896967,15.0019456825452,15.0033441868657,15.0649752038643,14.9900082403924,15.0219833694984,14.9877455849378,14.8808324635918,14.8790010051265,14.9669662849736,14.9644219026494,14.8854840767594,14.831084681258,14.5224297871997,14.5895458787548,14.5109627392703,14.3122485694864,14.1088470663003,13.9509527054468,13.9454757732203,13.9809621555653,14.1428199639194,14.0129394172942,14.0157767654211,13.9159981157171,13.7375284160861,13.5501923029071,13.3831203702554,13.3020011878863,13.4389034202516,13.8767846431261,14.1061408106361,14.3193642605923,14.527265059314,14.4382419454755,14.4736026032902,14.4932595380367,14.3542674577424,14.3883087375161,14.4211036044827,13.6015017544146]]},\"evals\":[\"attrs.series.AGR.plotter\",\"attrs.series.IND.plotter\",\"attrs.series.SER.plotter\",\"attrs.series.TAX.plotter\"],\"jsHooks\":[]}\ndygraph(tmp.ts[,c(\"C\", \"FBKF\", \"DE\", \"G\", \"X\", \"M\")], main = \"GDP by Demand\") %>%\n  dyStackedBarGroup( c(\"C\", \"G\", \"X\", \"FBKF\", \"DE\") ) %>%\n  dyStackedBarGroup( c(\"M\") ) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-20, 140) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-20,140]}},\"series\":{\"C\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"G\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"X\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"FBKF\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"DE\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"M\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"}},\"title\":\"GDP by Demand\",\"labels\":[\"quarter\",\"C\",\"G\",\"X\",\"FBKF\",\"DE\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[null,null,null,65.1573992174822,65.4637746322988,65.8387912365617,65.7001441951415,65.3096296909024,65.1510873781706,64.3754134258318,64.1964870553925,64.1423007693591,63.9643225955923,63.9961729060498,64.4791493805867,64.6801194338542,64.1548140526051,64.5322643285556,64.4267174868789,64.5927003352349,64.9479441779946,64.9634528659047,64.662799391698,64.107708373074,63.6188718069159,62.7370412042359,62.2159128227363,61.8984350412176,62.3848618719777,62.5274763013365,62.3190607811833,61.8446504233421,61.1267351735655,60.3699713527967,60.0875622940068,60.2065771878033,60.2719161565871,60.4903971268377,60.5953037755417,60.5042517756093,60.659139007826,60.9192038283699,60.7585991694094,60.4376764506998,60.1709632803771,59.8438469022912,59.7433228938902,59.8749475746359,59.8919328375812,59.7714433257875,59.7031204120595,59.7307926830048,60.1805876715628,61.0355116514607,61.9452436794247,61.9564598766094,61.7086444598571,61.0872303145567,60.385779871041,60.2228291525574,60.1935250173683,60.0556223731396,60.1299570959419,60.2738517807569,60.3415825858347,60.5879892877156,60.8723442366115,61.4118668448687,61.6989525319052,61.734805979289,61.7971855714043,61.7152500945451,61.843443162724,62.2151717005527,62.4214324464037,62.9595707059739,63.2710157592372,63.5029698191227,63.8098323310236,63.9647972801569,64.1346822769951,64.0960732744896,64.2936071833925,64.2514795844148,64.0537976987652,64.089389748238,64.2204013651023,64.4826568483162,64.6676870069441,64.6693955749246,64.6221582480788,64.7040982667212,64.8760021421508,65.0315571903151,64.9675230667303,64.9362518767558,64.6639706775449,63.8569968749045],[null,null,null,19.7508265044786,19.8173484392838,19.911323851614,19.8162100704785,19.5352948087087,19.7020536784766,19.7090915182887,19.8762495203031,20.0705315848897,19.9589680009291,19.8713802389874,19.9579420882499,19.782690769704,19.348086160535,19.0218918934955,18.5128877243758,18.7678457360734,18.7113759598223,18.7274565805869,18.803041404592,19.3432950140464,19.6953912017121,20.0003516588045,19.9522436728084,19.8096623469678,19.3953333500102,19.2098111919531,19.3525226132131,19.0774784933715,18.9264035112535,18.6146850850943,18.3792732001863,18.4675839248222,18.6082222848268,18.6648722002628,18.6761390788936,18.8900014184589,18.9404659016628,18.9845746309965,18.9868041237919,19.0389169374901,18.9909920786548,19.0331490612661,19.0018855535747,18.9429876148938,18.8941014274485,18.8060501261856,18.7055335048372,18.8393928751789,19.2777349239914,19.4200733746943,19.5706271522039,19.65063840422,19.292749914207,19.1484293454636,19.0064580357883,19.0168578428585,18.7507544410155,18.7383566583089,18.6833782616505,18.6692569360109,18.5727775708348,18.5418725817491,18.4275987915619,18.530103265791,18.5131959631435,18.6258093909884,18.7370978364128,18.8924790008646,18.9422726602677,19.0003147244223,19.1409519257616,19.1535387102127,19.2948438511928,19.4619717566883,19.5639813257071,19.7768199570799,19.9414880375815,20.044225758026,20.0685960794786,20.3792974318779,20.3796053296952,20.4779818901209,20.4268514521319,20.1685198605749,20.1110619324359,19.9911862263004,20.0443306084409,20.0849130898821,20.1721859264308,20.2082573798372,20.175978882402,20.2825655903537,20.2147709395042,20.7452841767899],[null,null,null,6.73020969482599,6.60030717797722,6.7053604202818,6.84554303563319,6.98364957530894,7.16727294466257,7.17109267395039,7.11170742634102,7.03050033871807,7.522209121522,7.97298694622731,8.69459800620675,9.56489827017302,9.7208128941223,9.99938406518275,10.2248786915663,10.1880480043795,10.4758653134962,11.0572382328741,11.7802179281586,12.37171066993,12.1892593161653,11.6666450798775,12.6884508375127,14.2305902723334,15.5520875931455,16.5071481043839,15.9650512991721,15.1807837028652,14.9578745037386,15.5810424902282,16.284205082328,16.5457615119353,16.6298603874476,16.1848376439103,15.7137108172508,15.2438292665623,14.8232200496525,14.3903407656878,14.4403848427439,14.3743163008972,14.2911561033536,14.1812532433236,13.6794178938789,13.327675103099,12.7792495646394,12.6472776599881,12.7914867999597,13.5340005119683,13.5654173959918,13.2795853391428,12.4161723875463,10.8513711310977,10.4254891174338,10.3350215305204,10.5036862283287,10.8655847744169,10.9353843641405,11.0341677879591,11.2737752938459,11.5825126803012,11.6318974693143,11.8562620552193,11.9032965695844,11.8775390673678,11.7346010613342,11.6049478953894,11.6464540234138,11.7422306430422,11.7828592906363,11.6755944544789,11.4862081943184,11.0119428207843,11.0298160672552,11.3921675152638,11.9923251181197,12.9001914177405,13.5050908176675,13.6312551801977,13.1599750926466,12.4666790443888,12.2425294154949,12.2255233462774,12.3635732108343,12.5230753666957,12.6953633382485,13.0474127881,14.0210904119766,14.889699895201,15.0385651284692,15.0490762776631,14.6099635271255,14.3224188515098,14.6202662944967,15.7581543288099],[null,null,null,18.6406537838098,18.8373317540322,19.005642302472,19.1316980409845,19.1229011258392,19.0947044574777,18.9482060838143,18.7582001082192,18.5423485026572,18.1246345779921,17.7120111643922,17.3214695739169,17.0162942226036,17.7612020143946,17.9792760616675,18.0853432033151,18.30448803112,18.1665009575819,18.3668849923668,18.5382292247828,18.4180865009209,18.0928116004488,17.7765862820657,17.7126488693061,17.9262508250095,17.7711826283791,17.3920885540572,17.0002265238288,16.6047591477479,16.5278154007285,16.7608626368586,17.1754798819345,17.3202333191454,17.2746570283312,17.2797199891023,17.1720234202166,17.0561834567156,17.1471263367279,17.1490525332247,17.1742701501505,17.2102995672885,17.1807685919083,17.304982918988,17.6351556152494,17.9957613397441,18.3025963280561,18.6636491762709,19.2075187408968,19.385329557135,19.196032937098,18.9793556850108,18.851054707733,19.1019580362438,19.6261771710922,20.137934358428,20.4904031758043,20.5346736497722,20.6661458543646,20.6205886464047,20.5909424874772,20.6089642078637,20.6092332247214,20.6835592771619,20.6416711820446,20.716712772807,20.7187052594784,20.8450203443257,20.9603585754256,20.9119218754958,20.923088218936,20.600529577769,20.1790345175708,19.8730289016021,19.4594929395556,19.0080120073852,18.5358374159193,17.8358070425117,17.1037203544767,16.5726580411304,16.0048264520546,15.524327328224,15.1430900771031,14.7360184369834,14.5591904590635,14.5637633540164,14.6025737763583,14.7117749449649,15.0774737567254,15.2364148667759,15.3189556720927,15.4674595403888,15.4628342821108,15.3566487213159,15.5486595247918,15.4711516645474],[null,null,null,-1.37370740785532,-1.59777033909453,-2.06402744991656,-1.89108515596111,-1.35891551474355,-1.44097280316813,-0.68324245528671,-0.515584409352862,-0.377596583183082,0.105739117064661,0.556751289575029,0.225501328966664,0.373265520914211,0.635429671658465,0.367327594584861,0.910078428237626,0.59863123726707,0.746876916256144,0.688746224520926,0.648210034611919,0.323773786562561,0.335736190146365,0.857900796563922,0.364606340899524,-0.477171340341896,-0.943188724583746,-1.29323487942467,-0.918012359628872,0.251929247146452,0.882260142294871,1.27191924526208,1.02315402179643,0.592335018004149,0.336559156780704,0.226952539794797,0.247952838965454,0.148700020422863,0.0335624704084008,0.00290075466559891,0.214160905698409,0.606174329113116,1.20205403757007,1.48483737244593,1.81044506578726,1.82356463085581,2.1254812208249,2.42852500604626,2.35658628838908,2.23405328277896,1.54478567286124,0.593813680329759,-0.211661438507724,-0.305822986562867,-0.00504391241764549,0.526628829089601,1.2405566535224,1.26664791482355,1.35095596932516,1.51557132855803,1.31069678428938,1.2173069009694,1.34616678805218,1.22272430268417,1.17520578437261,0.70051259045103,0.822692238666769,0.709823370524329,0.808647576341474,0.781845064308199,0.668200591857862,0.561205404077468,0.604160145585392,0.675381853771782,0.637378011136189,0.45416178269154,0.0674988456906175,-0.424181179218008,-0.828189044411937,-0.863687288926221,-0.765154558995872,-0.554780352854405,-0.109211112229453,-0.0767034456520223,-0.000367774605525512,0.0666229298625815,0.0458430667747907,0.21686789933851,0.0432015578915034,-0.407043455700822,-0.655454281076025,-0.830312227340342,-0.488599799984378,-0.243680244151625,0.0096547559942171,-0.331989680128039],[null,null,null,-8.90538178104218,-9.12099166449747,-9.39709036101303,-9.60251018627656,-9.59255968601575,-9.67414565561924,-9.52056124659854,-9.42705969089884,-9.40808459248784,-9.67587339344059,-10.1093025258912,-10.6786603684047,-11.4172682172491,-11.6203447933156,-11.9001439522733,-12.1599055514266,-12.4517133524146,-13.0485633413502,-13.803778904155,-14.4324979838433,-14.564574352134,-13.9320701079568,-13.038525007151,-12.9338625293401,-13.3877671317526,-14.1602767059731,-14.3432892723061,-13.7188488638111,-12.9596010144732,-12.4210887429093,-12.5984808157095,-12.9496744855312,-13.1324909719262,-13.1212150189418,-12.8467795047472,-12.4051299355984,-11.8429659469832,-11.6035137752658,-11.4460725217491,-11.5742191960738,-11.6673835854888,-11.8359340958854,-11.8480695021978,-11.870227026155,-11.9649362669047,-11.9933613785502,-12.3169452942784,-12.7642457461422,-13.7235689068504,-13.7645586046759,-13.3083397337752,-12.5714364914979,-11.2546044676086,-11.0480167501724,-11.2352443780582,-11.6268839671521,-11.906593337002,-11.896765643724,-11.9643067919657,-11.9887499161839,-12.3518924990471,-12.5016576365297,-12.8924075023495,-13.0201165620491,-13.2367345412855,-13.4881470585874,-13.5204069844644,-13.9497435887783,-14.043726682007,-14.1598639244219,-14.0528158630939,-13.8317872331588,-13.6734629958056,-13.6925466300863,-13.8192828828443,-13.96947503814,-14.0534345199388,-13.8567924456211,-13.4805249649174,-12.7618502469599,-12.067003034456,-11.7098114072564,-11.4522099759677,-11.5696487125265,-11.8046383594658,-12.122529122265,-12.6366374351158,-13.8082545831132,-14.5080826628793,-14.7502545866302,-14.9260381580262,-14.7276999569864,-14.6542047944056,-15.0573221909684,-15.4995973649237]]},\"evals\":[\"attrs.series.C.plotter\",\"attrs.series.G.plotter\",\"attrs.series.X.plotter\",\"attrs.series.FBKF.plotter\",\"attrs.series.DE.plotter\",\"attrs.series.M.plotter\"],\"jsHooks\":[]}\nAC4Q Only Years\n\n\nlibrary(forecast)\ntmp.ts <- ts(subset(tmp.ts, quarter=4 ), start=1996, freq=1)\n\ndygraph(tmp.ts[,c(\"AGR\", \"IND\", \"SER\", \"TAX\")], main = \"GDP by Sectors\") %>%\n  dyStackedBarGroup(c(\"AGR\", \"IND\", \"SER\", \"TAX\")) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-5, 120) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-5,120]}},\"series\":{\"AGR\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"IND\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"SER\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"},\"TAX\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"AGRINDSERTAX\"}},\"title\":\"GDP by Sectors\",\"labels\":[\"year\",\"AGR\",\"IND\",\"SER\",\"TAX\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\"],[4.76841119908053,4.68504702949228,4.7500447835131,4.64598153089318,4.75045997570861,4.80104301642181,5.47527489376074,6.16718439147129,5.66531157603221,4.65116882283132,4.37004377383362,4.41691543234317,4.56785118317928,4.47677399182984,4.11575648747581,4.3420341299196,4.1683282240444,4.50688618214267,4.32561053879483,4.31914942942436,4.89135358685971,4.60210116052405,4.41853769167898,4.43654479472404],[22.3401145483349,22.5941476157036,22.1187903791379,21.7467112569757,23.0066186321239,22.6395279206454,22.4953278215365,23.0838178233212,24.306623290035,24.172578278061,23.5440216715158,23.1253804129963,23.0852937511155,21.8785926250332,23.2679773541452,23.1020509630306,22.1336473656008,21.2248099475746,20.4724627471447,19.3600439775462,18.3547582771232,18.181269965803,18.1291453541619,17.922226420092],[60.3188798043257,60.6057128222464,61.1185930542525,60.2036566374422,58.2518612416253,57.7136922463033,57.3481454771489,56.3578281380465,54.9204711078884,56.0758916106396,57.1381272102654,57.7262362097238,56.8048617737801,59.1450592146825,57.6129219715132,57.568169322112,58.7336025056285,59.6787579896523,61.2509740086137,62.3078671740674,63.20369583311,63.3398442335849,63.0140750086837,63.2529200476678],[12.5725944248606,12.1150925430609,12.0125717830966,13.403650574689,13.9910601505421,14.8457368242297,14.6812518075538,14.3911696646237,15.1075940260444,15.100361288468,14.9478073443852,14.7314679412606,15.5419932854938,14.4995741654542,15.0033441868657,14.9877455849378,14.9644219026494,14.5895458787548,13.9509527054468,14.0129394172942,13.5501923029071,13.8767846431261,14.4382419454755,14.3883087375161]]},\"evals\":[\"attrs.series.AGR.plotter\",\"attrs.series.IND.plotter\",\"attrs.series.SER.plotter\",\"attrs.series.TAX.plotter\"],\"jsHooks\":[]}\ndygraph(tmp.ts[,c(\"C\", \"FBKF\", \"DE\", \"G\", \"X\", \"M\")], main = \"GDP by Demand\") %>%\n  dyStackedBarGroup( c(\"C\", \"G\", \"X\", \"FBKF\", \"DE\") ) %>%\n  dyStackedBarGroup( c(\"M\") ) %>%\n  dyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\n  dyAxis(\"y\", valueRange = c(-20, 140) )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false},\"y\":{\"valueRange\":[-20,140]}},\"series\":{\"C\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"G\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"X\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"FBKF\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"DE\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction stackedBarPlotter(e) {\\n  //extracting and reducing the Dygraph.stackPoints_ function\\n  stackPoints = function(points, cumulativeYval, seriesExtremes, fillMethod) {\\n    var lastXval = null;\\n    var prevPoint = null;\\n    var nextPoint = null;\\n    var nextPointIdx = -1;\\n  \\n    // Find the next stackable point starting from the given index.\\n    var updateNextPoint = function(idx) {\\n      // If we've previously found a non-NaN point and haven't gone past it yet,\\n      // just use that.\\n      if (nextPointIdx >= idx) return;\\n  \\n      // We haven't found a non-NaN point yet or have moved past it,\\n      // look towards the right to find a non-NaN point.\\n      for (var j = idx; j < points.length; ++j) {\\n        // Clear out a previously-found point (if any) since it's no longer\\n        // valid, we shouldn't use it for interpolation anymore.\\n        nextPoint = null;\\n        if (!isNaN(points[j].yval) && points[j].yval !== null) {\\n          nextPointIdx = j;\\n          nextPoint = points[j];\\n          break;\\n        }\\n      }\\n    };\\n  \\n    for (var i = 0; i < points.length; ++i) {\\n      var point = points[i];\\n      var xval = point.xval;\\n      if (cumulativeYval[xval] === undefined) {\\n        cumulativeYval[xval] = 0;\\n      }\\n  \\n      var actualYval = point.yval;\\n      if (isNaN(actualYval) || actualYval === null) {\\n        if(fillMethod == 'none') {\\n          actualYval = 0;\\n        } else {\\n          // Interpolate/extend for stacking purposes if possible.\\n          updateNextPoint(i);\\n          if (prevPoint && nextPoint && fillMethod != 'none') {\\n            // Use linear interpolation between prevPoint and nextPoint.\\n            actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\\n                ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\\n          } else if (prevPoint && fillMethod == 'all') {\\n            actualYval = prevPoint.yval;\\n          } else if (nextPoint && fillMethod == 'all') {\\n            actualYval = nextPoint.yval;\\n          } else {\\n            actualYval = 0;\\n          }\\n        }\\n      } else {\\n        prevPoint = point;\\n      }\\n  \\n      var stackedYval = cumulativeYval[xval];\\n      if (lastXval != xval) {\\n        // If an x-value is repeated, we ignore the duplicates.\\n        stackedYval += actualYval;\\n        cumulativeYval[xval] = stackedYval;\\n      }\\n      lastXval = xval;\\n  \\n      point.yval_stacked = stackedYval;\\n      \\n      if (stackedYval > seriesExtremes[1]) {\\n        seriesExtremes[1] = stackedYval;\\n      }\\n      if (stackedYval < seriesExtremes[0]) {\\n        seriesExtremes[0] = stackedYval;\\n      }\\n  \\n    }\\n  };\\n  \\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  var groupSetNames = [];\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  // this next one we use further down, but will be populated in a decreasing loop,\\n  // so we'll establish the size in this forward loop so it has the structure to accept\\n  // later on.\\n  var seriesExtremes = [];\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      groupSetNames.push(setName);\\n      fillColors.push(strokeColors[setIdx]);\\n     \\n      // the aforementioned stuff for later on \\n      var tmpExtremes = [];\\n      tmpExtremes[0] = Infinity;\\n      tmpExtremes[1] = -Infinity;\\n      \\n      seriesExtremes.push(tmpExtremes);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n  \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  var points = sets[0];\\n  \\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // set up cumulative records\\n  var cumulativeYval = [];\\n  var packed = g.gatherDatasets_(g.rolledSeries_, null);\\n  var extremes = packed.extremes;\\n  var seriesName;\\n  \\n  for (var j = sets.length - 1; j >= 0; j--) {\\n    points = sets[j];\\n    seriesName = groupSetNames[j]; \\n    \\n    //  stack the data \\n    stackPoints(points, cumulativeYval, seriesExtremes[j],\\n          g.getBooleanOption(\\\"stackedGraphNaNFill\\\"));\\n    \\n    extremes[seriesName] = seriesExtremes[j];\\n  }\\n   \\n  // There is currently no way to update the axes height from inside the plotter...\\n  // Will have to wait until update can be made to underlying dygraphs lib\\n  // Preferring to do issue or pull request to main library on github instead of modifying here\\n  // g.computeYAxisRanges_(extremes);\\n  // g.layout_.setYAxes(g.axes_);\\n  \\n  var currSetName;\\n  var logscale;\\n  var connectSeparated;\\n    \\n  // Do the actual plotting.\\n  for (var j = 0; j < sets.length; j++) {\\n    currSetName = groupSetNames[j];\\n    connectSeparated = g.getOption('connectSeparatedPoints', currSetName);\\n    logscale = g.attributes_.getForSeries(\\\"logscale\\\", currSetName);\\n    \\n    axis = g.axisPropertiesForSeries(currSetName);\\n    \\n    points = sets[j];\\n    \\n    for (var i = 0; i < points.length; i++) {\\n      var point = points[i];\\n      \\n      var yval = point.yval;\\n      \\n      point.y_stacked = DygraphLayout.calcYNormal_(\\n          axis, point.yval_stacked, logscale);\\n          \\n      if (yval !== null && !isNaN(yval)) {\\n        yval = point.yval_stacked;\\n      }\\n      if (yval === null) {\\n        yval = NaN;\\n        if (!connectSeparated) {\\n          point.yval = NaN;\\n        }\\n      }\\n      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);\\n    \\n      point.canvasx = g.plotter_.area.w * point.x + g.plotter_.area.x;\\n      point.canvasy = g.plotter_.area.h * point.y + g.plotter_.area.y;\\n      \\n      var center_x = point.canvasx;\\n      \\n      ctx.fillStyle = fillColors[j];\\n      ctx.strokeStyle = fillColors[j];\\n    \\n      ctx.fillRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    \\n      ctx.strokeRect(center_x - bar_width / 2, point.canvasy,\\n        bar_width, y_bottom - point.canvasy);\\n    }\\n  }\\n}\",\"group\":\"CGXFBKFDE\"},\"M\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"}},\"title\":\"GDP by Demand\",\"labels\":[\"year\",\"C\",\"G\",\"X\",\"FBKF\",\"DE\",\"M\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\"],[65.1573992174822,65.3096296909024,64.1423007693591,64.6801194338542,64.5927003352349,64.107708373074,61.8984350412176,61.8446504233421,60.2065771878033,60.5042517756093,60.4376764506998,59.8749475746359,59.7307926830048,61.9564598766094,60.2228291525574,60.2738517807569,61.4118668448687,61.7152500945451,62.9595707059739,63.9647972801569,64.2514795844148,64.4826568483162,64.7040982667212,64.9362518767558],[19.7508265044786,19.5352948087087,20.0705315848897,19.782690769704,18.7678457360734,19.3432950140464,19.8096623469678,19.0774784933715,18.4675839248222,18.8900014184589,19.0389169374901,18.9429876148938,18.8393928751789,19.65063840422,19.0168578428585,18.6692569360109,18.530103265791,18.8924790008646,19.1535387102127,19.7768199570799,20.3792974318779,20.1685198605749,20.0849130898821,20.2825655903537],[6.73020969482599,6.98364957530894,7.03050033871807,9.56489827017302,10.1880480043795,12.37171066993,14.2305902723334,15.1807837028652,16.5457615119353,15.2438292665623,14.3743163008972,13.327675103099,13.5340005119683,10.8513711310977,10.8655847744169,11.5825126803012,11.8775390673678,11.7422306430422,11.0119428207843,12.9001914177405,12.4666790443888,12.5230753666957,14.889699895201,14.3224188515098],[18.6406537838098,19.1229011258392,18.5423485026572,17.0162942226036,18.30448803112,18.4180865009209,17.9262508250095,16.6047591477479,17.3202333191454,17.0561834567156,17.2102995672885,17.9957613397441,19.385329557135,19.1019580362438,20.5346736497722,20.6089642078637,20.716712772807,20.9119218754958,19.8730289016021,17.8358070425117,15.524327328224,14.5637633540164,15.2364148667759,15.3566487213159],[-1.37370740785532,-1.35891551474355,-0.377596583183082,0.373265520914211,0.59863123726707,0.323773786562561,-0.477171340341896,0.251929247146452,0.592335018004149,0.148700020422863,0.606174329113116,1.82356463085581,2.23405328277896,-0.305822986562867,1.26664791482355,1.2173069009694,0.70051259045103,0.781845064308199,0.675381853771782,-0.424181179218008,-0.554780352854405,0.0666229298625815,-0.407043455700822,-0.243680244151625],[-8.90538178104218,-9.59255968601575,-9.40808459248784,-11.4172682172491,-12.4517133524146,-14.564574352134,-13.3877671317526,-12.9596010144732,-13.1324909719262,-11.8429659469832,-11.6673835854888,-11.9649362669047,-13.7235689068504,-11.2546044676086,-11.906593337002,-12.3518924990471,-13.2367345412855,-14.043726682007,-13.6734629958056,-14.0534345199388,-12.067003034456,-11.8046383594658,-14.5080826628793,-14.6542047944056]]},\"evals\":[\"attrs.series.C.plotter\",\"attrs.series.G.plotter\",\"attrs.series.X.plotter\",\"attrs.series.FBKF.plotter\",\"attrs.series.DE.plotter\",\"attrs.series.M.plotter\"],\"jsHooks\":[]}\nThat’s it.\nThank you for reading!\n\n\n",
    "preview": "posts/2020-08-27-gdp-shares/post_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2020-09-03T19:24:16-03:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 768
  },
  {
    "path": "posts/2020-08-24-scrape-gdp/",
    "title": "Scraping Brazilian GDP data from the SIDRA-IBGE website",
    "description": "Scraping Brazilian GDP data from the SIDRA-IBGE website",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-08-24",
    "categories": [
      "R",
      "ggplot2",
      "dygraphs",
      "scraping",
      "webscraping",
      "reproducible-report",
      "reproducible-research",
      "PIB",
      "GDP"
    ],
    "contents": "\nLast Updated 2020-09-03\nIn this post, we will scrape the brazilian gdp data from the SIDRA-IBGE website. Here, I use my own functions (based on other codes) to download the sidra data, but be aware that theres is a CRAN package for that here. My source code for the functions can be found here.\nAlso, there is another post here that makes a lot of the things we will be doing.\nOk, disclaimers are out of the way. First, let’s load up our functions and other libraries.\n\n\n# source functions\nsource(\"./myfuns.R\")\n\n# load libraries\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(lubridate)\nlibrary(dygraphs)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\nThe gdp.dl.csv() function, downloads the data from the website and saves a .csv. The gdp.save.levels() and gdp.save.rets() functions load the .csv file, using the paths used in gdp.dl.csv(), transforms the data using the gdp.csv2df() function and saves a data.frame file with the .rds format. I separated the functions that download and trassform the data to avoid connecting to the internet every time I wanted to edit the .csv file. Also, the function df2ts() transforms the data.frame into a ts object because paged_table() and ggplot() do not accept ts objects, whereas dygraphs only accepts time series objects.\n\n\n# download gdp\ngdp.dl.csv()\n\n# transform and save data\ngdp.save.levels()\ngdp.save.rets()\n\nNow, let’s load our data.\n\n\n# LOAD DATA\n\n# levels\ngdp.nominal  <- readRDS(\"../../data/gdp-nominal.rds\")\ngdp.real.NSA <- readRDS(\"../../data/gdp-real-NSA.rds\")\ngdp.real.SA  <- readRDS(\"../../data/gdp-real-SA.rds\")\n\n# rets\ngdp.ret4    <- readRDS(\"../../data/gdp-ret4.rds\")\ngdp.ret1    <- readRDS(\"../../data/gdp-ret1.rds\")\ngdp.retsum4 <- readRDS(\"../../data/gdp-retsum4.rds\")\ngdp.retyear <- readRDS(\"../../data/gdp-retyear.rds\")\n\n# data as ts (for dygraphs)\ngdp.nominal.ts  <- df2ts(gdp.nominal)\ngdp.real.NSA.ts <- df2ts(gdp.real.NSA)\ngdp.real.SA.ts  <- df2ts(gdp.real.SA)\ngdp.ret4.ts     <- df2ts(gdp.ret4)\ngdp.ret1.ts     <- df2ts(gdp.ret1)\ngdp.retsum4.ts  <- df2ts(gdp.retsum4)\ngdp.retyear.ts  <- df2ts(gdp.retyear)\n\n# only GDPs\ngdp.df <- data.frame( gdp.nominal[, c(1,2,3)],  \"nominal\"=gdp.nominal[, \"GDP\"], \"real.NSA\"=gdp.real.NSA[, \"GDP\"], \"real.SA\"=gdp.real.SA[, \"GDP\"],\n                     \"ret1\"=gdp.ret1[, \"GDP\"], \"ret4\"=gdp.ret4[, \"GDP\"], \"retsum4\"=gdp.retsum4[, \"GDP\"] )\ngdp.df$sum4.nomi    <- sum4(gdp.df$nominal)\ngdp.df$sum4.real    <- sum4(gdp.df$real.NSA)\ngdp.ts <- df2ts(gdp.df)\n\n\n\n# show gdp.df\npaged_table(gdp.df)\n\n\n{\"columns\":[{\"label\":[\"date\"],\"name\":[1],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"year\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"qtr\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nominal\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"real.NSA\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"real.SA\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ret1\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ret4\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"retsum4\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sum4.nomi\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sum4.real\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1996-03-31\",\"2\":\"1996\",\"3\":\"1\",\"4\":\"189323.3\",\"5\":\"170920.0\",\"6\":\"175582.7\",\"7\":\"NA\",\"8\":\"-0.6\",\"9\":\"2.5\",\"10\":\"NA\",\"11\":\"NA\"},{\"1\":\"1996-06-30\",\"2\":\"1996\",\"3\":\"2\",\"4\":\"204610.7\",\"5\":\"176708.7\",\"6\":\"177333.2\",\"7\":\"1.0\",\"8\":\"1.3\",\"9\":\"2.1\",\"10\":\"NA\",\"11\":\"NA\"},{\"1\":\"1996-09-30\",\"2\":\"1996\",\"3\":\"3\",\"4\":\"221513.2\",\"5\":\"189844.3\",\"6\":\"184152.5\",\"7\":\"3.8\",\"8\":\"5.6\",\"9\":\"2.3\",\"10\":\"NA\",\"11\":\"NA\"},{\"1\":\"1996-12-31\",\"2\":\"1996\",\"3\":\"4\",\"4\":\"239316.3\",\"5\":\"184112.9\",\"6\":\"182379.6\",\"7\":\"-1.0\",\"8\":\"2.3\",\"9\":\"2.2\",\"10\":\"854763.6\",\"11\":\"721585.9\"},{\"1\":\"1997-03-31\",\"2\":\"1997\",\"3\":\"1\",\"4\":\"219117.0\",\"5\":\"176732.3\",\"6\":\"184293.1\",\"7\":\"1.0\",\"8\":\"3.4\",\"9\":\"3.2\",\"10\":\"884557.4\",\"11\":\"727398.2\"},{\"1\":\"1997-06-30\",\"2\":\"1997\",\"3\":\"2\",\"4\":\"232889.5\",\"5\":\"185109.5\",\"6\":\"185154.9\",\"7\":\"0.5\",\"8\":\"4.8\",\"9\":\"4.0\",\"10\":\"912836.2\",\"11\":\"735798.9\"},{\"1\":\"1997-09-30\",\"2\":\"1997\",\"3\":\"3\",\"4\":\"246178.5\",\"5\":\"193244.9\",\"6\":\"187605.8\",\"7\":\"1.3\",\"8\":\"1.8\",\"9\":\"3.0\",\"10\":\"937501.4\",\"11\":\"739199.6\"},{\"1\":\"1997-12-31\",\"2\":\"1997\",\"3\":\"4\",\"4\":\"253904.1\",\"5\":\"190996.0\",\"6\":\"189163.8\",\"7\":\"0.8\",\"8\":\"3.7\",\"9\":\"3.4\",\"10\":\"952089.2\",\"11\":\"746082.7\"},{\"1\":\"1998-03-31\",\"2\":\"1998\",\"3\":\"1\",\"4\":\"235700.7\",\"5\":\"178513.0\",\"6\":\"185487.4\",\"7\":\"-1.9\",\"8\":\"1.0\",\"9\":\"2.8\",\"10\":\"968672.8\",\"11\":\"747863.4\"},{\"1\":\"1998-06-30\",\"2\":\"1998\",\"3\":\"2\",\"4\":\"251935.9\",\"5\":\"187904.0\",\"6\":\"188435.6\",\"7\":\"1.6\",\"8\":\"1.5\",\"9\":\"2.0\",\"10\":\"987719.2\",\"11\":\"750657.9\"},{\"1\":\"1998-09-30\",\"2\":\"1998\",\"3\":\"3\",\"4\":\"258043.3\",\"5\":\"193932.1\",\"6\":\"188539.9\",\"7\":\"0.1\",\"8\":\"0.4\",\"9\":\"1.6\",\"10\":\"999584.0\",\"11\":\"751345.1\"},{\"1\":\"1998-12-31\",\"2\":\"1998\",\"3\":\"4\",\"4\":\"256671.2\",\"5\":\"188256.1\",\"6\":\"186375.0\",\"7\":\"-1.1\",\"8\":\"-1.4\",\"9\":\"0.3\",\"10\":\"1002351.0\",\"11\":\"748605.2\"},{\"1\":\"1999-03-31\",\"2\":\"1999\",\"3\":\"1\",\"4\":\"250668.0\",\"5\":\"179883.3\",\"6\":\"186761.4\",\"7\":\"0.2\",\"8\":\"0.8\",\"9\":\"0.3\",\"10\":\"1017318.3\",\"11\":\"749975.5\"},{\"1\":\"1999-06-30\",\"2\":\"1999\",\"3\":\"2\",\"4\":\"268708.9\",\"5\":\"187151.0\",\"6\":\"187610.8\",\"7\":\"0.5\",\"8\":\"-0.4\",\"9\":\"-0.2\",\"10\":\"1034091.4\",\"11\":\"749222.5\"},{\"1\":\"1999-09-30\",\"2\":\"1999\",\"3\":\"3\",\"4\":\"274125.6\",\"5\":\"192737.0\",\"6\":\"187680.3\",\"7\":\"0.0\",\"8\":\"-0.6\",\"9\":\"-0.4\",\"10\":\"1050173.6\",\"11\":\"748027.5\"},{\"1\":\"1999-12-31\",\"2\":\"1999\",\"3\":\"4\",\"4\":\"294208.0\",\"5\":\"192336.8\",\"6\":\"190343.9\",\"7\":\"1.4\",\"8\":\"2.2\",\"9\":\"0.5\",\"10\":\"1087710.5\",\"11\":\"752108.2\"},{\"1\":\"2000-03-31\",\"2\":\"2000\",\"3\":\"1\",\"4\":\"276926.9\",\"5\":\"187799.5\",\"6\":\"192376.8\",\"7\":\"1.1\",\"8\":\"4.4\",\"9\":\"1.3\",\"10\":\"1113969.4\",\"11\":\"760024.3\"},{\"1\":\"2000-06-30\",\"2\":\"2000\",\"3\":\"2\",\"4\":\"292788.6\",\"5\":\"194596.6\",\"6\":\"195043.9\",\"7\":\"1.4\",\"8\":\"4.0\",\"9\":\"2.4\",\"10\":\"1138049.0\",\"11\":\"767469.9\"},{\"1\":\"2000-09-30\",\"2\":\"2000\",\"3\":\"3\",\"4\":\"308895.8\",\"5\":\"201534.7\",\"6\":\"197426.4\",\"7\":\"1.2\",\"8\":\"4.6\",\"9\":\"3.8\",\"10\":\"1172819.2\",\"11\":\"776267.6\"},{\"1\":\"2000-12-31\",\"2\":\"2000\",\"3\":\"4\",\"4\":\"320480.8\",\"5\":\"201179.5\",\"6\":\"199852.7\",\"7\":\"1.2\",\"8\":\"4.6\",\"9\":\"4.4\",\"10\":\"1199092.1\",\"11\":\"785110.3\"},{\"1\":\"2001-03-31\",\"2\":\"2001\",\"3\":\"1\",\"4\":\"312469.8\",\"5\":\"194325.7\",\"6\":\"200486.8\",\"7\":\"0.3\",\"8\":\"3.5\",\"9\":\"4.2\",\"10\":\"1234635.0\",\"11\":\"791636.5\"},{\"1\":\"2001-06-30\",\"2\":\"2001\",\"3\":\"2\",\"4\":\"323723.6\",\"5\":\"199123.0\",\"6\":\"199537.7\",\"7\":\"-0.5\",\"8\":\"2.3\",\"9\":\"3.7\",\"10\":\"1265570.0\",\"11\":\"796162.9\"},{\"1\":\"2001-09-30\",\"2\":\"2001\",\"3\":\"3\",\"4\":\"332524.4\",\"5\":\"202464.1\",\"6\":\"198569.2\",\"7\":\"-0.5\",\"8\":\"0.5\",\"9\":\"2.7\",\"10\":\"1289198.6\",\"11\":\"797092.4\"},{\"1\":\"2001-12-31\",\"2\":\"2001\",\"3\":\"4\",\"4\":\"347037.6\",\"5\":\"200109.7\",\"6\":\"197915.4\",\"7\":\"-0.3\",\"8\":\"-0.5\",\"9\":\"1.4\",\"10\":\"1315755.5\",\"11\":\"796022.5\"},{\"1\":\"2002-03-31\",\"2\":\"2002\",\"3\":\"1\",\"4\":\"342296.7\",\"5\":\"195252.5\",\"6\":\"202737.2\",\"7\":\"2.4\",\"8\":\"0.5\",\"9\":\"0.7\",\"10\":\"1345582.3\",\"11\":\"796949.3\"},{\"1\":\"2002-06-30\",\"2\":\"2002\",\"3\":\"2\",\"4\":\"367362.8\",\"5\":\"203699.3\",\"6\":\"203473.8\",\"7\":\"0.4\",\"8\":\"2.3\",\"9\":\"0.7\",\"10\":\"1389221.6\",\"11\":\"801525.5\"},{\"1\":\"2002-09-30\",\"2\":\"2002\",\"3\":\"3\",\"4\":\"379794.5\",\"5\":\"210916.4\",\"6\":\"206141.6\",\"7\":\"1.3\",\"8\":\"4.2\",\"9\":\"1.6\",\"10\":\"1436491.7\",\"11\":\"809977.8\"},{\"1\":\"2002-12-31\",\"2\":\"2002\",\"3\":\"4\",\"4\":\"399333.2\",\"5\":\"210460.6\",\"6\":\"208220.5\",\"7\":\"1.0\",\"8\":\"5.2\",\"9\":\"3.1\",\"10\":\"1488787.3\",\"11\":\"820328.8\"},{\"1\":\"2003-03-31\",\"2\":\"2003\",\"3\":\"1\",\"4\":\"397241.6\",\"5\":\"200459.9\",\"6\":\"207366.5\",\"7\":\"-0.4\",\"8\":\"2.7\",\"9\":\"3.6\",\"10\":\"1543732.2\",\"11\":\"825536.2\"},{\"1\":\"2003-06-30\",\"2\":\"2003\",\"3\":\"2\",\"4\":\"418987.3\",\"5\":\"205290.7\",\"6\":\"205603.3\",\"7\":\"-0.9\",\"8\":\"0.8\",\"9\":\"3.2\",\"10\":\"1595356.7\",\"11\":\"827127.6\"},{\"1\":\"2003-09-30\",\"2\":\"2003\",\"3\":\"3\",\"4\":\"439349.8\",\"5\":\"212237.1\",\"6\":\"207501.5\",\"7\":\"0.9\",\"8\":\"0.6\",\"9\":\"2.3\",\"10\":\"1654912.0\",\"11\":\"828448.3\"},{\"1\":\"2003-12-31\",\"2\":\"2003\",\"3\":\"4\",\"4\":\"462371.6\",\"5\":\"211699.6\",\"6\":\"209643.2\",\"7\":\"1.0\",\"8\":\"0.6\",\"9\":\"1.1\",\"10\":\"1717950.4\",\"11\":\"829687.3\"},{\"1\":\"2004-03-31\",\"2\":\"2004\",\"3\":\"1\",\"4\":\"444783.5\",\"5\":\"208233.9\",\"6\":\"212576.6\",\"7\":\"1.4\",\"8\":\"3.9\",\"9\":\"1.4\",\"10\":\"1765492.2\",\"11\":\"837461.3\"},{\"1\":\"2004-06-30\",\"2\":\"2004\",\"3\":\"2\",\"4\":\"481795.0\",\"5\":\"218240.9\",\"6\":\"218478.8\",\"7\":\"2.8\",\"8\":\"6.3\",\"9\":\"2.8\",\"10\":\"1828299.9\",\"11\":\"850411.6\"},{\"1\":\"2004-09-30\",\"2\":\"2004\",\"3\":\"3\",\"4\":\"505252.3\",\"5\":\"226157.4\",\"6\":\"221182.9\",\"7\":\"1.2\",\"8\":\"6.6\",\"9\":\"4.3\",\"10\":\"1894202.4\",\"11\":\"864331.8\"},{\"1\":\"2004-12-31\",\"2\":\"2004\",\"3\":\"4\",\"4\":\"525920.4\",\"5\":\"224844.8\",\"6\":\"222866.8\",\"7\":\"0.8\",\"8\":\"6.2\",\"9\":\"5.8\",\"10\":\"1957751.2\",\"11\":\"877477.0\"},{\"1\":\"2005-03-31\",\"2\":\"2005\",\"3\":\"1\",\"4\":\"499710.4\",\"5\":\"216947.1\",\"6\":\"224723.5\",\"7\":\"0.8\",\"8\":\"4.2\",\"9\":\"5.8\",\"10\":\"2012678.1\",\"11\":\"886190.2\"},{\"1\":\"2005-06-30\",\"2\":\"2005\",\"3\":\"2\",\"4\":\"535557.4\",\"5\":\"228007.2\",\"6\":\"227463.4\",\"7\":\"1.2\",\"8\":\"4.5\",\"9\":\"5.4\",\"10\":\"2066440.5\",\"11\":\"895956.4\"},{\"1\":\"2005-09-30\",\"2\":\"2005\",\"3\":\"3\",\"4\":\"552859.2\",\"5\":\"230940.5\",\"6\":\"225902.4\",\"7\":\"-0.7\",\"8\":\"2.1\",\"9\":\"4.2\",\"10\":\"2114047.4\",\"11\":\"900739.6\"},{\"1\":\"2005-12-31\",\"2\":\"2005\",\"3\":\"4\",\"4\":\"582457.6\",\"5\":\"229680.2\",\"6\":\"228839.5\",\"7\":\"1.3\",\"8\":\"2.2\",\"9\":\"3.2\",\"10\":\"2170584.5\",\"11\":\"905575.0\"},{\"1\":\"2006-03-31\",\"2\":\"2006\",\"3\":\"1\",\"4\":\"554270.5\",\"5\":\"226230.5\",\"6\":\"232498.2\",\"7\":\"1.6\",\"8\":\"4.3\",\"9\":\"3.2\",\"10\":\"2225144.6\",\"11\":\"914858.3\"},{\"1\":\"2006-06-30\",\"2\":\"2006\",\"3\":\"2\",\"4\":\"581976.9\",\"5\":\"233213.2\",\"6\":\"233263.0\",\"7\":\"0.3\",\"8\":\"2.3\",\"9\":\"2.7\",\"10\":\"2271564.0\",\"11\":\"920064.4\"},{\"1\":\"2006-09-30\",\"2\":\"2006\",\"3\":\"3\",\"4\":\"617847.7\",\"5\":\"241316.2\",\"6\":\"237143.2\",\"7\":\"1.7\",\"8\":\"4.5\",\"9\":\"3.3\",\"10\":\"2336552.6\",\"11\":\"930440.1\"},{\"1\":\"2006-12-31\",\"2\":\"2006\",\"3\":\"4\",\"4\":\"655354.9\",\"5\":\"240693.9\",\"6\":\"239939.8\",\"7\":\"1.2\",\"8\":\"4.8\",\"9\":\"4.0\",\"10\":\"2409449.9\",\"11\":\"941453.7\"},{\"1\":\"2007-03-31\",\"2\":\"2007\",\"3\":\"1\",\"4\":\"631423.0\",\"5\":\"237982.4\",\"6\":\"244411.4\",\"7\":\"1.9\",\"8\":\"5.2\",\"9\":\"4.2\",\"10\":\"2486602.5\",\"11\":\"953205.7\"},{\"1\":\"2007-06-30\",\"2\":\"2007\",\"3\":\"2\",\"4\":\"670654.7\",\"5\":\"248459.0\",\"6\":\"248521.4\",\"7\":\"1.7\",\"8\":\"6.5\",\"9\":\"5.3\",\"10\":\"2575280.3\",\"11\":\"968451.5\"},{\"1\":\"2007-09-30\",\"2\":\"2007\",\"3\":\"3\",\"4\":\"691845.9\",\"5\":\"255482.1\",\"6\":\"251107.0\",\"7\":\"1.0\",\"8\":\"5.9\",\"9\":\"5.6\",\"10\":\"2649278.5\",\"11\":\"982617.3\"},{\"1\":\"2007-12-31\",\"2\":\"2007\",\"3\":\"4\",\"4\":\"726339.3\",\"5\":\"256675.3\",\"6\":\"254855.0\",\"7\":\"1.5\",\"8\":\"6.6\",\"9\":\"6.1\",\"10\":\"2720262.9\",\"11\":\"998598.8\"},{\"1\":\"2008-03-31\",\"2\":\"2008\",\"3\":\"1\",\"4\":\"712055.2\",\"5\":\"252636.0\",\"6\":\"257985.7\",\"7\":\"1.2\",\"8\":\"6.2\",\"9\":\"6.3\",\"10\":\"2800895.2\",\"11\":\"1013252.3\"},{\"1\":\"2008-06-30\",\"2\":\"2008\",\"3\":\"2\",\"4\":\"769525.2\",\"5\":\"264201.7\",\"6\":\"263510.3\",\"7\":\"2.1\",\"8\":\"6.3\",\"9\":\"6.3\",\"10\":\"2899765.6\",\"11\":\"1028995.0\"},{\"1\":\"2008-09-30\",\"2\":\"2008\",\"3\":\"3\",\"4\":\"812602.6\",\"5\":\"273316.8\",\"6\":\"267593.3\",\"7\":\"1.5\",\"8\":\"7.0\",\"9\":\"6.5\",\"10\":\"3020522.3\",\"11\":\"1046829.7\"},{\"1\":\"2008-12-31\",\"2\":\"2008\",\"3\":\"4\",\"4\":\"815620.1\",\"5\":\"259314.9\",\"6\":\"257486.9\",\"7\":\"-3.8\",\"8\":\"1.0\",\"9\":\"5.1\",\"10\":\"3109803.1\",\"11\":\"1049469.3\"},{\"1\":\"2009-03-31\",\"2\":\"2009\",\"3\":\"1\",\"4\":\"756127.1\",\"5\":\"246506.9\",\"6\":\"253957.6\",\"7\":\"-1.4\",\"8\":\"-2.4\",\"9\":\"3.0\",\"10\":\"3153875.0\",\"11\":\"1043340.3\"},{\"1\":\"2009-06-30\",\"2\":\"2009\",\"3\":\"2\",\"4\":\"803577.5\",\"5\":\"258381.3\",\"6\":\"258481.0\",\"7\":\"1.8\",\"8\":\"-2.2\",\"9\":\"0.8\",\"10\":\"3187927.3\",\"11\":\"1037519.9\"},{\"1\":\"2009-09-30\",\"2\":\"2009\",\"3\":\"3\",\"4\":\"852843.3\",\"5\":\"270139.1\",\"6\":\"264543.1\",\"7\":\"2.3\",\"8\":\"-1.2\",\"9\":\"-1.2\",\"10\":\"3228168.0\",\"11\":\"1034342.2\"},{\"1\":\"2009-12-31\",\"2\":\"2009\",\"3\":\"4\",\"4\":\"920491.5\",\"5\":\"273121.7\",\"6\":\"271302.7\",\"7\":\"2.6\",\"8\":\"5.3\",\"9\":\"-0.1\",\"10\":\"3333039.4\",\"11\":\"1048149.0\"},{\"1\":\"2010-03-31\",\"2\":\"2010\",\"3\":\"1\",\"4\":\"886397.3\",\"5\":\"269207.9\",\"6\":\"277132.2\",\"7\":\"2.1\",\"8\":\"9.2\",\"9\":\"2.6\",\"10\":\"3463309.5\",\"11\":\"1070850.0\"},{\"1\":\"2010-06-30\",\"2\":\"2010\",\"3\":\"2\",\"4\":\"944144.9\",\"5\":\"280389.6\",\"6\":\"280466.6\",\"7\":\"1.2\",\"8\":\"8.5\",\"9\":\"5.3\",\"10\":\"3603877.0\",\"11\":\"1092858.3\"},{\"1\":\"2010-09-30\",\"2\":\"2010\",\"3\":\"3\",\"4\":\"997934.7\",\"5\":\"288798.0\",\"6\":\"282978.6\",\"7\":\"0.9\",\"8\":\"6.9\",\"9\":\"7.5\",\"10\":\"3748968.5\",\"11\":\"1111517.2\"},{\"1\":\"2010-12-31\",\"2\":\"2010\",\"3\":\"4\",\"4\":\"1057370.0\",\"5\":\"288660.5\",\"6\":\"286930.5\",\"7\":\"1.4\",\"8\":\"5.7\",\"9\":\"7.5\",\"10\":\"3885847.0\",\"11\":\"1127056.0\"},{\"1\":\"2011-03-31\",\"2\":\"2011\",\"3\":\"1\",\"4\":\"1016531.1\",\"5\":\"283193.6\",\"6\":\"291035.8\",\"7\":\"1.4\",\"8\":\"5.2\",\"9\":\"6.6\",\"10\":\"4015980.8\",\"11\":\"1141041.7\"},{\"1\":\"2011-06-30\",\"2\":\"2011\",\"3\":\"2\",\"4\":\"1086712.6\",\"5\":\"293569.3\",\"6\":\"293782.1\",\"7\":\"0.9\",\"8\":\"4.7\",\"9\":\"5.6\",\"10\":\"4158548.5\",\"11\":\"1154221.5\"},{\"1\":\"2011-09-30\",\"2\":\"2011\",\"3\":\"3\",\"4\":\"1112334.2\",\"5\":\"299013.8\",\"6\":\"293164.3\",\"7\":\"-0.2\",\"8\":\"3.5\",\"9\":\"4.8\",\"10\":\"4272947.9\",\"11\":\"1164437.3\"},{\"1\":\"2011-12-31\",\"2\":\"2011\",\"3\":\"4\",\"4\":\"1160804.1\",\"5\":\"296073.2\",\"6\":\"295835.3\",\"7\":\"0.9\",\"8\":\"2.6\",\"9\":\"4.0\",\"10\":\"4376382.0\",\"11\":\"1171850.0\"},{\"1\":\"2012-03-31\",\"2\":\"2012\",\"3\":\"1\",\"4\":\"1129472.4\",\"5\":\"288028.1\",\"6\":\"291718.3\",\"7\":\"-1.4\",\"8\":\"1.7\",\"9\":\"3.1\",\"10\":\"4489323.3\",\"11\":\"1176684.4\"},{\"1\":\"2012-06-30\",\"2\":\"2012\",\"3\":\"2\",\"4\":\"1183124.1\",\"5\":\"296465.1\",\"6\":\"296851.5\",\"7\":\"1.8\",\"8\":\"1.0\",\"9\":\"2.2\",\"10\":\"4585734.8\",\"11\":\"1179580.2\"},{\"1\":\"2012-09-30\",\"2\":\"2012\",\"3\":\"3\",\"4\":\"1230448.9\",\"5\":\"306445.5\",\"6\":\"302089.3\",\"7\":\"1.8\",\"8\":\"2.5\",\"9\":\"1.9\",\"10\":\"4703849.5\",\"11\":\"1187012.0\"},{\"1\":\"2012-12-31\",\"2\":\"2012\",\"3\":\"4\",\"4\":\"1271714.6\",\"5\":\"303424.5\",\"6\":\"301998.0\",\"7\":\"0.0\",\"8\":\"2.5\",\"9\":\"1.9\",\"10\":\"4814760.0\",\"11\":\"1194363.3\"},{\"1\":\"2013-03-31\",\"2\":\"2013\",\"3\":\"1\",\"4\":\"1241621.8\",\"5\":\"295866.7\",\"6\":\"303583.9\",\"7\":\"0.5\",\"8\":\"2.7\",\"9\":\"2.2\",\"10\":\"4926909.4\",\"11\":\"1202201.9\"},{\"1\":\"2013-06-30\",\"2\":\"2013\",\"3\":\"2\",\"4\":\"1322587.4\",\"5\":\"308389.5\",\"6\":\"308103.9\",\"7\":\"1.5\",\"8\":\"4.0\",\"9\":\"2.9\",\"10\":\"5066372.7\",\"11\":\"1214126.2\"},{\"1\":\"2013-09-30\",\"2\":\"2013\",\"3\":\"3\",\"4\":\"1354133.2\",\"5\":\"314900.2\",\"6\":\"309361.7\",\"7\":\"0.4\",\"8\":\"2.8\",\"9\":\"3.0\",\"10\":\"5190057.0\",\"11\":\"1222580.9\"},{\"1\":\"2013-12-31\",\"2\":\"2013\",\"3\":\"4\",\"4\":\"1413276.6\",\"5\":\"311095.4\",\"6\":\"309790.9\",\"7\":\"0.1\",\"8\":\"2.5\",\"9\":\"3.0\",\"10\":\"5331619.0\",\"11\":\"1230251.8\"},{\"1\":\"2014-03-31\",\"2\":\"2014\",\"3\":\"1\",\"4\":\"1385945.4\",\"5\":\"306126.6\",\"6\":\"312557.0\",\"7\":\"0.9\",\"8\":\"3.5\",\"9\":\"3.2\",\"10\":\"5475942.7\",\"11\":\"1240511.7\"},{\"1\":\"2014-06-30\",\"2\":\"2014\",\"3\":\"2\",\"4\":\"1422288.3\",\"5\":\"307043.0\",\"6\":\"307808.1\",\"7\":\"-1.5\",\"8\":\"-0.4\",\"9\":\"2.1\",\"10\":\"5575643.6\",\"11\":\"1239165.3\"},{\"1\":\"2014-09-30\",\"2\":\"2014\",\"3\":\"3\",\"4\":\"1462126.3\",\"5\":\"312888.8\",\"6\":\"307669.5\",\"7\":\"0.0\",\"8\":\"-0.6\",\"9\":\"1.2\",\"10\":\"5683636.6\",\"11\":\"1237154.0\"},{\"1\":\"2014-12-31\",\"2\":\"2014\",\"3\":\"4\",\"4\":\"1508593.0\",\"5\":\"310393.2\",\"6\":\"309244.9\",\"7\":\"0.5\",\"8\":\"-0.2\",\"9\":\"0.5\",\"10\":\"5778953.0\",\"11\":\"1236451.7\"},{\"1\":\"2015-03-31\",\"2\":\"2015\",\"3\":\"1\",\"4\":\"1456836.8\",\"5\":\"301188.9\",\"6\":\"306951.5\",\"7\":\"-0.7\",\"8\":\"-1.6\",\"9\":\"-0.7\",\"10\":\"5849844.4\",\"11\":\"1231514.0\"},{\"1\":\"2015-06-30\",\"2\":\"2015\",\"3\":\"2\",\"4\":\"1480130.9\",\"5\":\"298645.5\",\"6\":\"299577.8\",\"7\":\"-2.4\",\"8\":\"-2.7\",\"9\":\"-1.3\",\"10\":\"5907686.9\",\"11\":\"1223116.5\"},{\"1\":\"2015-09-30\",\"2\":\"2015\",\"3\":\"3\",\"4\":\"1508219.7\",\"5\":\"299549.5\",\"6\":\"294657.5\",\"7\":\"-1.6\",\"8\":\"-4.3\",\"9\":\"-2.2\",\"10\":\"5953780.3\",\"11\":\"1209777.2\"},{\"1\":\"2015-12-31\",\"2\":\"2015\",\"3\":\"4\",\"4\":\"1550599.7\",\"5\":\"293226.1\",\"6\":\"292324.8\",\"7\":\"-0.8\",\"8\":\"-5.5\",\"9\":\"-3.5\",\"10\":\"5995787.0\",\"11\":\"1192610.1\"},{\"1\":\"2016-03-31\",\"2\":\"2016\",\"3\":\"1\",\"4\":\"1499483.1\",\"5\":\"285636.3\",\"6\":\"288018.6\",\"7\":\"-1.5\",\"8\":\"-5.2\",\"9\":\"-4.4\",\"10\":\"6038433.3\",\"11\":\"1177057.4\"},{\"1\":\"2016-06-30\",\"2\":\"2016\",\"3\":\"2\",\"4\":\"1558285.6\",\"5\":\"288968.6\",\"6\":\"289164.3\",\"7\":\"0.4\",\"8\":\"-3.2\",\"9\":\"-4.6\",\"10\":\"6116588.0\",\"11\":\"1167380.5\"},{\"1\":\"2016-09-30\",\"2\":\"2016\",\"3\":\"3\",\"4\":\"1577224.3\",\"5\":\"292203.4\",\"6\":\"287422.4\",\"7\":\"-0.6\",\"8\":\"-2.5\",\"9\":\"-4.1\",\"10\":\"6185592.6\",\"11\":\"1160034.4\"},{\"1\":\"2016-12-31\",\"2\":\"2016\",\"3\":\"4\",\"4\":\"1634335.1\",\"5\":\"286732.8\",\"6\":\"287164.2\",\"7\":\"-0.1\",\"8\":\"-2.2\",\"9\":\"-3.3\",\"10\":\"6269328.0\",\"11\":\"1153541.1\"},{\"1\":\"2017-03-31\",\"2\":\"2017\",\"3\":\"1\",\"4\":\"1589214.4\",\"5\":\"286749.1\",\"6\":\"290495.5\",\"7\":\"1.2\",\"8\":\"0.4\",\"9\":\"-1.9\",\"10\":\"6359059.3\",\"11\":\"1154654.0\"},{\"1\":\"2017-06-30\",\"2\":\"2017\",\"3\":\"2\",\"4\":\"1633651.3\",\"5\":\"291509.8\",\"6\":\"292734.5\",\"7\":\"0.8\",\"8\":\"0.9\",\"9\":\"-0.9\",\"10\":\"6434425.0\",\"11\":\"1157195.2\"},{\"1\":\"2017-09-30\",\"2\":\"2017\",\"3\":\"3\",\"4\":\"1647680.1\",\"5\":\"296980.2\",\"6\":\"293160.5\",\"7\":\"0.1\",\"8\":\"1.6\",\"9\":\"0.2\",\"10\":\"6504880.9\",\"11\":\"1161972.0\"},{\"1\":\"2017-12-31\",\"2\":\"2017\",\"3\":\"4\",\"4\":\"1712773.2\",\"5\":\"293561.8\",\"6\":\"294056.1\",\"7\":\"0.3\",\"8\":\"2.4\",\"9\":\"1.3\",\"10\":\"6583319.0\",\"11\":\"1168801.0\"},{\"1\":\"2018-03-31\",\"2\":\"2018\",\"3\":\"1\",\"4\":\"1657833.7\",\"5\":\"290920.5\",\"6\":\"295682.3\",\"7\":\"0.6\",\"8\":\"1.5\",\"9\":\"1.6\",\"10\":\"6651938.3\",\"11\":\"1172972.4\"},{\"1\":\"2018-06-30\",\"2\":\"2018\",\"3\":\"2\",\"4\":\"1704702.3\",\"5\":\"294579.5\",\"6\":\"295069.3\",\"7\":\"-0.2\",\"8\":\"1.1\",\"9\":\"1.6\",\"10\":\"6722989.3\",\"11\":\"1176042.0\"},{\"1\":\"2018-09-30\",\"2\":\"2018\",\"3\":\"3\",\"4\":\"1736935.0\",\"5\":\"301545.0\",\"6\":\"297449.8\",\"7\":\"0.8\",\"8\":\"1.5\",\"9\":\"1.6\",\"10\":\"6812244.1\",\"11\":\"1180606.8\"},{\"1\":\"2018-12-31\",\"2\":\"2018\",\"3\":\"4\",\"4\":\"1789705.1\",\"5\":\"297151.7\",\"6\":\"296301.3\",\"7\":\"-0.4\",\"8\":\"1.2\",\"9\":\"1.3\",\"10\":\"6889176.1\",\"11\":\"1184196.7\"},{\"1\":\"2019-03-31\",\"2\":\"2019\",\"3\":\"1\",\"4\":\"1725680.6\",\"5\":\"292647.6\",\"6\":\"297970.3\",\"7\":\"0.6\",\"8\":\"0.6\",\"9\":\"1.1\",\"10\":\"6957023.0\",\"11\":\"1185923.8\"},{\"1\":\"2019-06-30\",\"2\":\"2019\",\"3\":\"2\",\"4\":\"1795805.8\",\"5\":\"297748.9\",\"6\":\"299329.5\",\"7\":\"0.5\",\"8\":\"1.1\",\"9\":\"1.1\",\"10\":\"7048126.6\",\"11\":\"1189093.2\"},{\"1\":\"2019-09-30\",\"2\":\"2019\",\"3\":\"3\",\"4\":\"1842699.5\",\"5\":\"305150.9\",\"6\":\"299505.6\",\"7\":\"0.1\",\"8\":\"1.2\",\"9\":\"1.0\",\"10\":\"7153891.1\",\"11\":\"1192699.2\"},{\"1\":\"2019-12-31\",\"2\":\"2019\",\"3\":\"4\",\"4\":\"1892739.6\",\"5\":\"302108.7\",\"6\":\"301104.5\",\"7\":\"0.5\",\"8\":\"1.7\",\"9\":\"1.1\",\"10\":\"7256925.6\",\"11\":\"1197656.1\"},{\"1\":\"2020-03-31\",\"2\":\"2020\",\"3\":\"1\",\"4\":\"1803421.0\",\"5\":\"291912.4\",\"6\":\"293712.8\",\"7\":\"-2.5\",\"8\":\"-0.3\",\"9\":\"0.9\",\"10\":\"7334665.9\",\"11\":\"1196921.0\"},{\"1\":\"2020-06-30\",\"2\":\"2020\",\"3\":\"2\",\"4\":\"1652951.2\",\"5\":\"263699.7\",\"6\":\"265243.3\",\"7\":\"-9.7\",\"8\":\"-11.4\",\"9\":\"-2.2\",\"10\":\"7191811.3\",\"11\":\"1162871.8\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nCool, the data is loaded, let’s make a table with the annual gdp data starting in 2014.\n\n\ntmp <- filter(gdp.df, date > \"2014-01-01\" & month(date) == \"12\" )\nmat <- cbind( \"Billions of current BRL\"=tmp$sum4.nomi/1000, \"Billions of 1995 BRL\"=tmp$sum4.real/1000, \"AC 4Q T/T-4\"=tmp$retsum4)\nrownames(mat) <- substring( date2qtr(tmp$date), 1, 4)\nkable( t( apply( mat, 2, rev) ), digits=2, caption = \"GDP by Year\")\nTable 1: GDP by Year\n\n2019\n2018\n2017\n2016\n2015\n2014\nBillions of current BRL\n7256.93\n6889.18\n6583.32\n6269.33\n5995.79\n5778.95\nBillions of 1995 BRL\n1197.66\n1184.20\n1168.80\n1153.54\n1192.61\n1236.45\nAC 4Q T/T-4\n1.10\n1.30\n1.30\n-3.30\n-3.50\n0.50\n\nNow, let’s make a table with quarterly gdp data starting from 2019.\n\n\ntmp <- filter(gdp.df, date > \"2019-01-01\" )\nmat <- cbind( \"Billions of current BRL\"=tmp$nominal/1000, \"T/T-1\"=tmp$ret1, \"T/T-4\"=tmp$ret4, \"AC 4Q T/T-4\"=tmp$retsum4)\nrownames(mat) <- date2qtr(tmp$date)\nkable( t( apply( mat, 2, rev) ), digits=2, caption = \"GDP by Quarter\")\nTable 2: GDP by Quarter\n\n2020:Q2\n2020:Q1\n2019:Q4\n2019:Q3\n2019:Q2\n2019:Q1\nBillions of current BRL\n1652.95\n1803.42\n1892.74\n1842.7\n1795.81\n1725.68\nT/T-1\n-9.70\n-2.50\n0.50\n0.1\n0.50\n0.60\nT/T-4\n-11.40\n-0.30\n1.70\n1.2\n1.10\n0.60\nAC 4Q T/T-4\n-2.20\n0.90\n1.10\n1.0\n1.10\n1.10\n\nTables are ready, let’s graph the GDP percent change for better visualization in ggplot:\n\n\ngdp.df %>%\nfilter(date > \"2014-01-01\") %>%\nselect(date, ret1, ret4, retsum4) %>%\nmelt(\"date\") %>%\nggplot( aes( x = date, y = value, fill = variable) ) +\ngeom_bar( stat=\"identity\", position=\"dodge\" ) +\nscale_fill_discrete(name=\" \",\n                    breaks=c(\"ret1\", \"ret4\", \"retsum4\"),\n                    labels=c(\"T/T-1\", \"T/T-4\", \"T/T-4 AC4Q\") ) +\nxlab(\"\") + ylab(\"\") +\nggtitle( \"Brazilian GDP %Change\" ) +\ntheme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\ntheme_economist()\n\n\nand interactive version with dygraphs:\n\n\ntmp <- window(gdp.ts, start=c(2014,1) )\ndygraph( tmp[, c(\"ret1\", \"ret4\", \"retsum4\") ], main=\"Brazilian GDP %Change\" ) %>%\ndySeries(\"ret1\", label = \"T/T-1\") %>%\ndySeries(\"ret4\", label = \"T/T-4\") %>%\ndySeries(\"retsum4\", label = \"AC 4Q T/T-4\") %>%\ndyAxis(\"x\", rangePad = 20, drawGrid = FALSE) %>%\ndyBarChart()\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"T/T-1\":{\"axis\":\"y\"},\"T/T-4\":{\"axis\":\"y\"},\"AC 4Q T/T-4\":{\"axis\":\"y\"}},\"title\":\"Brazilian GDP %Change\",\"labels\":[\"quarter\",\"T/T-1\",\"T/T-4\",\"AC 4Q T/T-4\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":20},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[0.9,-1.5,0,0.5,-0.7,-2.4,-1.6,-0.8,-1.5,0.4,-0.6,-0.1,1.2,0.8,0.1,0.3,0.6,-0.2,0.8,-0.4,0.6,0.5,0.1,0.5,-2.5,-9.7],[3.5,-0.4,-0.6,-0.2,-1.6,-2.7,-4.3,-5.5,-5.2,-3.2,-2.5,-2.2,0.4,0.9,1.6,2.4,1.5,1.1,1.5,1.2,0.6,1.1,1.2,1.7,-0.3,-11.4],[3.2,2.1,1.2,0.5,-0.7,-1.3,-2.2,-3.5,-4.4,-4.6,-4.1,-3.3,-1.9,-0.9,0.2,1.3,1.6,1.6,1.6,1.3,1.1,1.1,1,1.1,0.9,-2.2]],\"plotter\":\"MultiColumn\"},\"evals\":[],\"jsHooks\":[]}\nNow, let’s graph the level of the GDP using the Index of chained 1995 BRL, seasonally adjusted and not seasonally adjusted. In ggplot2:\n\n\nden.SA  <- mean(gdp.df$real.SA[year(gdp.df$date)==\"2014\"] )\nden.NSA <- mean(gdp.df$real.NSA[year(gdp.df$date)==\"2014\"] )\n\ngdp.df %>%\nselect(date, real.SA, real.NSA) %>%\nmutate(real.SA = 100*real.SA/den.SA, real.NSA = 100*real.NSA/den.NSA ) %>%\nmelt(id = \"date\") %>%\nggplot( aes(x = date, y = value) ) +\n  ggtitle( \"GDP Index of 1995 Chained BRL (2014=100)\" ) +\n  geom_line(aes(color = variable), size = 1) +\n  scale_color_manual(name = \"\", values = c(\"blue\", \"red\"), labels=c(\"Seasonal Adj.\", \"Not Seasonal Adj.\" ) ) +\n  theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n  xlab(\"\") + ylab(\"\") +\n  theme_economist()\n\n\nAnd with dygraphs:\n\n\ntmp <- cbind( \"real.SA\"=normalize.yr( gdp.ts[, \"real.SA\"], 2014), \"real.NSA\"=normalize.yr(gdp.ts[, \"real.NSA\"], 2014 ) )\ndygraph(tmp, main=\"GDP Index of 1995 Chained BRL (2014=100)\" ) %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyEvent(\"2002-01-1\", \"Lula\",  labelLoc = \"bottom\") %>%\ndyEvent(\"2010-01-1\", \"Dilma\", labelLoc = \"bottom\") %>%\ndyEvent(\"2016-09-1\", \"Temer\", labelLoc = \"bottom\") %>%\ndyEvent(\"2019-01-1\", \"Bolsonaro\", labelLoc = \"bottom\") %>%\ndyEvent(\"2008-10-1\", \"Subprime\", labelLoc = \"bottom\", color=\"red\") %>%\ndyEvent(\"2020-03-01\", \"Corona\", labelLoc = \"bottom\", color=\"red\") %>%\ndyLimit( max(tmp), \"Peak\", labelLoc = \"left\", color=\"blue\" ) %>%\ndySeries(\"real.NSA\", label = \"NSA\") %>%\ndySeries(\"real.SA\", label = \"SA\")\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP Index of 1995 Chained BRL (2014=100)\",\"labels\":[\"quarter\",\"NSA\",\"SA\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10,\"series\":{\"NSA\":{\"axis\":\"y\"},\"SA\":{\"axis\":\"y\"}}},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":\"2002-01-01T00:00:00.000Z\",\"label\":\"Lula\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2010-01-01T00:00:00.000Z\",\"label\":\"Dilma\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2016-09-01T00:00:00.000Z\",\"label\":\"Temer\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2019-01-01T00:00:00.000Z\",\"label\":\"Bolsonaro\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2008-10-01T00:00:00.000Z\",\"label\":\"Subprime\",\"labelLoc\":\"bottom\",\"color\":\"red\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2020-03-01T00:00:00.000Z\",\"label\":\"Corona\",\"labelLoc\":\"bottom\",\"color\":\"red\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":101.872212782922,\"label\":\"Peak\",\"labelLoc\":\"left\",\"color\":\"blue\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[55.2937071877936,57.166404478114,61.4158264112381,59.5617089650661,57.1740093363968,59.8840966474713,62.5159554927617,61.7884341869018,57.7500802628801,60.7881389115602,62.7382620160164,60.9020559851364,58.1934087950071,60.5445370317089,62.3516480968764,62.2221876422672,60.7543290022956,62.953245843242,65.1977446343066,65.0828600178867,62.8655968073373,64.4175732171093,65.4984338388308,64.7367481901303,63.1654148739153,65.898019522188,68.2328028584807,68.0853395009788,64.8500544189835,66.4128427674119,68.6600635087012,68.4861660253588,67.3649929516863,70.6023353077239,73.163344252809,72.7387249997279,70.1837607387675,73.7617700192421,74.7107291043576,74.3030086916384,73.1869917595018,75.4459705661696,78.067323800983,77.8659955980846,76.9888296930405,80.3780676702682,82.6500723314178,83.0360912576469,81.7293430912871,85.4709214290645,88.4197179096893,83.8900328346775,79.7465457143185,83.5880104604131,87.3917059028123,88.3566088698437,87.0904748898239,90.707814456918,93.427990540515,93.3835153380305,91.6149461421144,94.9715526467223,96.7328608069227,95.781571473092,93.178917682731,95.9083541037449,99.1370831674512,98.1597721783984,95.7147654671808,99.7659507536562,101.872212782922,100.641355942945,99.03391954258,99.3303710724961,101.221534106269,100.414175278655,97.4365414080872,96.6137275813795,96.9061673411838,94.8605100889738,92.4051611056441,93.4831839295105,94.5296708997716,92.7598879403156,92.765167111323,94.3052908948054,96.0749791639476,94.9691216904749,94.1146340670467,95.2983291782611,97.5517337437638,96.1304775547464,94.6733482622555,96.3236770778518,98.7182669715889,97.7340867453822,94.4355352376936,85.3085464661144],[56.7641309914038,57.3300256272836,59.5346406147265,58.9614903830826,59.580112765011,59.8587256056241,60.6510798545923,61.1547642953341,59.9662193437049,60.9193356822135,60.9530637440873,60.2531642708709,60.3780845643564,60.6526894504658,60.6751437784393,61.5362708140286,62.1934828593787,63.0557384677635,63.8259511717597,64.6103558508131,64.8153694448719,64.5085149340401,64.1954269408679,63.9840602471968,65.5428903242588,65.7810219967629,66.6434862564647,67.3155760394587,67.0394846016209,66.469460260252,67.0831437420117,67.7755303453424,68.7238574022591,70.6320075764733,71.5061995661157,72.0505809386617,72.6508340840961,73.5366395853489,73.0319633557783,73.9814941503979,75.1643216873923,75.4115849747603,76.665999795796,77.5701292082955,79.0157424750682,80.3444755717781,81.1803674041257,82.3920474999792,83.4041817719294,85.1902251155506,86.510228414443,83.2429189709548,82.1019282537076,83.5642945013284,85.5241336587364,87.709423829328,89.594042376555,90.6720402137582,91.4841299224392,92.7617518197074,94.0889355494565,94.9767950085834,94.7770684332835,95.6405860685446,94.309576719809,95.9691146147894,97.6624182995778,97.6328969508529,98.1456103619077,99.6068768418651,100.013527687004,100.152262902508,101.046519913612,99.5112593854448,99.4664643659061,99.9757563350375,99.2343193115565,96.8504954408265,95.2597869728618,94.5056472093585,93.1134962679996,93.4838991356228,92.9207607403189,92.8372976272229,93.9142755493739,94.6381122814451,94.7758434877615,95.0653739907525,95.5910923209217,95.3929175695859,96.1625219712611,95.791213018968,96.3308108968117,96.7701985969171,96.8271433367341,97.3440627497001,94.9544008771937,85.7504940864761]]},\"evals\":[],\"jsHooks\":[]}\nWe could (does not mean that we should) also normalize by an specific quarter.\n\n\nden.SA  <- gdp.df$real.SA[gdp.df$date==\"2013-09-30\"]\nden.NSA <- gdp.df$real.NSA[gdp.df$date==\"2013-09-30\"]\n\ngdp.df %>%\nselect(date, real.SA, real.NSA) %>%\nmutate(real.SA = 100*real.SA/den.SA, real.NSA = 100*real.NSA/den.NSA ) %>%\nmelt(id = \"date\") %>%\nggplot( aes(x = date, y = value) ) +\n  ggtitle( \"GDP Index of 1995 Chained BRL (2013:Q3=100)\" ) +\n  geom_line(aes(color = variable), size = 1) +\n  scale_color_manual(name = \"\", values = c(\"blue\", \"red\"), labels=c(\"Seasonal Adj.\", \"Not Seasonal Adj.\" ) ) +\n  theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n  xlab(\"\") + ylab(\"\") +\n  theme_economist()\n\n\n\n\ntmp <- cbind( \"real.SA\"=normalize( gdp.ts[, \"real.SA\"], c(2013, 3)), \"real.NSA\"=normalize(gdp.ts[, \"real.NSA\"], c(2013,3) ) )\ndygraph(tmp, main=\"GDP Index of 1995 Chained BRL, (2013:Q3=100)\" ) %>%\ndyAxis(\"x\", rangePad = 10, drawGrid = FALSE) %>%\ndyEvent(\"2002-01-1\", \"Lula\",  labelLoc = \"bottom\") %>%\ndyEvent(\"2010-01-1\", \"Dilma\", labelLoc = \"bottom\") %>%\ndyEvent(\"2016-09-1\", \"Temer\", labelLoc = \"bottom\") %>%\ndyEvent(\"2019-01-1\", \"Bolsonaro\", labelLoc = \"bottom\") %>%\ndyEvent(\"2008-10-1\", \"Subprime\", labelLoc = \"bottom\", color=\"red\") %>%\ndyEvent(\"2020-03-01\", \"Corona\", labelLoc = \"bottom\", color=\"red\") %>%\ndyLimit( max(tmp), \"Peak\", labelLoc = \"left\", color=\"blue\" ) %>%\ndySeries(\"real.NSA\", label = \"NSA\") %>%\ndySeries(\"real.SA\", label = \"SA\")\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"title\":\"GDP Index of 1995 Chained BRL, (2013:Q3=100)\",\"labels\":[\"quarter\",\"NSA\",\"SA\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"xRangePad\":10,\"series\":{\"NSA\":{\"axis\":\"y\"},\"SA\":{\"axis\":\"y\"}}},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":\"2002-01-01T00:00:00.000Z\",\"label\":\"Lula\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2010-01-01T00:00:00.000Z\",\"label\":\"Dilma\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2016-09-01T00:00:00.000Z\",\"label\":\"Temer\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2019-01-01T00:00:00.000Z\",\"label\":\"Bolsonaro\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2008-10-01T00:00:00.000Z\",\"label\":\"Subprime\",\"labelLoc\":\"bottom\",\"color\":\"red\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2020-03-01T00:00:00.000Z\",\"label\":\"Corona\",\"labelLoc\":\"bottom\",\"color\":\"red\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":101.032852505554,\"label\":\"Peak\",\"labelLoc\":\"left\",\"color\":\"blue\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\"],[54.2775165840546,56.1157973469461,60.2871231845219,58.4670808044442,56.123262442751,58.7835436293876,61.3670340370207,60.6528831552586,56.6887463080233,59.6709713581004,61.5852549995206,59.7827948578205,57.1239273255121,59.4318464061664,61.205746290935,61.0786650672404,59.6377828090928,61.7962878428767,63.9995371193475,63.886763858336,61.7102496254763,63.2337037327108,64.2947002421561,63.5470128916088,62.0045576201568,64.6869423192067,66.978816886875,66.8340636185661,63.6582367727418,65.192304116266,67.39822531882,67.2275237323992,66.1269556353249,69.3048019465031,71.8187445370526,71.401928958514,68.8939199625725,72.4061724038725,73.3376914699575,72.9374641640208,71.8419574486472,74.0594206262474,76.6325984960549,76.4349703132575,75.5739250084763,78.9008753952808,81.131125037537,81.510049688022,80.2273170068891,83.9001324249171,86.7947357716691,82.3482974826883,78.2809595824227,82.0518256912019,85.7856166224978,86.7327865530142,85.489921648609,89.0407815624917,91.7109661096689,91.6673082747505,89.9312419347715,93.2261605518437,94.9550992997961,94.0212928104271,91.4664707257169,94.1457454233521,97.3151367377298,96.3557868204611,93.9557145687396,97.9324469629873,100,98.7917639105382,97.2138690592796,97.5048723876826,99.3612795296407,98.5687583842184,95.6458476225639,94.8381555108189,95.1252207976282,93.1171587399511,90.706934286928,91.7651451517136,92.7923997304386,91.0551419335287,91.060324083659,92.5721433927813,94.3093082396009,93.2237742718357,92.3849904660406,93.5469315674249,95.7589229475517,94.36378667811,92.9334365829414,94.553435570411,96.9040175675251,95.9379246562973,92.6999940984155,83.7407415974143],[56.7564531560665,57.3222712498456,59.526588044212,58.9535153360503,59.5720540439983,59.8506291998362,60.6428762760997,61.1464925892029,59.9581083984675,60.9110958198205,60.9448193196848,60.2450145138722,60.3699179108171,60.6444856542616,60.6669369450947,61.5279475058702,62.1850706576571,63.0472096385791,63.8173181647043,64.6016167463004,64.8066026105131,64.4997896043844,64.1867439590473,63.9754058545335,65.5340250864643,65.7721245496182,66.6344721536353,67.3064710307245,67.0304169366205,66.4604696959304,67.0740701717382,67.7663631238453,68.7145619113978,70.622453991943,71.4965277396246,72.0408354799232,72.6410074359739,73.5266931244389,73.0220851566548,73.9714875190944,75.1541550685244,75.4013849114131,76.6556300620906,77.5596371833362,79.0050549185218,80.3336082926895,81.169387063501,82.3809032692342,83.3929006413474,85.1787024072952,86.4985271644255,83.2316596525491,82.0908232640777,83.5529917141271,85.5125657864881,87.6975603778503,89.5819240142626,90.6597760430169,91.471755909603,92.749204997557,94.0762092143292,94.9639485828528,94.7642490222844,95.6276498593827,94.2968205410718,95.9561339693253,97.6492086202741,97.6196912645647,98.1323353267354,99.5934041578744,100,100.138716450377,101.032852505554,99.4977996345348,99.4530106739065,99.962233756933,99.2208970191656,96.8373955810499,95.2469022700421,94.4928645104068,93.1009018693972,93.4712546368572,92.9081924108489,92.8247405868544,93.9015728385088,94.6253116654568,94.7630242424468,95.0525155839553,95.5781628062135,95.3800148597117,96.149515165794,95.7782564362197,96.3177813288247,96.7571095979769,96.8140466355297,97.3308961307137,94.9415574804614,85.7388955970394]]},\"evals\":[],\"jsHooks\":[]}\nSo that is our little report of the brazilian GDP series.\nExtensions\nOn future posts I intend to break it up by sectors and components.\nAutomation and cron jobs\nAlso, we can run the gdp.dl.csv() and the gdp.save.levels() and gdp.save.rets() functions separately on an executable script using cron jobs (more details here) to autmate the scraping part. The rest of the script is completely reusable to automate reporting.\nFuture dates\nFinally, here we can find out when the next research will be published:\nReference Date\nPublishing Date\n2020:Q2\n“2020-09-01”\n2020:Q3\n“2020-12-03”\nStay tuned.\nThank you for reading!\n\n\n",
    "preview": "posts/2020-08-24-scrape-gdp/post_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2020-09-03T19:23:49-03:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 768
  },
  {
    "path": "posts/2020-08-21-dygraph/",
    "title": "Interactive Plots with `dygraphs`",
    "description": "`dygraphs` allows us to make interactive plots in webpages.",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-08-21",
    "categories": [
      "R",
      "dygraphs",
      "PIB",
      "GDP",
      "plot"
    ],
    "contents": "\nLast Updated 2020-09-03\nOn previous posts, I showed how to make plots with the base and ggplot2 libraries. Today, I will make interactive plots with dygraphs. This package has a terrific documentation website here.\nFirst, let’s load the data and the functions:\n\n\n# import funs\nsource(\"./myfuns.R\")\n\n# import data\ny <- import_gdp(\"../../data/PIB_BASE_2000.csv\")\n\n# visualization\nhead(y)\n\n1980:Q1 1980:Q2 1980:Q3 1980:Q4 1981:Q1 1981:Q2 \n   70.6    76.3    75.5    73.2    70.5    74.3 \n\nNow, we load dygraphs and try to make a plot:\n\n\n# libraries\nlibrary(dygraphs)\n\n# plot\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\")\n\n{\"x\":{\"attrs\":{\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"V1\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}}},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nOH! That worked out of the box, with similar syntax as base::plot(). Take that ggplot!\nOk, let’s try some options. First, let’s label the series as “GDP”.\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE)\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nYes, we have to use the pipe %>%, so not EVERYTHING is similar to the base::plot(). As I said about ggplot, this is a fancy package. Let’s have go at the range selector option.\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyRangeSelector(height = 20)\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"showRangeSelector\":true,\"rangeSelectorHeight\":20,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"#808FAB\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}\nCOOL! Now, let’s try to make lines. dygraphs uses dyEvent() for vertical lines and dyLimit() for horizontal lines.\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyEvent(\"1983-03-30\", \"LABEL\",  labelLoc = \"top\") %>%\ndyEvent(\"2010-03-30\", \"LABEL\",  labelLoc = \"bottom\") %>%\ndyLimit( as.numeric(100), \"LABEL\", labelLoc = \"right\", color=\"red\" )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[{\"pos\":\"1983-03-30T00:00:00.000Z\",\"label\":\"LABEL\",\"labelLoc\":\"top\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":\"2010-03-30T00:00:00.000Z\",\"label\":\"LABEL\",\"labelLoc\":\"bottom\",\"color\":\"black\",\"strokePattern\":[7,3],\"axis\":\"x\"},{\"pos\":100,\"label\":\"LABEL\",\"labelLoc\":\"right\",\"color\":\"red\",\"strokePattern\":[7,3],\"axis\":\"y\"}],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nSo far, so good, now, let’s make those rectangles. dygraphs uses dyShading() to make those. Before, we have to load the recession limit dates.\n\n\n# load recs\nrecs  <- qtr2date( readRDS(\"../../data/gdp-recessions.rds\") )\n\n# visualization\nhead(recs)\n\n[1] \"1981-03-31\" \"1983-03-31\" \"1987-09-30\" \"1988-09-30\" \"1989-09-30\"\n[6] \"1992-03-31\"\n\n# tranform recs to data frame\nrecs.mat <- t( matrix( recs, nrow=2 ) ); colnames(recs.mat) <- c(\"start\", \"end\"); recs.mat\n\n     start        end         \n[1,] \"1981-03-31\" \"1983-03-31\"\n[2,] \"1987-09-30\" \"1988-09-30\"\n[3,] \"1989-09-30\" \"1992-03-31\"\n[4,] \"1995-06-30\" \"1995-09-30\"\n[5,] \"1998-03-31\" \"1999-03-31\"\n[6,] \"2001-06-30\" \"2001-12-31\"\n[7,] \"2003-03-31\" \"2003-06-30\"\n[8,] \"2008-12-31\" \"2009-03-31\"\n\n# plot\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyShading( recs.mat[1, 1], recs.mat[1, 2] ) %>%\ndyShading( recs.mat[2, 1], recs.mat[2, 2] ) %>%\ndyShading( recs.mat[3, 1], recs.mat[3, 2] ) %>%\ndyShading( recs.mat[4, 1], recs.mat[4, 2] ) %>%\ndyShading( recs.mat[5, 1], recs.mat[5, 2] ) %>%\ndyShading( recs.mat[6, 1], recs.mat[6, 2] ) %>%\ndyShading( recs.mat[7, 1], recs.mat[7, 2] ) %>%\ndyShading( recs.mat[8, 1], recs.mat[8, 2] )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[{\"from\":\"1981-03-31T00:00:00.000Z\",\"to\":\"1983-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"1987-09-30T00:00:00.000Z\",\"to\":\"1988-09-30T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"1989-09-30T00:00:00.000Z\",\"to\":\"1992-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"1995-06-30T00:00:00.000Z\",\"to\":\"1995-09-30T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"1998-03-31T00:00:00.000Z\",\"to\":\"1999-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"2001-06-30T00:00:00.000Z\",\"to\":\"2001-12-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"2003-03-31T00:00:00.000Z\",\"to\":\"2003-06-30T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"},{\"from\":\"2008-12-31T00:00:00.000Z\",\"to\":\"2009-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"}],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nNICE! But it seems a lot of dyShading lines, can we make it like in ggplot?\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyShading( recs.mat)\n\nError in asISO8601Time(to): argument \"to\" is missing, with no default\n\nOH! Do I have to provide two arguments?\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyShading( recs.mat, recs.mat )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[{\"from\":\"1981-03-31T00:00:00.000Z\",\"to\":\"1981-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"}],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nNOPE! Should I define the dimensions?\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\ndyShading( recs.mat[, 1], recs.mat[, 2] )\n\n{\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawGrid\":false}},\"series\":{\"GDP\":{\"axis\":\"y\"}},\"title\":\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\"labels\":[\"quarter\",\"GDP\"],\"legend\":\"auto\",\"retainDateWindow\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[{\"from\":\"1981-03-31T00:00:00.000Z\",\"to\":\"1983-03-31T00:00:00.000Z\",\"color\":\"#EFEFEF\",\"axis\":\"x\"}],\"events\":[],\"format\":\"date\",\"data\":[[\"1980-01-01T00:00:00.000Z\",\"1980-04-01T00:00:00.000Z\",\"1980-07-01T00:00:00.000Z\",\"1980-10-01T00:00:00.000Z\",\"1981-01-01T00:00:00.000Z\",\"1981-04-01T00:00:00.000Z\",\"1981-07-01T00:00:00.000Z\",\"1981-10-01T00:00:00.000Z\",\"1982-01-01T00:00:00.000Z\",\"1982-04-01T00:00:00.000Z\",\"1982-07-01T00:00:00.000Z\",\"1982-10-01T00:00:00.000Z\",\"1983-01-01T00:00:00.000Z\",\"1983-04-01T00:00:00.000Z\",\"1983-07-01T00:00:00.000Z\",\"1983-10-01T00:00:00.000Z\",\"1984-01-01T00:00:00.000Z\",\"1984-04-01T00:00:00.000Z\",\"1984-07-01T00:00:00.000Z\",\"1984-10-01T00:00:00.000Z\",\"1985-01-01T00:00:00.000Z\",\"1985-04-01T00:00:00.000Z\",\"1985-07-01T00:00:00.000Z\",\"1985-10-01T00:00:00.000Z\",\"1986-01-01T00:00:00.000Z\",\"1986-04-01T00:00:00.000Z\",\"1986-07-01T00:00:00.000Z\",\"1986-10-01T00:00:00.000Z\",\"1987-01-01T00:00:00.000Z\",\"1987-04-01T00:00:00.000Z\",\"1987-07-01T00:00:00.000Z\",\"1987-10-01T00:00:00.000Z\",\"1988-01-01T00:00:00.000Z\",\"1988-04-01T00:00:00.000Z\",\"1988-07-01T00:00:00.000Z\",\"1988-10-01T00:00:00.000Z\",\"1989-01-01T00:00:00.000Z\",\"1989-04-01T00:00:00.000Z\",\"1989-07-01T00:00:00.000Z\",\"1989-10-01T00:00:00.000Z\",\"1990-01-01T00:00:00.000Z\",\"1990-04-01T00:00:00.000Z\",\"1990-07-01T00:00:00.000Z\",\"1990-10-01T00:00:00.000Z\",\"1991-01-01T00:00:00.000Z\",\"1991-04-01T00:00:00.000Z\",\"1991-07-01T00:00:00.000Z\",\"1991-10-01T00:00:00.000Z\",\"1992-01-01T00:00:00.000Z\",\"1992-04-01T00:00:00.000Z\",\"1992-07-01T00:00:00.000Z\",\"1992-10-01T00:00:00.000Z\",\"1993-01-01T00:00:00.000Z\",\"1993-04-01T00:00:00.000Z\",\"1993-07-01T00:00:00.000Z\",\"1993-10-01T00:00:00.000Z\",\"1994-01-01T00:00:00.000Z\",\"1994-04-01T00:00:00.000Z\",\"1994-07-01T00:00:00.000Z\",\"1994-10-01T00:00:00.000Z\",\"1995-01-01T00:00:00.000Z\",\"1995-04-01T00:00:00.000Z\",\"1995-07-01T00:00:00.000Z\",\"1995-10-01T00:00:00.000Z\",\"1996-01-01T00:00:00.000Z\",\"1996-04-01T00:00:00.000Z\",\"1996-07-01T00:00:00.000Z\",\"1996-10-01T00:00:00.000Z\",\"1997-01-01T00:00:00.000Z\",\"1997-04-01T00:00:00.000Z\",\"1997-07-01T00:00:00.000Z\",\"1997-10-01T00:00:00.000Z\",\"1998-01-01T00:00:00.000Z\",\"1998-04-01T00:00:00.000Z\",\"1998-07-01T00:00:00.000Z\",\"1998-10-01T00:00:00.000Z\",\"1999-01-01T00:00:00.000Z\",\"1999-04-01T00:00:00.000Z\",\"1999-07-01T00:00:00.000Z\",\"1999-10-01T00:00:00.000Z\",\"2000-01-01T00:00:00.000Z\",\"2000-04-01T00:00:00.000Z\",\"2000-07-01T00:00:00.000Z\",\"2000-10-01T00:00:00.000Z\",\"2001-01-01T00:00:00.000Z\",\"2001-04-01T00:00:00.000Z\",\"2001-07-01T00:00:00.000Z\",\"2001-10-01T00:00:00.000Z\",\"2002-01-01T00:00:00.000Z\",\"2002-04-01T00:00:00.000Z\",\"2002-07-01T00:00:00.000Z\",\"2002-10-01T00:00:00.000Z\",\"2003-01-01T00:00:00.000Z\",\"2003-04-01T00:00:00.000Z\",\"2003-07-01T00:00:00.000Z\",\"2003-10-01T00:00:00.000Z\",\"2004-01-01T00:00:00.000Z\",\"2004-04-01T00:00:00.000Z\",\"2004-07-01T00:00:00.000Z\",\"2004-10-01T00:00:00.000Z\",\"2005-01-01T00:00:00.000Z\",\"2005-04-01T00:00:00.000Z\",\"2005-07-01T00:00:00.000Z\",\"2005-10-01T00:00:00.000Z\",\"2006-01-01T00:00:00.000Z\",\"2006-04-01T00:00:00.000Z\",\"2006-07-01T00:00:00.000Z\",\"2006-10-01T00:00:00.000Z\",\"2007-01-01T00:00:00.000Z\",\"2007-04-01T00:00:00.000Z\",\"2007-07-01T00:00:00.000Z\",\"2007-10-01T00:00:00.000Z\",\"2008-01-01T00:00:00.000Z\",\"2008-04-01T00:00:00.000Z\",\"2008-07-01T00:00:00.000Z\",\"2008-10-01T00:00:00.000Z\",\"2009-01-01T00:00:00.000Z\",\"2009-04-01T00:00:00.000Z\",\"2009-07-01T00:00:00.000Z\",\"2009-10-01T00:00:00.000Z\",\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\"],[70.6,76.3,75.5,73.2,70.5,74.3,71,67.3,67.3,74.8,73.7,69.5,65.2,71.9,71.1,68.8,68,75.3,74.9,73.8,72.6,79.4,81.8,81.1,77.9,85.4,88.3,86.9,83.8,91.1,88.8,86.7,83.8,90.8,90.8,84.8,81.5,93.8,95.5,90.4,83.6,85.2,91.8,85,83.5,87.7,91,87,80.8,85.9,90.2,90.6,84.7,89.7,94.7,94.7,87.6,91.6,99.9,103.9,96.5,99.8,101.7,102.1,95.6,100.8,107.8,104.4,99.2,105.8,109.5,107.9,100,107.4,109.4,105.8,100.5,106.5,108.3,108.2,105.3,110.7,112.9,112.9,109,113.3,113.2,112.2,109.1,115.4,117.4,117.6,111.7,116.4,118.1,118.6,116.4,123.6,125.5,125.9,121.2,129,128.2,128.5,126.5,131.5,134.3,134.8,133,139.9,142.4,143.8,141.4,148.9,152.5,145.1,137.5,145.4,150.3,152.9,150.4,158.1,160.7,161,156.8,163.3,164.1,163.2,158,164.2,165.7,166.2,161,169.9,169.7,169.8,164.1,168.4,169.3]]},\"evals\":[],\"jsHooks\":[]}\nNo, again. Oh well, should I try a for loop?\n\n\nnrecs <- length(recs)/2; nrecs\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\ndyAxis(\"x\", drawGrid = FALSE) %>%\nfor(i in 1:nrecs) dyShading( recs.mat[i, 1], recs.mat[i, 2] ) %>%\n\nError: <text>:7:0: unexpected end of input\n5: dyAxis(\"x\", drawGrid = FALSE) %>%\n6: for(i in 1:nrecs) dyShading( recs.mat[i, 1], recs.mat[i, 2] ) %>%\n  ^\n\n$%&*# !!!\nOK, calm down, maybe it’s the pipe in the end, let’s change the order of the lines:\n\n\ndygraph(y, main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\") %>%\ndySeries(label = \"GDP\") %>%\nfor(i in 1:nrecs) dyShading( recs.mat[i, 1], recs.mat[i, 2] ) %>%\ndyAxis(\"x\", drawGrid = FALSE)\n\nError in function_list[[k]](value): object 'i' not found\n\nWell, it wasn’t meant to be. But hey, the dyShading feature works, I just don’t know how to automate them. If you had more patience than me, give me some feedback on the comments.\nThank you for reading.\n\n\n",
    "preview": {},
    "last_modified": "2020-09-03T14:49:30-03:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-08-20-ggplot/",
    "title": "Times Series Plots with `ggplot2`",
    "description": "`ggplot2` enables us to make beautiful graphics (as long as you use the tidyverse framework)",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-08-20",
    "categories": [
      "R",
      "ggplot2",
      "PIB",
      "GDP",
      "plot"
    ],
    "contents": "\nLast Updated 2020-09-03\nOn previous posts (here and here ), I demonstrated how to import and graph data using R. On this post, I will make those same plots using ggplot2 to make beautiful plots. First we will need to load the data and the functions.\n\n\n# funs\nsource(\"./myfuns.R\")\n\n# import data\ny    <- import_gdp(\"../../data/PIB_BASE_2000.csv\")\nrecs <- readRDS(\"../../data/gdp-recessions.rds\")\n\n# transform dates\ndates <- date2num(names(y))\nrecs  <- date2num(recs)\n\n# quick visualizations\nhead(y); head(dates); head(recs)\n\n1980:Q1 1980:Q2 1980:Q3 1980:Q4 1981:Q1 1981:Q2 \n   70.6    76.3    75.5    73.2    70.5    74.3 \n\n[1] 1980.00 1980.25 1980.50 1980.75 1981.00 1981.25\n\n[1] 1981.0 1983.0 1987.5 1988.5 1989.5 1992.0\n\nNow, let’s load the ggplot2 library and make some graphs.\n\n\n# libraries\nlibrary(ggplot2)\n\n# expected plot\nggplot(y)\n\nError: `data` must be a data frame, or other object coercible by `fortify()`, not an S3 object with class ts\n\nWait, WHAT? Why didn’t that work? I mean, plot(y), should work:\n\n\n# base plot\nplot(y)\n\n\nAnd it DOES, with the labels working properly and we don’t even have to specify the type (which should be line). So why ggplot2 does not? Let’s read the error message, as we should have, from the beginning. OK, OK, We will have to convert our data to a data.frame, a bit cumbersome, but hey, this is a FANCY package.\n\n\ny.df  <- as.data.frame(cbind(dates, \"GDP\"=y) )\nhead(y.df)\n\n    dates  GDP\n1 1980.00 70.6\n2 1980.25 76.3\n3 1980.50 75.5\n4 1980.75 73.2\n5 1981.00 70.5\n6 1981.25 74.3\n\n# plot\nggplot(y.df)\n\n\nIt is just a BLANK plot?! OMG! Let’s just RTFM already and get it over with.\nI used the following links (because internet is better than books?):\nhttp://www.cookbook-r.com/Graphs/\nhttps://www.tutorialspoint.com/ggplot2/ggplot2_time_series.htm\nhttps://www.neonscience.org/dc-time-series-plot-ggplot-r\nSo, ggplot2 has its very own syntax (grammar?), but it does have a quick plot option, let’s try it now:\n\n\n# quick plot\nqplot(x=dates, y=GDP, data=y.df,\n      geom=\"line\", size=I(1), color = I(\"blue\"),\n      xlab=\"\", ylab=\"\",\n      main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" )\n\n\nOK, that’s a nice enough looking plot, let’s try the ggplot function (again, the package has it’s own grammar):\n\n\n# plot\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_line( color = \"blue\", size=1 )\n\n\nFor the title options I used the following links:\nhttps://stackoverflow.com/questions/40675778/center-plot-title-in-ggplot2\nhttp://www.cookbook-r.com/Graphs/Titles_(ggplot2)/\nFigures inside the plot\nCool, but what about abline() and rect()?\nabline()\nFor straigh lines in the plot, the ggplot() syntax is actually pretty intuitive, below we show an example:\n\n\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_line( color = \"blue\", size=1 ) +\n    geom_vline( color = \"red\", linetype=\"dotted\", size=.5, aes( xintercept=1990 ) ) +\n    geom_hline( color = \"red\", linetype=\"dashed\", size=.5, aes( yintercept=100 ) )\n\n\nrect()\nNICE! Now I want to make a rectangle to highlight the recession periods. The plot worked just fine when I used a single rectangle, but it would not work if I used a for loop to make more rectangles. To figure out how to make more rectangles, I used this page. Let’s show our work.\n\n\n# tranform recs to data frame\nrecs.mat <- as.data.frame( t( matrix( recs, nrow=2 ) ) ); colnames(recs.mat) <- c(\"start\", \"end\")\n\n# plot with rect\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_rect( data=recs.mat, aes( NULL, NULL, xmin = start, xmax = end ), ymin = 0, ymax = 200 ) +\n    geom_line( color = \"blue\", size=1 )\n\n\nAnd there you have it, I made the plot with ggplot().\nPlot Objects\nOne neat thing about ggplot() is that we can “save” a plot as an object. We can use this to customize the plot later.\n\n\n# save plot\ngdp_plot  <-\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_line( color = \"blue\", size=1 )\n\n# list objects\nls()\n\n[1] \"date2num\"   \"dates\"      \"gdp_plot\"   \"import_gdp\" \"qtr2date\"  \n[6] \"recs\"       \"recs.mat\"   \"y\"          \"y.df\"      \n\nLet’s plot it.\n\n\n# plot gdp_plot\ngdp_plot\n\n\nLet’s center the title.\n\n\n# save gdp_plot with centered title\ngdp_plot_center <- gdp_plot +\ntheme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) )\n\ngdp_plot_center\n\n\nLet’s add the rectangles.\n\n\ngdp_plot_center +\ngeom_rect( data=recs.mat, aes( NULL, NULL, xmin = start, xmax = end ), ymin = 0, ymax = 200)\n\n\nYes, we messed up the order of the arguments in this last one. But hey, the saving plots feature worked. Let’s change the alpha argument to make transparent rectangles (I should’ve done it from the beginning)\n\n\np <- gdp_plot_center +\ngeom_rect( data=recs.mat, aes( NULL, NULL, xmin = start, xmax = end ), ymin = 0, ymax = 200, alpha = .3 )\n\n# plot\np\n\n\nThemes\nWe can see that customizing graphs is ggplot2’s strong suit, there is even a package with different themes to make them even more beautiful. Let’s try it.\n\n\nlibrary(ggthemes)\n\n# theme bw\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    theme_bw() +\n    theme( plot.title = element_text(hjust = 0.5, face = \"bold\" ) ) +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_line( color = \"blue\", size=1 )\n\n\nAnd now, the long waited theme_economist():\n\n\n# theme economist\nggplot(data = y.df, aes( x = dates, y = GDP ) ) +\n    theme_economist() +\n    ggtitle( \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\" ) +\n    xlab(\"\") + ylab(\"\") +\n    geom_line( color = \"blue\", size=1 )\n\n\nAnd yes, the themes work with saved objects\n\n\ngdp_plot\n\n\ngdp_plot + theme_bw()\n\n\ngdp_plot + theme_economist()\n\n\nFinal Remarks\nggplot2 is a phenomenal package once you jump through the initial hurdles. The problem with ggplot2 is that by having its own grammar the novice R user will not learn the R syntax, and the more experienced user will not benefit from knowing the R syntax. Those problems arise because the package is its own animal, but also because of this it is almost infinitely customizable. It should definitely be the choice if you intend to make beautiful polished plots. If you just want to make a quick plot to visualize some data and forget about the plot, your are better served with the base plots.\nBut again, therein lies another problem, you will use two different GRAMMARS to make plots. The base to make your quick and dirty plots. And ggplot’s to make a finished product. That is a question that tears me apart, and honestly I cannot decide if the tradeoff is worth. But hey, I’m using the package, am I not? So maybe, I have my answer.\n\n\n",
    "preview": "posts/2020-08-20-ggplot/economist_plot.png",
    "last_modified": "2020-09-03T14:46:25-03:00",
    "input_file": {},
    "preview_width": 1357,
    "preview_height": 960
  },
  {
    "path": "posts/2020-08-18-wrapper-gdp/",
    "title": "Making a wrapper to Import and Plot Data",
    "description": "To make research reproducible, we have to automate the way `R` performs tasks.",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert/"
      }
    ],
    "date": "2020-08-18",
    "categories": [
      "R",
      "R-base",
      "GDP",
      "PIB",
      "plot",
      "wrapper",
      "reproducible-research"
    ],
    "contents": "\nLast Updated 2020-09-03\nIn my last post, I showed how to import a .csv file and plot the data. This, entailed following the steps outlined in the post. In this post, I will make a wrapper function to automate the importing and formating.\nImport Wrapper\nRemembering that I already downloaded the data and saved the only column that I will need in a .csv file. Our wrapper function is:\n\n\nimport_gdp <- function(filename)\n{\n\n# import csv\ndata  <- read.csv(filename)\n\n# delete last 2 lines\ndata  <- head(data, -2)\n\n# save dates\ndates <- data[,1]\n\n# delete first row\ndata  <- data[,-1]\n\n# rearrange strings in dates\ndates <- gsub(\" T\", \":Q\", dates)\n\n# give names to values\nnames(data) <- dates\n\n# `ts` object\ndata.ts <- ts(data, start=c(1980, 1), end=c(2014, 3), freq=4 )\n\nreturn(data.ts)\n}\n\nAnd I can use import_gdp to import the file and format it as I like it:\n\n\n# check loaded objects\nls()\n\n[1] \"import_gdp\"\n\n# import data\ny <- import_gdp(\"../../data/PIB_BASE_2000.csv\")\n\n# quick visualization\nhead(y)\n\n1980:Q1 1980:Q2 1980:Q3 1980:Q4 1981:Q1 1981:Q2 \n   70.6    76.3    75.5    73.2    70.5    74.3 \n\n# print whole series\ny\n\n      Qtr1  Qtr2  Qtr3  Qtr4\n1980  70.6  76.3  75.5  73.2\n1981  70.5  74.3  71.0  67.3\n1982  67.3  74.8  73.7  69.5\n1983  65.2  71.9  71.1  68.8\n1984  68.0  75.3  74.9  73.8\n1985  72.6  79.4  81.8  81.1\n1986  77.9  85.4  88.3  86.9\n1987  83.8  91.1  88.8  86.7\n1988  83.8  90.8  90.8  84.8\n1989  81.5  93.8  95.5  90.4\n1990  83.6  85.2  91.8  85.0\n1991  83.5  87.7  91.0  87.0\n1992  80.8  85.9  90.2  90.6\n1993  84.7  89.7  94.7  94.7\n1994  87.6  91.6  99.9 103.9\n1995  96.5  99.8 101.7 102.1\n1996  95.6 100.8 107.8 104.4\n1997  99.2 105.8 109.5 107.9\n1998 100.0 107.4 109.4 105.8\n1999 100.5 106.5 108.3 108.2\n2000 105.3 110.7 112.9 112.9\n2001 109.0 113.3 113.2 112.2\n2002 109.1 115.4 117.4 117.6\n2003 111.7 116.4 118.1 118.6\n2004 116.4 123.6 125.5 125.9\n2005 121.2 129.0 128.2 128.5\n2006 126.5 131.5 134.3 134.8\n2007 133.0 139.9 142.4 143.8\n2008 141.4 148.9 152.5 145.1\n2009 137.5 145.4 150.3 152.9\n2010 150.4 158.1 160.7 161.0\n2011 156.8 163.3 164.1 163.2\n2012 158.0 164.2 165.7 166.2\n2013 161.0 169.9 169.7 169.8\n2014 164.1 168.4 169.3      \n\n# print series time\ntime(y)\n\n        Qtr1    Qtr2    Qtr3    Qtr4\n1980 1980.00 1980.25 1980.50 1980.75\n1981 1981.00 1981.25 1981.50 1981.75\n1982 1982.00 1982.25 1982.50 1982.75\n1983 1983.00 1983.25 1983.50 1983.75\n1984 1984.00 1984.25 1984.50 1984.75\n1985 1985.00 1985.25 1985.50 1985.75\n1986 1986.00 1986.25 1986.50 1986.75\n1987 1987.00 1987.25 1987.50 1987.75\n1988 1988.00 1988.25 1988.50 1988.75\n1989 1989.00 1989.25 1989.50 1989.75\n1990 1990.00 1990.25 1990.50 1990.75\n1991 1991.00 1991.25 1991.50 1991.75\n1992 1992.00 1992.25 1992.50 1992.75\n1993 1993.00 1993.25 1993.50 1993.75\n1994 1994.00 1994.25 1994.50 1994.75\n1995 1995.00 1995.25 1995.50 1995.75\n1996 1996.00 1996.25 1996.50 1996.75\n1997 1997.00 1997.25 1997.50 1997.75\n1998 1998.00 1998.25 1998.50 1998.75\n1999 1999.00 1999.25 1999.50 1999.75\n2000 2000.00 2000.25 2000.50 2000.75\n2001 2001.00 2001.25 2001.50 2001.75\n2002 2002.00 2002.25 2002.50 2002.75\n2003 2003.00 2003.25 2003.50 2003.75\n2004 2004.00 2004.25 2004.50 2004.75\n2005 2005.00 2005.25 2005.50 2005.75\n2006 2006.00 2006.25 2006.50 2006.75\n2007 2007.00 2007.25 2007.50 2007.75\n2008 2008.00 2008.25 2008.50 2008.75\n2009 2009.00 2009.25 2009.50 2009.75\n2010 2010.00 2010.25 2010.50 2010.75\n2011 2011.00 2011.25 2011.50 2011.75\n2012 2012.00 2012.25 2012.50 2012.75\n2013 2013.00 2013.25 2013.50 2013.75\n2014 2014.00 2014.25 2014.50        \n\nExtensions\nOn this function I could have created variables to pass options about the dates and the frequency of data. We won’t do this today, but I do intend to make a following post about how to scrape the brazilian GDP data from the SIDRA-IBGE site.\nPlot Wrapper\nAlso, I can make a wrapper for the plot script.\n\n\nplot_gdp <- function(data, rec_dates)\n{\n\n# blank plot\nplot(NULL,\n main = \"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\",\n xlim = c(1980, 2015), ylim = c(60,200),\n xlab = \"\", ylab = \"\")\n\n# recession rectangles\nfor(i in 1:(length(rec_dates)/2) ) rect(rec_dates[1+2*(i-1)], 1, rec_dates[2*i], 250, col=\"gray\", border=T)\n\n# gdp line\nlines(data, col=\"blue\", lwd=1.5)\n}\n\nThe plot_gdp() function uses the rec_dates input to make the recession rectangles, so I must create a vector with recession limit dates. We use this document to get the dates.\n\n\n# fun to transform dates into numeric\nqtr2num <- function(data) return( as.numeric(substring(data, 1, 4)) - 1/4 + as.numeric( substring(data, 7) )/4 )\n\n\n\n# recession limits in numeric dates\n\nrecs <- c( \"1981:Q1\", \"1983:Q1\",\n \"1987:Q3\", \"1988:Q3\",\n \"1989:Q3\", \"1992:Q1\",\n \"1995:Q2\", \"1995:Q3\",\n \"1998:Q1\", \"1999:Q1\",\n \"2001:Q2\", \"2001:Q4\",\n \"2003:Q1\", \"2003:Q2\",\n \"2008:Q4\", \"2009:Q1\" )\n\nsaveRDS(recs, \"../../data/gdp-recessions.rds\")\n\nnewrecs <- qtr2num(recs)\n\nNow I can make the plot with a single line:\n\n\n# graph with wrapper\nplot_gdp(y, newrecs)\n\n\nBeacause the rec_dates argument generalizes the recession limit dates, I can make expansion (instead of recession) rectangles. Again, we use this document to get the dates.\n\n\n# expansion limits in numeric dates\nexps <- c( \"1983:Q2\", \"1987:Q2\",\n\"1989:Q1\", \"1989:Q2\",\n\"1992:Q2\", \"1995:Q1\",\n\"1995:Q4\", \"1997:Q4\",\n\"1999:Q2\", \"2001:Q1\",\n\"2002:Q1\", \"2002:Q4\",\n\"2003:Q3\", \"2008:Q3\",\n\"2009:Q2\", \"2014:Q1\" )\n\nsaveRDS(recs, \"../../data/gdp-expansions.rds\")\n\nnewexps <- qtr2num(exps)\n\n# graph with wrapper\nplot_gdp(y, newexps)\n\n\nError Catching\nNotice that I didn’t have any error catching functions, I did this because that would be beyond the scope of the post. If my goal was to make a more general function, I would absolutely have to include error catching lines.\nFinal Remarks\nTo make research reproducible, we have to automate the way R executes tasks. In this post I do this via wrappers.\n\n\n",
    "preview": "posts/2020-08-18-wrapper-gdp/post_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2020-09-03T14:35:28-03:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2020-08-17-plot-base-gdp/",
    "title": "Graphing the Brazilian GDP in `R`",
    "description": "Graphing the Brazilian GDP in `R`.",
    "author": [
      {
        "name": "Paulo Ferreira Naibert",
        "url": "https://github.com/pfnaibert"
      }
    ],
    "date": "2020-08-17",
    "categories": [
      "R",
      "R-base",
      "GDP",
      "PIB",
      "plot"
    ],
    "contents": "\nUpdated 2020-09-03\nIn this post, we want to make a similar plot as the figure in this pdf.\nImport\nFirst, I already downloaded the data and saved the only column that I will need in a .csv file. Next, I will import the data to R and get some quick visualizations.\n\n\n# Import\nPIB <- read.csv(\"../../data/PIB_BASE_2000.csv\")\n\n# info about PIB\nstr(PIB)\n\n'data.frame':   141 obs. of  2 variables:\n $ Data                                                                                                                                                                                                                        : chr  \"1980 T1\" \"1980 T2\" \"1980 T3\" \"1980 T4\" ...\n $ PIB...preços.de.mercado...índice.encadeado..média.1995...100....ref..2000.......Instituto.Brasileiro.de.Geografia.e.Estatística..Sistema.de.Contas.Nacionais.Trimestrais.Referência.2000..IBGE.SCN.2000.Trim.....SCN4_PIBPM4: num  70.6 76.3 75.5 73.2 70.5 74.3 71 67.3 67.3 74.8 ...\n\n# quick visualizations\nhead(PIB)\n\n     Data\n1 1980 T1\n2 1980 T2\n3 1980 T3\n4 1980 T4\n5 1981 T1\n6 1981 T2\n  PIB...preços.de.mercado...índice.encadeado..média.1995...100....ref..2000.......Instituto.Brasileiro.de.Geografia.e.Estatística..Sistema.de.Contas.Nacionais.Trimestrais.Referência.2000..IBGE.SCN.2000.Trim.....SCN4_PIBPM4\n1                                                                                                                                                                                                                         70.6\n2                                                                                                                                                                                                                         76.3\n3                                                                                                                                                                                                                         75.5\n4                                                                                                                                                                                                                         73.2\n5                                                                                                                                                                                                                         70.5\n6                                                                                                                                                                                                                         74.3\n\ntail(PIB)\n\n                Data\n136          2013 T4\n137          2014 T1\n138          2014 T2\n139          2014 T3\n140                 \n141 Fonte: IPEADATA.\n    PIB...preços.de.mercado...índice.encadeado..média.1995...100....ref..2000.......Instituto.Brasileiro.de.Geografia.e.Estatística..Sistema.de.Contas.Nacionais.Trimestrais.Referência.2000..IBGE.SCN.2000.Trim.....SCN4_PIBPM4\n136                                                                                                                                                                                                                        169.8\n137                                                                                                                                                                                                                        164.1\n138                                                                                                                                                                                                                        168.4\n139                                                                                                                                                                                                                        169.3\n140                                                                                                                                                                                                                           NA\n141                                                                                                                                                                                                                           NA\n\nWe can see that we don’t need the last two lines and that the first row are the dates. (Yes, in PT-BR date is called data; also, in case you are wondering, data is called dados, which is just the latin translation. Anyway, moving on). We are going to save the dates in vector in dates and delete the first column.\n\n\n# trim the last two lines\nPIB <- head(PIB, -2)\n\n# get first row and name it \"dates\"\ndates <- PIB[,1]\n\n# delete the first column\nPIB <- PIB[,-1]\n\nAfter deleting the first column, we can see that PIB changed class:\n\n\n# PIB is a different class now\nstr(PIB)\n\n num [1:139] 70.6 76.3 75.5 73.2 70.5 74.3 71 67.3 67.3 74.8 ...\n\nBefore we give names to the values, let’s format it more to our liking.\n\n\n# rearrange strings in dates\nhead(dates)\n\n[1] \"1980 T1\" \"1980 T2\" \"1980 T3\" \"1980 T4\" \"1981 T1\" \"1981 T2\"\n\ndates <- gsub(\" T\", \":Q\", dates)\nhead(dates)\n\n[1] \"1980:Q1\" \"1980:Q2\" \"1980:Q3\" \"1980:Q4\" \"1981:Q1\" \"1981:Q2\"\n\nNote that PIB is a numeric, so we put names, not rownames.\n\n\n# give names to values and rearrange string\nnames(PIB) <- dates\n\n# visualize again\nhead(PIB)\n\n1980:Q1 1980:Q2 1980:Q3 1980:Q4 1981:Q1 1981:Q2 \n   70.6    76.3    75.5    73.2    70.5    74.3 \n\ntail(PIB)\n\n2013:Q2 2013:Q3 2013:Q4 2014:Q1 2014:Q2 2014:Q3 \n  169.9   169.7   169.8   164.1   168.4   169.3 \n\nNow we can plot our data.\n\n\nplot(PIB, t=\"l\")\n\n\nThis plot doesn’t have the correct x labels. We will correct that by using a ts object.\nts object\nIt is pretty straightforward to make a ts object.\n\n\nPIB.ts <- ts(PIB, start=c(1980, 1), end=c(2014, 3), freq=4 )\n\nNow, we plot PIB.ts.\n\n\n# graph it\nplot(PIB.ts)\n\n\nAnd the x labels are correct.\nRecession Dates\nNow we get the dates to put the recession bars in the graph (yes, manually).\n\n\n# get recession limits in dates\nrecs <- c(\"1981:Q1\", \"1983:Q1\", \"1987:Q3\", \"1988:Q3\", \"1989:Q3\", \"1992:Q1\", \"1995:Q2\", \"1995:Q3\", \"1998:Q1\", \"1999:Q1\", \"2001:Q2\", \"2001:Q4\", \"2003:Q1\", \"2003:Q2\", \"2008:Q4\", \"2009:Q1\" )\n\nAnd we can make a nicer display with kable().\n\n\n# TABLE\ntab.rec <- t( matrix( recs, nrow=2 ) )\ncolnames(tab.rec) <- c( \"begin\", \"end\")\nkable(tab.rec)\nbegin\nend\n1981:Q1\n1983:Q1\n1987:Q3\n1988:Q3\n1989:Q3\n1992:Q1\n1995:Q2\n1995:Q3\n1998:Q1\n1999:Q1\n2001:Q2\n2001:Q4\n2003:Q1\n2003:Q2\n2008:Q4\n2009:Q1\n\nThe dates in recs are correct and are more intuitive, however, rect() and abline() cannot understand that format, so we will use numeric dates.\n\n\n# get recession limits in numeric dates\nqtr2num <- function(data) return( as.numeric(substring(data, 1, 4)) - 1/4 + as.numeric( substring(data, 7) )/4 )\nrecs2 <- qtr2num(recs)\nrecs2\n\n [1] 1981.00 1983.00 1987.50 1988.50 1989.50 1992.00 1995.25 1995.50\n [9] 1998.00 1999.00 2001.25 2001.75 2003.00 2003.25 2008.75 2009.00\n\nOr we can get the series indices of the recession dates.\n\n\n# get recession limits in indices\nidx <- unlist( sapply(recs, function(x) which(x==dates) ) )\nnames(idx) <- recs2; idx\n\n   1981    1983  1987.5  1988.5  1989.5    1992 1995.25  1995.5 \n      5      13      31      35      39      49      62      63 \n   1998    1999 2001.25 2001.75    2003 2003.25 2008.75    2009 \n     73      77      86      88      93      94     116     117 \n\nNow that we have the recession limit dates, we plot the data with some more options, and use the rect() function to plot the graph with the recession bars.\n\n\n# graph it\nplot(PIB.ts, xlim = c(1980, 2015), ylim=c(60,200), col=\"blue\", lwd=1.5, main =\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\", xlab = \"\", ylab=\"\")\nfor(i in 1:NROW(tab.rec)) rect(recs2[1+2*(i-1)], 1, recs2[2*i], 250, col=\"gray\", border=T)\n\n\nWellp, that didn’t go according to plan!\nOK, we will use plot(NULL, ...) to remedy the situation:\n\n\n# graph it\nplot(NULL, xlim = c(1980, 2015), ylim=c(60,200), main =\"Cronologia Trimestral dos Ciclos de Negócios Brasileiros\", xlab = \"\", ylab=\"\")\nfor(i in 1:NROW(tab.rec)) rect(recs2[1+2*(i-1)], 1, recs2[2*i], 250, col=\"gray\", border=T)\nlines(PIB.ts, ylim=c(60,200), col=\"blue\", lwd=1.5)\n\n\nFinal Remarks\nWe did it!\nNot quite. Our data is not Seasonally Adjusted, and our series ends in 2014:Q3, while the orginal graphs ends in 2020:Q1. However, this is just a matter of getting the data and plugging in the functions. For now, our work is done.\nIn the next post I intend to make wrappers of the functions used to automate the whole thing.\n\n\n",
    "preview": "posts/2020-08-17-plot-base-gdp/gdp.png",
    "last_modified": "2020-09-03T13:09:31-03:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
